org.amse.ys.zip.Decompressor -> org.amse.ys.zip.a:
    java.util.Queue ourDeflators -> a
    int read(byte[],int,int) -> a
    int read() -> a
    void storeDecompressor(org.amse.ys.zip.Decompressor) -> a
    org.amse.ys.zip.Decompressor init(org.amse.ys.zip.MyBufferedInputStream,org.amse.ys.zip.LocalFileHeader) -> a
    int available() -> b
org.amse.ys.zip.DeflatingDecompressor -> org.amse.ys.zip.DeflatingDecompressor:
    org.amse.ys.zip.MyBufferedInputStream myStream -> a
    int myCompressedAvailable -> b
    int myAvailable -> c
    byte[] myInBuffer -> d
    int myInBufferOffset -> e
    int myInBufferLength -> f
    byte[] myOutBuffer -> g
    int myOutBufferOffset -> h
    int myOutBufferLength -> i
    boolean myInflatingInProgress -> j
    void reset(org.amse.ys.zip.MyBufferedInputStream,org.amse.ys.zip.LocalFileHeader) -> b
    int available() -> b
    int read(byte[],int,int) -> a
    int read() -> a
    void fillOutBuffer() -> c
    boolean startInflating() -> startInflating
    void endInflating() -> endInflating
    long inflate(byte[],int,int,byte[]) -> inflate
org.amse.ys.zip.LocalFileHeader -> org.amse.ys.zip.b:
    int Signature -> a
    int Version -> b
    int Flags -> c
    int CompressionMethod -> d
    int ModificationTime -> e
    int ModificationDate -> f
    int CRC32 -> g
    int CompressedSize -> h
    int UncompressedSize -> i
    int NameLength -> j
    int ExtraLength -> k
    java.lang.String FileName -> l
    int DataOffset -> m
org.amse.ys.zip.MyBufferedInputStream -> org.amse.ys.zip.c:
    org.amse.ys.zip.ZipFile$InputStreamHolder myStreamHolder -> c
    java.io.InputStream myFileInputStream -> d
    byte[] myBuffer -> e
    int myBytesReady -> a
    int myPositionInBuffer -> b
    int myCurrentPosition -> f
    int available() -> available
    int offset() -> a
    int read(byte[],int,int) -> read
    int read() -> read
    int read2Bytes() -> b
    int read4Bytes() -> c
    java.lang.String readString(int) -> a
    void skip(int) -> b
    void backSkip(int) -> c
    void setPosition(int) -> d
    void close() -> close
org.amse.ys.zip.NoCompressionDecompressor -> org.amse.ys.zip.d:
    org.amse.ys.zip.LocalFileHeader myHeader -> a
    org.amse.ys.zip.MyBufferedInputStream myStream -> b
    int myCurrentPosition -> c
    int read(byte[],int,int) -> a
    int read() -> a
    int available() -> b
org.amse.ys.zip.ZipException -> org.amse.ys.zip.e:
org.amse.ys.zip.ZipFile -> org.amse.ys.zip.f:
    org.amse.ys.zip.ZipFile$InputStreamHolder myStreamHolder -> a
    java.util.LinkedHashMap myFileHeaders -> b
    boolean myAllFilesAreRead -> c
    java.util.Queue myStoredStreams -> d
    java.util.Collection headers() -> a
    boolean readFileHeader(org.amse.ys.zip.MyBufferedInputStream,java.lang.String) -> a
    void storeBaseStream(org.amse.ys.zip.MyBufferedInputStream) -> a
    org.amse.ys.zip.MyBufferedInputStream getBaseStream() -> b
    int getEntrySize(java.lang.String) -> a
    java.io.InputStream getInputStream(java.lang.String) -> b
    org.amse.ys.zip.LocalFileHeader getHeader(java.lang.String) -> c
org.amse.ys.zip.ZipFile$1 -> org.amse.ys.zip.g:
    org.amse.ys.zip.ZipFile this$0 -> a
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
org.amse.ys.zip.ZipFile$InputStreamHolder -> org.amse.ys.zip.h:
    java.io.InputStream getInputStream() -> a
org.amse.ys.zip.ZipInputStream -> org.amse.ys.zip.i:
    org.amse.ys.zip.ZipFile myParent -> a
    org.amse.ys.zip.MyBufferedInputStream myBaseStream -> b
    org.amse.ys.zip.Decompressor myDecompressor -> c
    boolean myIsClosed -> d
    int available() -> available
    int read(byte[],int,int) -> read
    int read() -> read
    void close() -> close
    void finalize() -> finalize
org.geometerplus.android.fbreader.BookInfoActivity -> org.geometerplus.android.fbreader.BookInfoActivity:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> b
    org.geometerplus.zlibrary.core.image.ZLImage myImage -> c
    boolean myHideOpenButton -> d
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    android.widget.Button findButton(int) -> a
    void setupButton(int,java.lang.String,android.view.View$OnClickListener) -> a
    void setupInfoPair(int,java.lang.String,java.lang.CharSequence) -> a
    void setupBookInfo(org.geometerplus.fbreader.library.Book) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile access$0(org.geometerplus.android.fbreader.BookInfoActivity) -> a
    void access$1(org.geometerplus.android.fbreader.BookInfoActivity,org.geometerplus.fbreader.library.Book) -> a
org.geometerplus.android.fbreader.BookInfoActivity$1 -> org.geometerplus.android.fbreader.a:
    org.geometerplus.android.fbreader.BookInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.BookInfoActivity$2 -> org.geometerplus.android.fbreader.b:
    org.geometerplus.android.fbreader.BookInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.BookInfoActivity$3 -> org.geometerplus.android.fbreader.c:
    org.geometerplus.android.fbreader.BookInfoActivity this$0 -> a
    org.geometerplus.fbreader.library.Book val$book -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.BookmarkEditActivity -> org.geometerplus.android.fbreader.BookmarkEditActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.BookmarksActivity -> org.geometerplus.android.fbreader.BookmarksActivity:
    java.util.List AllBooksBookmarks -> a
    java.util.List myThisBookBookmarks -> b
    java.util.List mySearchResults -> c
    android.widget.ListView myThisBookView -> d
    android.widget.ListView myAllBooksView -> e
    android.widget.ListView mySearchResultsView -> f
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> g
    org.geometerplus.zlibrary.core.options.ZLStringOption myBookmarkSearchPatternOption -> h
    android.widget.ListView createTab(java.lang.String,int) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onPause() -> onPause
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onSearchRequested() -> onSearchRequested
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    void invalidateAllViews() -> a
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void gotoBookmark(org.geometerplus.fbreader.library.Bookmark) -> a
    void access$0(org.geometerplus.android.fbreader.BookmarksActivity,org.geometerplus.fbreader.library.Bookmark) -> a
    void access$1(org.geometerplus.android.fbreader.BookmarksActivity) -> a
org.geometerplus.android.fbreader.BookmarksActivity$BookmarksAdapter -> org.geometerplus.android.fbreader.d:
    java.util.List myBookmarks -> b
    boolean myCurrentBook -> c
    org.geometerplus.android.fbreader.BookmarksActivity this$0 -> a
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    boolean areAllItemsEnabled() -> areAllItemsEnabled
    boolean isEnabled(int) -> isEnabled
    long getItemId(int) -> getItemId
    org.geometerplus.fbreader.library.Bookmark getItem(int) -> a
    int getCount() -> getCount
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    java.lang.Object getItem(int) -> getItem
org.geometerplus.android.fbreader.ButtonsPopupPanel -> org.geometerplus.android.fbreader.e:
    java.util.ArrayList myButtons -> d
    void addButton(java.lang.String,boolean,int) -> a
    void update() -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.ButtonsPopupPanel$ActionButton -> org.geometerplus.android.fbreader.f:
    java.lang.String ActionId -> a
    boolean IsCloseButton -> b
    org.geometerplus.android.fbreader.ButtonsPopupPanel this$0 -> c
org.geometerplus.android.fbreader.CancelActivity -> org.geometerplus.android.fbreader.CancelActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.CancelActivity$ActionListAdapter -> org.geometerplus.android.fbreader.g:
    android.content.Intent myIntent -> b
    org.geometerplus.android.fbreader.CancelActivity this$0 -> a
    int getCount() -> getCount
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    java.lang.Object getItem(int) -> getItem
org.geometerplus.android.fbreader.DictionaryUtil -> org.geometerplus.android.fbreader.h:
    java.util.LinkedHashMap ourDictionaryInfos -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption ourSingleWordTranslatorOption -> b
    org.geometerplus.zlibrary.core.options.ZLStringOption ourMultiWordTranslatorOption -> c
    java.util.Map infos() -> d
    java.util.List dictionaryInfos(android.content.Context) -> a
    org.geometerplus.android.fbreader.PackageInfo firstInfo() -> e
    org.geometerplus.zlibrary.core.options.ZLStringOption singleWordTranslatorOption() -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption multiWordTranslatorOption() -> b
    org.geometerplus.android.fbreader.PackageInfo getCurrentDictionaryInfo(boolean) -> a
    android.content.Intent getDictionaryIntent(java.lang.String,boolean) -> a
    android.content.Intent getDictionaryIntent(org.geometerplus.android.fbreader.PackageInfo,java.lang.String) -> a
    void openTextInDictionary(android.app.Activity,java.lang.String,boolean,int,int) -> a
    void openWordInDictionary(android.app.Activity,org.geometerplus.zlibrary.text.view.ZLTextWord,org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
    java.util.LinkedHashMap access$0() -> c
    void access$1(android.app.Activity,org.geometerplus.android.fbreader.PackageInfo) -> a
org.geometerplus.android.fbreader.DictionaryUtil$1 -> org.geometerplus.android.fbreader.i:
    android.app.Activity val$activity -> a
    org.geometerplus.android.fbreader.PackageInfo val$dictionaryInfo -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.DictionaryUtil$InfoReader -> org.geometerplus.android.fbreader.j:
    boolean dontCacheAttributeValues() -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.android.fbreader.FBAndroidAction -> org.geometerplus.android.fbreader.k:
    org.geometerplus.android.fbreader.FBReader BaseActivity -> a
org.geometerplus.android.fbreader.FBReader -> org.geometerplus.android.fbreader.FBReader:
    org.geometerplus.zlibrary.core.sqliteconfig.SQLiteDB db -> a
    org.geometerplus.zlibrary.core.sqliteconfig.SyncDB syncdb -> b
    org.geometerplus.zlibrary.core.sqliteconfig.ConnectMysql mysql -> c
    android.speech.tts.TextToSpeech tts -> d
    int myFullScreenFlag -> f
    java.util.List myPluginActions -> g
    android.content.BroadcastReceiver myPluginInfoReceiver -> h
    android.speech.tts.TextToSpeech$OnInitListener ttsInitListener -> i
    android.speech.tts.TextToSpeech$OnUtteranceCompletedListener ttsUtteranceCompletedListener -> j
    org.geometerplus.zlibrary.core.filesystem.ZLFile fileFromIntent(android.content.Intent) -> a
    void onCreate(android.os.Bundle) -> onCreate
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onOptionsMenuClosed(android.view.Menu) -> onOptionsMenuClosed
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onStart() -> onStart
    void onResume() -> onResume
    void onStop() -> onStop
    boolean onSearchRequested() -> onSearchRequested
    void showSelectionPanel() -> a
    void hideSelectionPanel() -> b
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void addMenuItem(android.view.Menu,java.lang.String,int) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onDestroy() -> onDestroy
    org.geometerplus.zlibrary.core.application.ZLApplication createApplication(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.util.List access$1(org.geometerplus.android.fbreader.FBReader) -> a
    android.speech.tts.TextToSpeech$OnUtteranceCompletedListener access$2(org.geometerplus.android.fbreader.FBReader) -> b
org.geometerplus.android.fbreader.FBReader$1 -> org.geometerplus.android.fbreader.l:
    org.geometerplus.android.fbreader.FBReader this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.geometerplus.android.fbreader.FBReader$2 -> org.geometerplus.android.fbreader.m:
    org.geometerplus.android.fbreader.FBReader this$0 -> a
    void onInit(int) -> onInit
org.geometerplus.android.fbreader.FBReader$3 -> org.geometerplus.android.fbreader.n:
    org.geometerplus.android.fbreader.FBReader this$0 -> a
    void onUtteranceCompleted(java.lang.String) -> onUtteranceCompleted
org.geometerplus.android.fbreader.FBReader$4 -> org.geometerplus.android.fbreader.o:
    org.geometerplus.android.fbreader.FBReader this$0 -> a
    java.lang.String val$pattern -> b
    void run() -> run
org.geometerplus.android.fbreader.FBReader$4$1 -> org.geometerplus.android.fbreader.p:
    org.geometerplus.android.fbreader.FBReader$4 this$1 -> a
    org.geometerplus.fbreader.fbreader.FBReaderApp val$fbReader -> b
    org.geometerplus.android.fbreader.TextSearchPopup val$popup -> c
    void run() -> run
org.geometerplus.android.fbreader.FBReader$4$2 -> org.geometerplus.android.fbreader.q:
    org.geometerplus.android.fbreader.FBReader$4 this$1 -> a
    org.geometerplus.android.fbreader.TextSearchPopup val$popup -> b
    void run() -> run
org.geometerplus.android.fbreader.FBReader$5 -> org.geometerplus.android.fbreader.r:
    org.geometerplus.android.fbreader.FBReader this$0 -> a
    org.geometerplus.zlibrary.core.application.ZLApplication$PopupPanel val$popup -> b
    org.geometerplus.fbreader.fbreader.FBReaderApp val$fbreader -> c
    android.app.SearchManager val$manager -> d
    void onCancel() -> onCancel
org.geometerplus.android.fbreader.Login -> org.geometerplus.android.fbreader.Login:
    java.lang.String[] log_Username -> a
    java.lang.String[] log_Password -> b
    java.lang.String UserName -> c
    java.lang.Boolean login_flag -> d
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.Login$1 -> org.geometerplus.android.fbreader.s:
    org.geometerplus.android.fbreader.Login this$0 -> a
    android.widget.EditText val$userNameEditText -> b
    android.widget.EditText val$passWordEditText -> c
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.MyService -> org.geometerplus.android.fbreader.MyService:
    org.geometerplus.zlibrary.core.sqliteconfig.SQLiteDB db -> a
    org.geometerplus.zlibrary.core.sqliteconfig.ConnectMysql mysql -> b
    java.lang.String[] DBannoImage -> c
    java.lang.String[] DBannoText -> d
    java.lang.String[] DBannoText_drawRange -> e
    java.lang.String[] DBtranslation -> f
    java.lang.String[] DBrecord -> g
    java.lang.String[] DBtranslation_num -> h
    java.lang.String[] DBtts_num -> i
    java.lang.String[] DBparentIn_time -> j
    java.lang.String[] DBSync -> k
    java.lang.String[][] DBLocal_Name -> l
    java.lang.String[] Database_Name -> m
    int[] Database_Number -> n
    void onHandleIntent(android.content.Intent) -> onHandleIntent
    boolean downloadData(java.lang.String) -> a
    boolean insertData() -> a
    boolean updateData() -> b
    boolean deleteData() -> c
    java.lang.String[] annoDB(int,int) -> a
org.geometerplus.android.fbreader.NavigationPopup -> org.geometerplus.android.fbreader.t:
    boolean myIsInProgress -> d
    java.lang.String getId() -> b
    void show_() -> c
    void update() -> a
    void createControlPanel(org.geometerplus.android.fbreader.FBReader,android.widget.RelativeLayout,org.geometerplus.android.fbreader.PopupWindow$Location) -> a
    void setupNavigation(org.geometerplus.android.fbreader.PopupWindow) -> a
    java.lang.String makeProgressText(int,int) -> b
    void access$0(org.geometerplus.android.fbreader.NavigationPopup,boolean) -> a
    java.lang.String access$1(int,int) -> a
    org.geometerplus.zlibrary.core.application.ZLApplication access$2(org.geometerplus.android.fbreader.NavigationPopup) -> a
org.geometerplus.android.fbreader.NavigationPopup$1 -> org.geometerplus.android.fbreader.u:
    org.geometerplus.android.fbreader.NavigationPopup this$0 -> a
    android.widget.TextView val$text -> b
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
org.geometerplus.android.fbreader.NavigationPopup$2 -> org.geometerplus.android.fbreader.v:
    org.geometerplus.android.fbreader.NavigationPopup this$0 -> a
    android.widget.Button val$btnCancel -> b
    android.widget.Button val$btnOk -> c
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.PackageInfo -> org.geometerplus.android.fbreader.w:
    java.lang.String Id -> a
    java.lang.String PackageName -> b
    java.lang.String ClassName -> c
    java.lang.String Title -> d
    java.lang.String IntentAction -> e
    java.lang.String IntentKey -> f
    java.lang.String IntentDataPattern -> g
org.geometerplus.android.fbreader.ParentsInvolvementAction -> org.geometerplus.android.fbreader.x:
    org.geometerplus.fbreader.fbreader.FBReaderApp Reader -> b
    void run() -> a
    void access$0(org.geometerplus.android.fbreader.ParentsInvolvementAction) -> a
org.geometerplus.android.fbreader.ParentsInvolvementAction$1 -> org.geometerplus.android.fbreader.y:
    org.geometerplus.android.fbreader.ParentsInvolvementAction this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.ParentsInvolvementAction$2 -> org.geometerplus.android.fbreader.z:
    org.geometerplus.android.fbreader.ParentsInvolvementAction this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.ParentsInvolvementAction$3 -> org.geometerplus.android.fbreader.aa:
    org.geometerplus.android.fbreader.ParentsInvolvementAction this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.ParentsInvolvementAction$4 -> org.geometerplus.android.fbreader.ab:
    org.geometerplus.android.fbreader.ParentsInvolvementAction this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.PopupPanel -> org.geometerplus.android.fbreader.ac:
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor StartPosition -> a
    org.geometerplus.android.fbreader.PopupWindow myWindow -> b
    org.geometerplus.fbreader.fbreader.FBReaderApp getReader() -> d
    void show_() -> c
    void hide_() -> e
    void removeAllWindows(org.geometerplus.zlibrary.core.application.ZLApplication) -> a
    void restoreVisibilities(org.geometerplus.zlibrary.core.application.ZLApplication) -> b
    void initPosition() -> f
    void storePosition() -> g
    void createControlPanel(org.geometerplus.android.fbreader.FBReader,android.widget.RelativeLayout,org.geometerplus.android.fbreader.PopupWindow$Location) -> a
org.geometerplus.android.fbreader.PopupWindow -> org.geometerplus.android.fbreader.ad:
    android.app.Activity myActivity -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void show() -> a
    void hide() -> b
    void addView(android.view.View) -> addView
org.geometerplus.android.fbreader.PopupWindow$1 -> org.geometerplus.android.fbreader.ae:
    org.geometerplus.android.fbreader.PopupWindow this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.PopupWindow$2 -> org.geometerplus.android.fbreader.af:
    org.geometerplus.android.fbreader.PopupWindow this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.PopupWindow$Location -> org.geometerplus.android.fbreader.ag:
    org.geometerplus.android.fbreader.PopupWindow$Location Bottom -> a
    org.geometerplus.android.fbreader.PopupWindow$Location Floating -> b
    org.geometerplus.android.fbreader.PopupWindow$Location[] ENUM$VALUES -> c
    org.geometerplus.android.fbreader.PopupWindow$Location[] values() -> values
    org.geometerplus.android.fbreader.PopupWindow$Location valueOf(java.lang.String) -> valueOf
org.geometerplus.android.fbreader.ProcessHyperlinkAction -> org.geometerplus.android.fbreader.ah:
    boolean isEnabled() -> b
    void run() -> a
org.geometerplus.android.fbreader.RecordTeacherVoice -> org.geometerplus.android.fbreader.ai:
    java.lang.String filename -> b
    int num -> c
    void run() -> a
    void doSomething() -> c
org.geometerplus.android.fbreader.RecordTeacherVoice$1 -> org.geometerplus.android.fbreader.aj:
    org.geometerplus.android.fbreader.RecordTeacherVoice this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.RecordTeacherVoice$2 -> org.geometerplus.android.fbreader.ak:
    org.geometerplus.android.fbreader.RecordTeacherVoice this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.RunActivityAction -> org.geometerplus.android.fbreader.al:
    java.lang.Class myActivityClass -> b
    void run() -> a
org.geometerplus.android.fbreader.RunPluginAction -> org.geometerplus.android.fbreader.am:
    android.net.Uri myUri -> b
    void run() -> a
org.geometerplus.android.fbreader.SQLiteBooksDatabase -> org.geometerplus.android.fbreader.an:
    java.lang.String myInstanceId -> a
    android.database.sqlite.SQLiteDatabase myDatabase -> b
    boolean myTagCacheIsInitialized -> c
    java.util.HashMap myIdByTag -> d
    java.util.HashMap myTagById -> e
    android.database.sqlite.SQLiteStatement myUpdateBookInfoStatement -> f
    android.database.sqlite.SQLiteStatement myInsertBookInfoStatement -> g
    android.database.sqlite.SQLiteStatement myDeleteBookAuthorsStatement -> h
    android.database.sqlite.SQLiteStatement myGetAuthorIdStatement -> i
    android.database.sqlite.SQLiteStatement myInsertAuthorStatement -> j
    android.database.sqlite.SQLiteStatement myInsertBookAuthorStatement -> k
    android.database.sqlite.SQLiteStatement myGetTagIdStatement -> l
    android.database.sqlite.SQLiteStatement myCreateTagIdStatement -> m
    android.database.sqlite.SQLiteStatement myDeleteBookTagsStatement -> n
    android.database.sqlite.SQLiteStatement myInsertBookTagStatement -> o
    android.database.sqlite.SQLiteStatement myGetSeriesIdStatement -> p
    android.database.sqlite.SQLiteStatement myInsertSeriesStatement -> q
    android.database.sqlite.SQLiteStatement myInsertBookSeriesStatement -> r
    android.database.sqlite.SQLiteStatement myDeleteBookSeriesStatement -> s
    android.database.sqlite.SQLiteStatement myRemoveFileInfoStatement -> t
    android.database.sqlite.SQLiteStatement myInsertFileInfoStatement -> u
    android.database.sqlite.SQLiteStatement myUpdateFileInfoStatement -> v
    android.database.sqlite.SQLiteStatement mySaveRecentBookStatement -> w
    android.database.sqlite.SQLiteStatement myAddToFavoritesStatement -> x
    android.database.sqlite.SQLiteStatement myRemoveFromFavoritesStatement -> y
    android.database.sqlite.SQLiteStatement myInsertBookmarkStatement -> z
    android.database.sqlite.SQLiteStatement myUpdateBookmarkStatement -> A
    android.database.sqlite.SQLiteStatement myDeleteBookmarkStatement -> B
    android.database.sqlite.SQLiteStatement myStorePositionStatement -> C
    android.database.sqlite.SQLiteStatement myInsertIntoBookListStatement -> D
    android.database.sqlite.SQLiteStatement myDeleteFromBookListStatement -> E
    android.database.sqlite.SQLiteStatement myCheckBookListStatement -> F
    android.database.sqlite.SQLiteStatement myDeleteVisitedHyperlinksStatement -> G
    android.database.sqlite.SQLiteStatement myStoreVisitedHyperlinksStatement -> H
    void executeAsATransaction(java.lang.Runnable) -> a
    org.geometerplus.fbreader.library.Book loadBook(long) -> a
    void reloadBook(org.geometerplus.fbreader.library.Book) -> a
    org.geometerplus.fbreader.library.Book loadBookByFile(long,org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    void initTagCache() -> f
    java.util.Map loadBooks(org.geometerplus.fbreader.library.FileInfoSet) -> a
    void updateBookInfo(long,long,java.lang.String,java.lang.String,java.lang.String) -> a
    long insertBookInfo(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String,java.lang.String,java.lang.String) -> a
    void deleteAllBookAuthors(long) -> b
    void saveBookAuthorInfo(long,long,org.geometerplus.fbreader.library.Author) -> a
    java.util.List loadAuthors(long) -> c
    long getTagId(org.geometerplus.fbreader.library.Tag) -> a
    void deleteAllBookTags(long) -> d
    void saveBookTagInfo(long,org.geometerplus.fbreader.library.Tag) -> a
    org.geometerplus.fbreader.library.Tag getTagById(long) -> q
    java.util.List loadTags(long) -> e
    void saveBookSeriesInfo(long,org.geometerplus.fbreader.library.SeriesInfo) -> a
    org.geometerplus.fbreader.library.SeriesInfo loadSeriesInfo(long) -> f
    void removeFileInfo(long) -> g
    void saveFileInfo(org.geometerplus.fbreader.library.FileInfo) -> a
    java.util.Collection loadFileInfos() -> a
    java.util.Collection loadFileInfos(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.util.Collection loadFileInfos(long) -> h
    void saveRecentBookIds(java.util.List) -> a
    java.util.List loadRecentBookIds() -> b
    void addToFavorites(long) -> i
    void removeFromFavorites(long) -> j
    java.util.List loadFavoritesIds() -> c
    java.util.List loadBookmarks$4d71d71e(long) -> k
    java.util.List loadAllVisibleBookmarks() -> d
    long saveBookmark(org.geometerplus.fbreader.library.Bookmark) -> a
    void deleteBookmark(org.geometerplus.fbreader.library.Bookmark) -> b
    org.geometerplus.zlibrary.text.view.ZLTextPosition getStoredPosition(long) -> l
    void storePosition(long,org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    boolean insertIntoBookList(long) -> m
    boolean deleteFromBookList(long) -> n
    boolean checkBookList(long) -> o
    void addVisitedHyperlink(long,java.lang.String) -> a
    java.util.Collection loadVisitedHyperlinks(long) -> p
    android.database.sqlite.SQLiteDatabase access$0(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> a
    void access$1(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> b
    void access$2(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> c
    void access$3(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> d
    void access$4(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> e
    void access$5(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> f
    void access$6(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> g
    void access$7(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> h
    void access$8(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> i
    void access$9(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> j
    void access$10(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> k
    void access$11(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> l
    void access$12(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> m
    void access$13(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> n
    void access$14(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> o
    void access$15(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> p
    void access$16(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> q
    android.database.sqlite.SQLiteStatement access$17(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> r
org.geometerplus.android.fbreader.SQLiteBooksDatabase$1 -> org.geometerplus.android.fbreader.ao:
    org.geometerplus.android.fbreader.SQLiteBooksDatabase this$0 -> a
    int val$version -> b
    void run() -> run
org.geometerplus.android.fbreader.SQLiteBooksDatabase$2 -> org.geometerplus.android.fbreader.ap:
    org.geometerplus.android.fbreader.SQLiteBooksDatabase this$0 -> a
    java.util.List val$ids -> b
    void run() -> run
org.geometerplus.android.fbreader.SYNCAction -> org.geometerplus.android.fbreader.aq:
    org.geometerplus.fbreader.fbreader.FBReaderApp Reader -> b
    void run() -> a
org.geometerplus.android.fbreader.SearchAction -> org.geometerplus.android.fbreader.ar:
    boolean isVisible() -> a_
    void run() -> a
org.geometerplus.android.fbreader.SelectionBookmarkAction -> org.geometerplus.android.fbreader.as:
    void run() -> a
org.geometerplus.android.fbreader.SelectionCopyAction -> org.geometerplus.android.fbreader.at:
    void run() -> a
org.geometerplus.android.fbreader.SelectionHidePanelAction -> org.geometerplus.android.fbreader.au:
    void run() -> a
org.geometerplus.android.fbreader.SelectionPopup -> org.geometerplus.android.fbreader.av:
    java.lang.String getId() -> b
    void createControlPanel(org.geometerplus.android.fbreader.FBReader,android.widget.RelativeLayout,org.geometerplus.android.fbreader.PopupWindow$Location) -> a
    void move(int,int) -> a
org.geometerplus.android.fbreader.SelectionShareAction -> org.geometerplus.android.fbreader.aw:
    void run() -> a
org.geometerplus.android.fbreader.SelectionShowPanelAction -> org.geometerplus.android.fbreader.ax:
    boolean isEnabled() -> b
    void run() -> a
org.geometerplus.android.fbreader.SelectionTranslateAction -> org.geometerplus.android.fbreader.ay:
    void run() -> a
org.geometerplus.android.fbreader.SelfDataAction -> org.geometerplus.android.fbreader.az:
    org.geometerplus.fbreader.fbreader.FBReaderApp Reader -> b
    org.geometerplus.android.fbreader.FBReader Base -> c
    void run() -> a
org.geometerplus.android.fbreader.ShareDataAction -> org.geometerplus.android.fbreader.ba:
    org.geometerplus.fbreader.fbreader.FBReaderApp Reader -> b
    void run() -> a
org.geometerplus.android.fbreader.ShowBookInfoAction -> org.geometerplus.android.fbreader.bb:
    boolean isVisible() -> a_
    void run() -> a
org.geometerplus.android.fbreader.ShowBookmarksAction -> org.geometerplus.android.fbreader.bc:
org.geometerplus.android.fbreader.ShowCancelMenuAction -> org.geometerplus.android.fbreader.bd:
    void run() -> a
    org.geometerplus.fbreader.fbreader.FBReaderApp access$1(org.geometerplus.android.fbreader.ShowCancelMenuAction) -> a
org.geometerplus.android.fbreader.ShowCancelMenuAction$1 -> org.geometerplus.android.fbreader.be:
    org.geometerplus.android.fbreader.ShowCancelMenuAction this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.ShowCancelMenuAction$2 -> org.geometerplus.android.fbreader.bf:
    org.geometerplus.android.fbreader.ShowCancelMenuAction this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.ShowLibraryAction -> org.geometerplus.android.fbreader.bg:
    void run() -> a
org.geometerplus.android.fbreader.ShowMenuAction -> org.geometerplus.android.fbreader.bh:
    void run() -> a
org.geometerplus.android.fbreader.ShowNavigationAction -> org.geometerplus.android.fbreader.bi:
    boolean isVisible() -> a_
    void run() -> a
org.geometerplus.android.fbreader.ShowNetworkLibraryAction -> org.geometerplus.android.fbreader.bj:
org.geometerplus.android.fbreader.ShowNoteTabDialogAction -> org.geometerplus.android.fbreader.bk:
    boolean isVisible() -> a_
    void run() -> a
org.geometerplus.android.fbreader.ShowPicNoteAction -> org.geometerplus.android.fbreader.bl:
    void run() -> a
org.geometerplus.android.fbreader.ShowPicNoteTabDialogAction -> org.geometerplus.android.fbreader.bm:
    boolean isVisible() -> a_
    void run() -> a
org.geometerplus.android.fbreader.ShowPreferencesAction -> org.geometerplus.android.fbreader.bn:
    void run() -> a
org.geometerplus.android.fbreader.ShowTOCAction -> org.geometerplus.android.fbreader.bo:
    boolean isVisible() -> a_
    void run() -> a
org.geometerplus.android.fbreader.SimpleContainer -> org.geometerplus.android.fbreader.bp:
    android.view.View myEditText -> a
    android.widget.Button myOkButton -> b
    android.widget.Button myCancelButton -> c
    void onLayout(boolean,int,int,int,int) -> onLayout
org.geometerplus.android.fbreader.TOCActivity -> org.geometerplus.android.fbreader.TOCActivity:
    org.geometerplus.android.fbreader.TOCActivity$TOCAdapter myAdapter -> a
    org.geometerplus.zlibrary.core.tree.ZLTree mySelectedItem -> b
    void onCreate(android.os.Bundle) -> onCreate
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    org.geometerplus.zlibrary.core.tree.ZLTree access$0(org.geometerplus.android.fbreader.TOCActivity) -> a
org.geometerplus.android.fbreader.TOCActivity$TOCAdapter -> org.geometerplus.android.fbreader.bq:
    org.geometerplus.android.fbreader.TOCActivity this$0 -> a
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void openBookText(org.geometerplus.fbreader.bookmodel.TOCTree) -> a
    boolean runTreeItem(org.geometerplus.zlibrary.core.tree.ZLTree) -> a
org.geometerplus.android.fbreader.TOCStudentActivity -> org.geometerplus.android.fbreader.TOCStudentActivity:
    java.util.ArrayList listUserId -> a
    java.util.ArrayList listSyncTime -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    java.util.ArrayList access$0(org.geometerplus.android.fbreader.TOCStudentActivity) -> a
    java.util.ArrayList access$1(org.geometerplus.android.fbreader.TOCStudentActivity) -> b
org.geometerplus.android.fbreader.TOCStudentActivity$DataAdapter -> org.geometerplus.android.fbreader.br:
    android.content.Context context -> b
    android.database.Cursor cursor -> c
    int index -> d
    int time -> e
    org.geometerplus.android.fbreader.TOCStudentActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.geometerplus.android.fbreader.TOCStudentActivity$Holder -> org.geometerplus.android.fbreader.bs:
    android.widget.TextView userId -> a
    android.widget.TextView userSyncTime -> b
org.geometerplus.android.fbreader.TextSearchPopup -> org.geometerplus.android.fbreader.bt:
    java.lang.String getId() -> b
    void hide_() -> e
    void createControlPanel(org.geometerplus.android.fbreader.FBReader,android.widget.RelativeLayout,org.geometerplus.android.fbreader.PopupWindow$Location) -> a
org.geometerplus.android.fbreader.ZLTreeAdapter -> org.geometerplus.android.fbreader.bu:
    android.widget.ListView myParent -> a
    org.geometerplus.zlibrary.core.tree.ZLTree myTree -> b
    org.geometerplus.zlibrary.core.tree.ZLTree[] myItems -> c
    java.util.HashSet myOpenItems -> d
    boolean isOpen(org.geometerplus.zlibrary.core.tree.ZLTree) -> b
    void selectItem(org.geometerplus.zlibrary.core.tree.ZLTree) -> c
    int getCount(org.geometerplus.zlibrary.core.tree.ZLTree) -> d
    int getCount() -> getCount
    int indexByPosition(int,org.geometerplus.zlibrary.core.tree.ZLTree) -> a
    org.geometerplus.zlibrary.core.tree.ZLTree getItem(int) -> a
    boolean areAllItemsEnabled() -> areAllItemsEnabled
    boolean isEnabled(int) -> isEnabled
    long getItemId(int) -> getItemId
    boolean runTreeItem(org.geometerplus.zlibrary.core.tree.ZLTree) -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    java.lang.Object getItem(int) -> getItem
org.geometerplus.android.fbreader.api.ApiInterface -> org.geometerplus.android.fbreader.api.a:
    org.geometerplus.android.fbreader.api.ApiObject request(int,org.geometerplus.android.fbreader.api.ApiObject[]) -> a
    java.util.List requestList(int,org.geometerplus.android.fbreader.api.ApiObject[]) -> b
    java.util.Map requestMap$cb8ccd7(int) -> a
org.geometerplus.android.fbreader.api.ApiInterface$Stub -> org.geometerplus.android.fbreader.api.b:
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
org.geometerplus.android.fbreader.api.ApiObject -> org.geometerplus.android.fbreader.api.ApiObject:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    org.geometerplus.android.fbreader.api.ApiObject envelope(int) -> a
    org.geometerplus.android.fbreader.api.ApiObject envelope(boolean) -> a
    org.geometerplus.android.fbreader.api.ApiObject envelope(java.lang.String) -> a
    java.util.List envelope(java.util.List) -> a
    int type() -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.ApiObject$1 -> org.geometerplus.android.fbreader.api.c:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.geometerplus.android.fbreader.api.ApiObject$Boolean -> org.geometerplus.android.fbreader.api.ApiObject$Boolean:
    boolean Value -> a
    int type() -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.ApiObject$Error -> org.geometerplus.android.fbreader.api.ApiObject$Error:
    java.lang.String Message -> a
    int type() -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.ApiObject$Integer -> org.geometerplus.android.fbreader.api.ApiObject$Integer:
    int Value -> a
    int type() -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.ApiObject$String -> org.geometerplus.android.fbreader.api.ApiObject$String:
    java.lang.String Value -> a
    int type() -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.ApiObject$Void -> org.geometerplus.android.fbreader.api.ApiObject$Void:
    org.geometerplus.android.fbreader.api.ApiObject$Void Instance -> a
    int type() -> a
org.geometerplus.android.fbreader.api.ApiServerImplementation -> org.geometerplus.android.fbreader.api.d:
    org.geometerplus.fbreader.fbreader.FBReaderApp myReader -> a
    org.geometerplus.android.fbreader.api.ApiObject$Error unsupportedMethodError(int) -> b
    org.geometerplus.android.fbreader.api.ApiObject$Error exceptionInMethodError(int,java.lang.Throwable) -> a
    org.geometerplus.android.fbreader.api.ApiObject request(int,org.geometerplus.android.fbreader.api.ApiObject[]) -> a
    java.util.List requestList(int,org.geometerplus.android.fbreader.api.ApiObject[]) -> b
    java.util.Map requestMap$cb8ccd7(int) -> a
    org.geometerplus.android.fbreader.api.TextPosition getTextPosition(org.geometerplus.zlibrary.text.view.ZLTextWordCursor) -> a
    org.geometerplus.zlibrary.text.view.ZLTextFixedPosition getZLTextPosition(org.geometerplus.android.fbreader.api.TextPosition) -> a
org.geometerplus.android.fbreader.api.ApiService -> org.geometerplus.android.fbreader.api.ApiService:
    android.os.IBinder onBind(android.content.Intent) -> onBind
org.geometerplus.android.fbreader.api.PluginApi -> org.geometerplus.android.fbreader.api.PluginApi:
org.geometerplus.android.fbreader.api.PluginApi$ActionInfo -> org.geometerplus.android.fbreader.api.PluginApi$ActionInfo:
    java.lang.String myId -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.net.Uri getId() -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.PluginApi$ActionInfo$1 -> org.geometerplus.android.fbreader.api.e:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.geometerplus.android.fbreader.api.PluginApi$MenuActionInfo -> org.geometerplus.android.fbreader.api.PluginApi$MenuActionInfo:
    java.lang.String MenuItemName -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.PluginApi$PluginInfo -> org.geometerplus.android.fbreader.api.PluginApi$PluginInfo:
org.geometerplus.android.fbreader.api.TextPosition -> org.geometerplus.android.fbreader.api.TextPosition:
    int ParagraphIndex -> a
    int ElementIndex -> b
    int CharIndex -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int type() -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.TextPosition$1 -> org.geometerplus.android.fbreader.api.f:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.geometerplus.android.fbreader.image.ImageViewActivity -> org.geometerplus.android.fbreader.image.ImageViewActivity:
    android.graphics.Bitmap myBitmap -> a
    org.geometerplus.zlibrary.core.util.ZLColor myBgColor -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    org.geometerplus.zlibrary.core.util.ZLColor access$0(org.geometerplus.android.fbreader.image.ImageViewActivity) -> a
    android.graphics.Bitmap access$1(org.geometerplus.android.fbreader.image.ImageViewActivity) -> b
org.geometerplus.android.fbreader.image.ImageViewActivity$ImageView -> org.geometerplus.android.fbreader.image.a:
    android.graphics.Paint myPaint -> b
    int myDx -> c
    int myDy -> d
    boolean myMotionControl -> e
    int mySavedX -> f
    int mySavedY -> g
    org.geometerplus.android.fbreader.image.ImageViewActivity this$0 -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
org.geometerplus.android.fbreader.library.BaseActivity -> org.geometerplus.android.fbreader.library.a:
    org.geometerplus.fbreader.library.BooksDatabase DatabaseInstance -> a
    org.geometerplus.fbreader.library.Library LibraryInstance -> b
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> c
    java.lang.String mySelectedBookPath -> d
    int myCoverWidth -> e
    int myCoverHeight -> f
    java.lang.Runnable myInvalidateViewsRunnable -> g
    void onCreate(android.os.Bundle) -> onCreate
    void createBookContextMenu(android.view.ContextMenu,org.geometerplus.fbreader.library.Book) -> a
    android.view.View createView(android.view.View,android.view.ViewGroup,java.lang.String,java.lang.String) -> a
    android.widget.ImageView getCoverView(android.view.View) -> a
    android.graphics.Bitmap getCoverBitmap(org.geometerplus.zlibrary.core.image.ZLImage) -> a
    void deleteBook(org.geometerplus.fbreader.library.Book,int) -> a
    void showBookInfo(org.geometerplus.fbreader.library.Book) -> a
    boolean onContextItemSelected(int,org.geometerplus.fbreader.library.Book) -> a
org.geometerplus.android.fbreader.library.BaseActivity$1 -> org.geometerplus.android.fbreader.library.b:
    org.geometerplus.android.fbreader.library.BaseActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.library.BaseActivity$BookDeleter -> org.geometerplus.android.fbreader.library.c:
    org.geometerplus.fbreader.library.Book myBook -> b
    int myMode -> c
    org.geometerplus.android.fbreader.library.BaseActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.library.FileManager -> org.geometerplus.android.fbreader.library.FileManager:
    java.lang.String FILE_MANAGER_PATH -> e
    java.lang.String myPath -> f
    void onCreate(android.os.Bundle) -> onCreate
    void startUpdate() -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void deleteBook(org.geometerplus.fbreader.library.Book,int) -> a
    void addItem(java.lang.String,java.lang.String) -> a
    boolean access$0(org.geometerplus.android.fbreader.library.FileManager,org.geometerplus.android.fbreader.library.FileManager$FileItem) -> a
    void access$1(org.geometerplus.android.fbreader.library.FileManager,org.geometerplus.android.fbreader.library.FileManager$FileItem) -> b
org.geometerplus.android.fbreader.library.FileManager$1 -> org.geometerplus.android.fbreader.library.d:
    org.geometerplus.android.fbreader.library.FileManager this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.geometerplus.android.fbreader.library.FileManager$FileComparator -> org.geometerplus.android.fbreader.library.e:
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.android.fbreader.library.FileManager$FileItem -> org.geometerplus.android.fbreader.library.f:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> b
    java.lang.String myName -> c
    java.lang.String mySummary -> d
    boolean myIsSelectable -> e
    org.geometerplus.zlibrary.core.image.ZLImage myCover -> f
    boolean myCoverIsInitialized -> g
    org.geometerplus.android.fbreader.library.FileManager this$0 -> a
    java.lang.String getName() -> a
    java.lang.String getSummary() -> b
    boolean isSelectable() -> c
    int getIcon() -> d
    org.geometerplus.zlibrary.core.image.ZLImage getCover() -> e
    org.geometerplus.zlibrary.core.filesystem.ZLFile getFile() -> f
    org.geometerplus.fbreader.library.Book getBook() -> g
org.geometerplus.android.fbreader.library.FileManager$FileListAdapter -> org.geometerplus.android.fbreader.library.g:
    java.util.List myItems -> b
    org.geometerplus.android.fbreader.library.FileManager this$0 -> a
    void clear() -> a
    void add(org.geometerplus.android.fbreader.library.FileManager$FileItem) -> a
    void deleteFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    int getCount() -> getCount
    org.geometerplus.android.fbreader.library.FileManager$FileItem getItem(int) -> a
    long getItemId(int) -> getItemId
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
org.geometerplus.android.fbreader.library.FileManager$SmartFilter -> org.geometerplus.android.fbreader.library.h:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> b
    org.geometerplus.android.fbreader.library.FileManager this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.library.FileManager$SmartFilter$1 -> org.geometerplus.android.fbreader.library.i:
    org.geometerplus.android.fbreader.library.FileManager$SmartFilter this$1 -> a
    void run() -> run
org.geometerplus.android.fbreader.library.FileManager$SmartFilter$2 -> org.geometerplus.android.fbreader.library.j:
    org.geometerplus.android.fbreader.library.FileManager$SmartFilter this$1 -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile val$file -> b
    void run() -> run
org.geometerplus.android.fbreader.library.InitializationService -> org.geometerplus.android.fbreader.library.InitializationService:
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onStart(android.content.Intent,int) -> onStart
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
org.geometerplus.android.fbreader.library.InitializationService$1 -> org.geometerplus.android.fbreader.library.k:
    org.geometerplus.android.fbreader.library.InitializationService this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.library.InitializationService$2 -> org.geometerplus.android.fbreader.library.l:
    org.geometerplus.android.fbreader.library.InitializationService this$0 -> a
    android.os.Handler val$handler -> b
    void run() -> run
org.geometerplus.android.fbreader.library.KillerCallback -> org.geometerplus.android.fbreader.library.KillerCallback:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.geometerplus.android.fbreader.library.LibraryBaseActivity -> org.geometerplus.android.fbreader.library.m:
    org.geometerplus.zlibrary.core.options.ZLStringOption BookSearchPatternOption -> e
    org.geometerplus.fbreader.library.Book mySelectedBook -> f
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    boolean onSearchRequested() -> onSearchRequested
    boolean runSearch(android.content.Intent) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void deleteBook(org.geometerplus.fbreader.library.Book,int) -> a
    boolean isTreeSelected(org.geometerplus.fbreader.tree.FBTree) -> a
org.geometerplus.android.fbreader.library.LibraryBaseActivity$LibraryAdapter -> org.geometerplus.android.fbreader.library.n:
    java.util.List myItems -> b
    org.geometerplus.android.fbreader.library.LibraryBaseActivity this$0 -> a
    int getCount() -> getCount
    int getFirstSelectedItemIndex() -> a
    org.geometerplus.fbreader.tree.FBTree getItem(int) -> a
    long getItemId(int) -> getItemId
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
org.geometerplus.android.fbreader.library.LibraryBaseActivity$OpenTreeRunnable -> org.geometerplus.android.fbreader.library.o:
    org.geometerplus.fbreader.library.Library myLibrary -> b
    java.lang.Runnable myPostRunnable -> c
    org.geometerplus.android.fbreader.library.LibraryBaseActivity this$0 -> a
    void run() -> run
    org.geometerplus.fbreader.library.Library access$0(org.geometerplus.android.fbreader.library.LibraryBaseActivity$OpenTreeRunnable) -> a
org.geometerplus.android.fbreader.library.LibraryBaseActivity$OpenTreeRunnable$1 -> org.geometerplus.android.fbreader.library.p:
    org.geometerplus.android.fbreader.library.LibraryBaseActivity$OpenTreeRunnable this$1 -> a
    void run() -> run
org.geometerplus.android.fbreader.library.LibraryBaseActivity$StartTreeActivityRunnable -> org.geometerplus.android.fbreader.library.q:
    java.lang.String myTreePath -> b
    java.lang.String myParameter -> c
    org.geometerplus.android.fbreader.library.LibraryBaseActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.library.LibraryTopLevelActivity -> org.geometerplus.android.fbreader.library.LibraryTopLevelActivity:
    java.util.LinkedList myItems -> g
    org.geometerplus.android.fbreader.library.TopLevelTree mySearchResultsItem -> h
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    void setSearchResults(android.content.Intent) -> b
    void onNewIntent(android.content.Intent) -> onNewIntent
org.geometerplus.android.fbreader.library.LibraryTopLevelActivity$1 -> org.geometerplus.android.fbreader.library.r:
    org.geometerplus.android.fbreader.library.LibraryTopLevelActivity this$0 -> b
    void run() -> run
org.geometerplus.android.fbreader.library.LibraryTopLevelActivity$2 -> org.geometerplus.android.fbreader.library.s:
    org.geometerplus.android.fbreader.library.LibraryTopLevelActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.library.LibraryTreeActivity -> org.geometerplus.android.fbreader.library.LibraryTreeActivity:
    java.lang.String myTreePathString -> g
    void onCreate(android.os.Bundle) -> onCreate
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
org.geometerplus.android.fbreader.library.TopLevelTree -> org.geometerplus.android.fbreader.library.t:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    java.lang.String myParameter -> b
    int myCoverResourceId -> c
    java.lang.Runnable myAction -> f
    java.lang.String getName() -> a
    java.lang.String getSummary() -> b
    int getCoverResourceId() -> c
    void run() -> b_
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity -> org.geometerplus.android.fbreader.network.AddCustomCatalogActivity:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    org.geometerplus.fbreader.network.ICustomNetworkLink myLink -> b
    void onCreate(android.os.Bundle) -> onCreate
    boolean isEmptyString(java.lang.String) -> a
    void setExtraFieldsVisibility(boolean) -> a
    void setTextById(int,java.lang.String) -> a
    java.lang.String getTextById(int) -> a
    void setupButton(int,java.lang.String,android.view.View$OnClickListener) -> a
    void setTextFromResource(int,java.lang.String) -> b
    void setErrorText(java.lang.String) -> b
    void setErrorByKey(java.lang.String) -> c
    void loadInfoByUri(android.net.Uri) -> a
    void access$0(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity) -> a
    void access$1$53eca9db(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity) -> b
    org.geometerplus.fbreader.network.ICustomNetworkLink access$2(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity) -> c
    void access$3(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity,int,java.lang.String) -> a
    void access$4(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity,java.lang.String) -> a
    void access$5$14d781ef(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity) -> d
    void access$6(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity,java.lang.String) -> b
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$1 -> org.geometerplus.android.fbreader.network.a:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$2 -> org.geometerplus.android.fbreader.network.b:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$3 -> org.geometerplus.android.fbreader.network.c:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    int val$visibility -> b
    void run() -> run
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$4 -> org.geometerplus.android.fbreader.network.d:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    java.lang.String val$errorText -> b
    void run() -> run
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$5 -> org.geometerplus.android.fbreader.network.e:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$6 -> org.geometerplus.android.fbreader.network.f:
    java.lang.String myError -> b
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    void run() -> run
    java.lang.String access$0(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$6) -> a
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$6$1 -> org.geometerplus.android.fbreader.network.g:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$6 this$1 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.AddCustomCatalogItemActions -> org.geometerplus.android.fbreader.network.h:
    boolean canHandleTree(org.geometerplus.fbreader.network.NetworkTree) -> a
    void buildContextMenu(android.app.Activity,android.view.ContextMenu,org.geometerplus.fbreader.network.NetworkTree) -> a
    int getDefaultActionCode(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree) -> a
    java.lang.String getConfirmText$513542e4(int) -> a
    boolean createOptionsMenu(android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean prepareOptionsMenu(org.geometerplus.android.fbreader.network.NetworkBaseActivity,android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean runAction(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree,int) -> a
    void addCustomCatalog(android.app.Activity) -> a
org.geometerplus.android.fbreader.network.AuthenticationActivity -> org.geometerplus.android.fbreader.network.AuthenticationActivity:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    void onCreate(android.os.Bundle) -> onCreate
    android.widget.TextView findTextView(int) -> a
    android.widget.Button findButton(int) -> b
    android.widget.TextView access$0$269e4d39(org.geometerplus.android.fbreader.network.AuthenticationActivity) -> a
org.geometerplus.android.fbreader.network.AuthenticationActivity$1 -> org.geometerplus.android.fbreader.network.i:
    org.geometerplus.android.fbreader.network.AuthenticationActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.AuthenticationActivity$2 -> org.geometerplus.android.fbreader.network.j:
    org.geometerplus.android.fbreader.network.AuthenticationActivity this$0 -> a
    android.widget.TextView val$usernameView -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.AuthenticationActivity$3 -> org.geometerplus.android.fbreader.network.k:
    org.geometerplus.android.fbreader.network.AuthenticationActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.BookDownloader -> org.geometerplus.android.fbreader.network.BookDownloader:
    boolean acceptsUri(android.net.Uri) -> a
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.network.BookDownloaderCallback -> org.geometerplus.android.fbreader.network.BookDownloaderCallback:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.geometerplus.android.fbreader.network.BookDownloaderInterface -> org.geometerplus.android.fbreader.network.l:
    boolean isBeingDownloaded(java.lang.String) -> a
org.geometerplus.android.fbreader.network.BookDownloaderInterface$Stub -> org.geometerplus.android.fbreader.network.m:
    org.geometerplus.android.fbreader.network.BookDownloaderInterface asInterface(android.os.IBinder) -> a
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
org.geometerplus.android.fbreader.network.BookDownloaderInterface$Stub$Proxy -> org.geometerplus.android.fbreader.network.n:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    boolean isBeingDownloaded(java.lang.String) -> a
org.geometerplus.android.fbreader.network.BookDownloaderService -> org.geometerplus.android.fbreader.network.BookDownloaderService:
    java.util.Set myDownloadingURLs -> a
    java.util.Set myOngoingNotifications -> b
    int myServiceCounter -> c
    void doStop() -> a
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onDestroy() -> onDestroy
    void onStart(android.content.Intent,int) -> onStart
    void showMessage(java.lang.String) -> a
    void showMessage(java.lang.String,java.lang.String) -> a
    android.content.Intent getFBReaderIntent(java.io.File) -> a
    void sendDownloaderCallback() -> b
    java.util.Set access$0(org.geometerplus.android.fbreader.network.BookDownloaderService) -> a
    java.util.Set access$1(org.geometerplus.android.fbreader.network.BookDownloaderService) -> b
    android.app.Notification access$2(org.geometerplus.android.fbreader.network.BookDownloaderService,java.io.File,java.lang.String,boolean) -> a
    void access$3(org.geometerplus.android.fbreader.network.BookDownloaderService) -> c
    void access$4(org.geometerplus.android.fbreader.network.BookDownloaderService) -> d
org.geometerplus.android.fbreader.network.BookDownloaderService$1 -> org.geometerplus.android.fbreader.network.o:
    org.geometerplus.android.fbreader.network.BookDownloaderService this$0 -> a
    boolean isBeingDownloaded(java.lang.String) -> a
org.geometerplus.android.fbreader.network.BookDownloaderService$2 -> org.geometerplus.android.fbreader.network.p:
    org.geometerplus.android.fbreader.network.BookDownloaderService this$0 -> a
    android.app.Notification val$progressNotification -> b
    int val$notificationId -> c
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.BookDownloaderService$3 -> org.geometerplus.android.fbreader.network.q:
    org.geometerplus.android.fbreader.network.BookDownloaderService this$0 -> a
    java.lang.String val$urlString -> b
    int val$notificationId -> c
    java.io.File val$file -> d
    java.lang.String val$title -> e
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.BookDownloaderService$4 -> org.geometerplus.android.fbreader.network.r:
    org.geometerplus.android.fbreader.network.BookDownloaderService this$0 -> a
    android.os.Handler val$progressHandler -> f
    java.io.File val$file -> g
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.android.fbreader.network.BookDownloaderService$5 -> org.geometerplus.android.fbreader.network.s:
    org.geometerplus.android.fbreader.network.BookDownloaderService this$0 -> a
    android.os.Handler val$downloadFinishHandler -> b
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest val$request -> c
    java.io.File val$file -> d
    void run() -> run
org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection -> org.geometerplus.android.fbreader.network.t:
    org.geometerplus.android.fbreader.network.BookDownloaderInterface myInterface -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
    boolean isBeingDownloaded(java.lang.String) -> a
org.geometerplus.android.fbreader.network.ItemsLoader -> org.geometerplus.android.fbreader.network.u:
    android.app.Activity myActivity -> a
    java.util.LinkedList myItems -> b
    java.util.HashMap myUncommitedItems -> c
    java.lang.Object myItemsMonitor -> d
    boolean myFinishProcessed -> e
    java.lang.Object myFinishMonitor -> f
    long myUpdateInterval -> g
    boolean myInterruptRequested -> h
    boolean myInterruptConfirmed -> i
    java.lang.Object myInterruptLock -> j
    boolean myFinished -> k
    java.lang.Runnable myFinishRunnable -> l
    java.lang.Object myFinishedLock -> m
    void interruptLoading() -> a
    boolean confirmInterruptLoading() -> e
    boolean tryResumeLoading() -> b
    boolean isLoadingInterrupted() -> f
    void run() -> run
    void runFinishHandler() -> c
    void runOnFinish(java.lang.Runnable) -> a
    void updateItemsOnUiThread() -> g
    void finishOnUiThread(java.lang.String,boolean) -> a
    void onFinish(java.lang.String,boolean,java.util.Set) -> a
    void updateItems(java.util.List) -> a
    void doBefore() -> d
    void doLoading(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
    void access$0(org.geometerplus.android.fbreader.network.ItemsLoader,org.geometerplus.fbreader.network.INetworkLink,org.geometerplus.fbreader.network.NetworkItem) -> a
    void access$1(org.geometerplus.android.fbreader.network.ItemsLoader) -> a
    long access$2(org.geometerplus.android.fbreader.network.ItemsLoader) -> b
    boolean access$3(org.geometerplus.android.fbreader.network.ItemsLoader) -> c
    void access$4(org.geometerplus.android.fbreader.network.ItemsLoader,org.geometerplus.fbreader.network.INetworkLink) -> a
    java.lang.Object access$5(org.geometerplus.android.fbreader.network.ItemsLoader) -> d
    java.util.LinkedList access$6(org.geometerplus.android.fbreader.network.ItemsLoader) -> e
    java.util.HashMap access$7(org.geometerplus.android.fbreader.network.ItemsLoader) -> f
    java.lang.Object access$8(org.geometerplus.android.fbreader.network.ItemsLoader) -> g
    void access$9$71c55904(org.geometerplus.android.fbreader.network.ItemsLoader) -> h
org.geometerplus.android.fbreader.network.ItemsLoader$1 -> org.geometerplus.android.fbreader.network.v:
    long myUpdateTime -> b
    int myItemsNumber -> c
    org.geometerplus.android.fbreader.network.ItemsLoader this$0 -> a
    void onNewItem(org.geometerplus.fbreader.network.INetworkLink,org.geometerplus.fbreader.network.NetworkItem) -> a
    boolean confirmInterrupt() -> a
    void commitItems(org.geometerplus.fbreader.network.INetworkLink) -> a
org.geometerplus.android.fbreader.network.ItemsLoader$2 -> org.geometerplus.android.fbreader.network.w:
    org.geometerplus.android.fbreader.network.ItemsLoader this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.ItemsLoader$3 -> org.geometerplus.android.fbreader.network.x:
    org.geometerplus.android.fbreader.network.ItemsLoader this$0 -> a
    java.lang.String val$errorMessage -> b
    boolean val$interrupted -> c
    void run() -> run
org.geometerplus.android.fbreader.network.ItemsLoadingService -> org.geometerplus.android.fbreader.network.ItemsLoadingService:
    int myServiceCounter -> a
    void start(android.content.Context,org.geometerplus.fbreader.network.NetworkTree,org.geometerplus.android.fbreader.network.ItemsLoader) -> a
    org.geometerplus.android.fbreader.network.ItemsLoader getRunnable(org.geometerplus.fbreader.network.NetworkTree) -> a
    void doStop() -> a
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onStart(android.content.Intent,int) -> onStart
    void access$0(org.geometerplus.android.fbreader.network.ItemsLoadingService) -> a
    void access$1(org.geometerplus.fbreader.network.NetworkTree) -> b
org.geometerplus.android.fbreader.network.ItemsLoadingService$1 -> org.geometerplus.android.fbreader.network.y:
    org.geometerplus.android.fbreader.network.ItemsLoadingService this$0 -> a
    org.geometerplus.fbreader.network.NetworkTree val$tree -> b
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.ItemsLoadingService$2 -> org.geometerplus.android.fbreader.network.z:
    org.geometerplus.android.fbreader.network.ItemsLoadingService this$0 -> a
    android.os.Handler val$finishHandler -> b
    org.geometerplus.android.fbreader.network.ItemsLoader val$runnable -> c
    void run() -> run
org.geometerplus.android.fbreader.network.LibraryInitializationService -> org.geometerplus.android.fbreader.network.LibraryInitializationService:
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onStart(android.content.Intent,int) -> onStart
org.geometerplus.android.fbreader.network.LibraryInitializationService$1 -> org.geometerplus.android.fbreader.network.aa:
    org.geometerplus.android.fbreader.network.LibraryInitializationService this$0 -> a
    org.geometerplus.android.fbreader.network.NetworkView val$view -> b
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.LibraryInitializationService$2 -> org.geometerplus.android.fbreader.network.ab:
    org.geometerplus.android.fbreader.network.LibraryInitializationService this$0 -> a
    android.os.Handler val$handler -> b
    org.geometerplus.android.fbreader.network.NetworkView val$view -> c
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBaseActivity -> org.geometerplus.android.fbreader.network.ac:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection Connection -> b
    java.lang.Runnable myInvalidateViewsRunnable -> c
    int myCoverWidth -> d
    int myCoverHeight -> e
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onResume() -> onResume
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onModelChanged() -> a
    android.view.View setupNetworkTreeItemView(android.view.View,android.view.ViewGroup,org.geometerplus.fbreader.network.NetworkTree) -> a
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    boolean onSearchRequested() -> onSearchRequested
org.geometerplus.android.fbreader.network.NetworkBaseActivity$1 -> org.geometerplus.android.fbreader.network.ad:
    org.geometerplus.android.fbreader.network.NetworkBaseActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBaseActivity$2 -> org.geometerplus.android.fbreader.network.ae:
    org.geometerplus.android.fbreader.network.NetworkBaseActivity this$0 -> a
    org.geometerplus.android.fbreader.network.NetworkTreeActions val$actions -> b
    org.geometerplus.fbreader.network.NetworkTree val$networkTree -> c
    int val$actionCode -> d
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.NetworkBookActions -> org.geometerplus.android.fbreader.network.af:
    boolean useFullReferences(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    boolean useDemoReferences(org.geometerplus.fbreader.network.NetworkBookItem) -> b
    boolean useBuyReferences(org.geometerplus.fbreader.network.NetworkBookItem) -> c
    boolean canHandleTree(org.geometerplus.fbreader.network.NetworkTree) -> a
    void buildContextMenu(android.app.Activity,android.view.ContextMenu,org.geometerplus.fbreader.network.NetworkTree) -> a
    int getBookStatus(org.geometerplus.fbreader.network.NetworkBookItem,org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection) -> a
    java.util.Set getContextMenuActions(org.geometerplus.fbreader.network.NetworkBookItem,org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection) -> b
    int getDefaultActionCode(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree) -> a
    java.lang.String getConfirmText$513542e4(int) -> a
    boolean createOptionsMenu(android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean prepareOptionsMenu(org.geometerplus.android.fbreader.network.NetworkBaseActivity,android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean runAction(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree,int) -> a
    boolean runActionStatic(android.app.Activity,org.geometerplus.fbreader.network.NetworkBookItem,int) -> a
    void doDownloadBook(android.app.Activity,org.geometerplus.fbreader.network.NetworkBookItem,boolean) -> a
    void doReadBook(android.app.Activity,org.geometerplus.fbreader.network.NetworkBookItem,boolean) -> b
    void tryToDeleteBook(android.app.Activity,org.geometerplus.fbreader.network.NetworkBookItem,boolean) -> c
    void access$0$6c3d9e5(android.app.Activity,org.geometerplus.fbreader.network.NetworkBookItem) -> a
org.geometerplus.android.fbreader.network.NetworkBookActions$1 -> org.geometerplus.android.fbreader.network.ag:
    org.geometerplus.fbreader.network.tree.NetworkBookTree val$tree -> a
    android.app.Activity val$activity -> b
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBookActions$1$1 -> org.geometerplus.android.fbreader.network.ah:
    org.geometerplus.android.fbreader.network.NetworkBookActions$1 this$1 -> a
    android.app.Activity val$activity -> b
    org.geometerplus.fbreader.network.tree.NetworkBookTree val$tree -> c
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBookActions$2 -> org.geometerplus.android.fbreader.network.ai:
    boolean val$demo -> a
    org.geometerplus.fbreader.network.NetworkBookItem val$book -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.NetworkBookActions$3 -> org.geometerplus.android.fbreader.network.aj:
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager val$mgr -> a
    org.geometerplus.fbreader.network.NetworkBookItem val$book -> b
    android.app.Activity val$activity -> c
    org.geometerplus.zlibrary.core.resources.ZLResource val$dialogResource -> d
    org.geometerplus.zlibrary.core.resources.ZLResource val$buttonResource -> e
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.NetworkBookActions$3$1 -> org.geometerplus.android.fbreader.network.ak:
    org.geometerplus.android.fbreader.network.NetworkBookActions$3 this$1 -> a
    org.geometerplus.zlibrary.core.resources.ZLResource val$dialogResource -> b
    android.app.Activity val$activity -> c
    org.geometerplus.zlibrary.core.resources.ZLResource val$buttonResource -> d
    boolean val$downloadBook -> e
    org.geometerplus.fbreader.network.NetworkBookItem val$book -> f
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager val$mgr -> g
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.NetworkBookActions$3$1$1 -> org.geometerplus.android.fbreader.network.al:
    org.geometerplus.android.fbreader.network.NetworkBookActions$3$1 this$2 -> a
    android.app.Activity val$activity -> b
    org.geometerplus.fbreader.network.NetworkBookItem val$book -> c
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.NetworkBookActions$3$2 -> org.geometerplus.android.fbreader.network.am:
    org.geometerplus.android.fbreader.network.NetworkBookActions$3 this$1 -> a
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager val$mgr -> b
    org.geometerplus.fbreader.network.NetworkBookItem val$book -> c
    android.os.Handler val$handler -> d
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBookActions$4 -> org.geometerplus.android.fbreader.network.an:
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager val$mgr -> a
    org.geometerplus.fbreader.network.NetworkBookItem val$book -> b
    org.geometerplus.zlibrary.core.resources.ZLResource val$dialogResource -> c
    android.app.Activity val$activity -> d
    org.geometerplus.zlibrary.core.resources.ZLResource val$buttonResource -> e
    android.content.DialogInterface$OnClickListener val$listener -> f
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBookActions$5 -> org.geometerplus.android.fbreader.network.ao:
    android.app.Activity val$activity -> a
    java.lang.Runnable val$buyRunnable -> b
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBookActions$Action -> org.geometerplus.android.fbreader.network.ap:
    int Id -> a
    java.lang.String Key -> b
    java.lang.String Arg -> c
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity -> org.geometerplus.android.fbreader.network.NetworkBookInfoActivity:
    org.geometerplus.fbreader.network.NetworkBookItem myBook -> a
    android.view.View myMainView -> b
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> c
    org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection myConnection -> d
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    android.view.View getMainView() -> b
    void setTextFromResource(int,java.lang.String) -> a
    void onDestroy() -> onDestroy
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void setupExtraLinks() -> c
    void setPairLabelTextFromResource(int,java.lang.String) -> b
    void setPairValueText(int,java.lang.CharSequence) -> a
    void setupInfo() -> d
    void setupButtons() -> e
    void onStart() -> onStart
    void onStop() -> onStop
    void onModelChanged() -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    org.geometerplus.fbreader.network.NetworkBookItem access$0(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> a
    void access$1(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> b
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity$1 -> org.geometerplus.android.fbreader.network.aq:
    org.geometerplus.android.fbreader.network.NetworkBookInfoActivity this$0 -> a
    org.geometerplus.fbreader.network.urlInfo.RelatedUrlInfo val$relatedInfo -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity$2 -> org.geometerplus.android.fbreader.network.ar:
    org.geometerplus.android.fbreader.network.NetworkBookInfoActivity this$0 -> a
    org.geometerplus.zlibrary.core.image.ZLLoadableImage val$img -> b
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageManager val$mgr -> c
    int val$maxWidth -> d
    int val$maxHeight -> e
    android.widget.ImageView val$coverView -> f
    android.view.View val$rootView -> g
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity$3 -> org.geometerplus.android.fbreader.network.as:
    org.geometerplus.android.fbreader.network.NetworkBookInfoActivity this$0 -> a
    org.geometerplus.android.fbreader.network.NetworkBookActions$Action val$a -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity$4 -> org.geometerplus.android.fbreader.network.at:
    org.geometerplus.android.fbreader.network.NetworkBookInfoActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkCatalogActions -> org.geometerplus.android.fbreader.network.au:
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3 -> b
    boolean canHandleTree(org.geometerplus.fbreader.network.NetworkTree) -> a
    java.lang.String getTreeTitle(org.geometerplus.fbreader.network.NetworkTree) -> b
    void buildContextMenu(android.app.Activity,android.view.ContextMenu,org.geometerplus.fbreader.network.NetworkTree) -> a
    int getDefaultActionCode(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree) -> a
    java.lang.String getConfirmText$513542e4(int) -> a
    boolean createOptionsMenu(android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean prepareOptionsMenu(org.geometerplus.android.fbreader.network.NetworkBaseActivity,android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean runAction(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree,int) -> a
    void doExpandCatalog(android.app.Activity,org.geometerplus.fbreader.network.tree.NetworkCatalogTree) -> a
    void clearTree(android.app.Activity,org.geometerplus.fbreader.network.tree.NetworkCatalogTree) -> c
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3() -> a
    void access$1(android.app.Activity,org.geometerplus.fbreader.network.tree.NetworkCatalogTree) -> b
org.geometerplus.android.fbreader.network.NetworkCatalogActions$1 -> org.geometerplus.android.fbreader.network.av:
    org.geometerplus.android.fbreader.network.NetworkCatalogActions this$0 -> a
    org.geometerplus.fbreader.network.NetworkCatalogItem val$item -> b
    int val$actionCode -> c
    org.geometerplus.android.fbreader.network.NetworkBaseActivity val$activity -> d
    org.geometerplus.fbreader.network.NetworkTree val$tree -> e
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkCatalogActions$2 -> org.geometerplus.android.fbreader.network.aw:
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree val$tree -> a
    android.app.Activity val$activity -> b
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkCatalogActions$2$1 -> org.geometerplus.android.fbreader.network.ax:
    org.geometerplus.android.fbreader.network.NetworkCatalogActions$2 this$1 -> a
    android.app.Activity val$activity -> b
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree val$tree -> c
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkCatalogActions$3 -> org.geometerplus.android.fbreader.network.ay:
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree val$tree -> a
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkCatalogActions$4 -> org.geometerplus.android.fbreader.network.az:
    org.geometerplus.android.fbreader.network.NetworkCatalogActions this$0 -> a
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager val$mgr -> b
    org.geometerplus.android.fbreader.network.NetworkBaseActivity val$activity -> c
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkCatalogActions$4$1 -> org.geometerplus.android.fbreader.network.ba:
    org.geometerplus.android.fbreader.network.NetworkCatalogActions$4 this$1 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkCatalogActions$CatalogExpander -> org.geometerplus.android.fbreader.network.bb:
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree myTree -> a
    boolean myCheckAuthentication -> b
    boolean myResumeNotLoad -> c
    void doBefore() -> d
    void doLoading(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
    void updateItems(java.util.List) -> a
    void onFinish(java.lang.String,boolean,java.util.Set) -> a
org.geometerplus.android.fbreader.network.NetworkCatalogActivity -> org.geometerplus.android.fbreader.network.NetworkCatalogActivity:
    org.geometerplus.fbreader.network.NetworkTree myTree -> c
    boolean myInProgress -> d
    org.geometerplus.android.fbreader.network.NetworkCatalogActivity$MyCredentialsCreator myCredentialsCreator -> e
    void setForTree(org.geometerplus.fbreader.network.NetworkTree,org.geometerplus.android.fbreader.network.NetworkCatalogActivity) -> a
    org.geometerplus.android.fbreader.network.NetworkCatalogActivity getByTree(org.geometerplus.fbreader.network.NetworkTree) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void setupTitle() -> b
    void onDestroy() -> onDestroy
    void onResume() -> onResume
    void onModelChanged() -> a
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    org.geometerplus.fbreader.network.NetworkTree access$0(org.geometerplus.android.fbreader.network.NetworkCatalogActivity) -> a
    org.geometerplus.fbreader.network.NetworkTree access$1(org.geometerplus.fbreader.network.NetworkTree) -> b
    void access$2(org.geometerplus.android.fbreader.network.NetworkCatalogActivity,boolean) -> a
    void access$3(org.geometerplus.android.fbreader.network.NetworkCatalogActivity) -> b
org.geometerplus.android.fbreader.network.NetworkCatalogActivity$1 -> org.geometerplus.android.fbreader.network.bc:
    org.geometerplus.android.fbreader.network.NetworkCatalogActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkCatalogActivity$CatalogAdapter -> org.geometerplus.android.fbreader.network.bd:
    org.geometerplus.android.fbreader.network.NetworkCatalogActivity this$0 -> a
    int getCount() -> getCount
    org.geometerplus.fbreader.network.NetworkTree getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void onModelChanged() -> a
    java.lang.Object getItem(int) -> getItem
org.geometerplus.android.fbreader.network.NetworkCatalogActivity$MyCredentialsCreator -> org.geometerplus.android.fbreader.network.be:
    java.lang.String myUsername -> b
    java.lang.String myPassword -> c
    org.geometerplus.android.fbreader.network.NetworkCatalogActivity this$0 -> a
    org.apache.http.auth.Credentials createCredentials(java.lang.String,org.apache.http.auth.AuthScope) -> a
    void access$1(org.geometerplus.android.fbreader.network.NetworkCatalogActivity$MyCredentialsCreator,java.lang.String) -> a
    void access$2(org.geometerplus.android.fbreader.network.NetworkCatalogActivity$MyCredentialsCreator,java.lang.String) -> b
org.geometerplus.android.fbreader.network.NetworkInitializer -> org.geometerplus.android.fbreader.network.bf:
    org.geometerplus.android.fbreader.network.NetworkInitializer Instance -> a
    android.app.Activity myActivity -> c
    android.content.DialogInterface$OnClickListener myListener -> b
    void setActivity(android.app.Activity) -> a
    void handleMessage(android.os.Message) -> handleMessage
    void start() -> a
    android.app.Activity access$0(org.geometerplus.android.fbreader.network.NetworkInitializer) -> a
    void access$1(org.geometerplus.android.fbreader.network.NetworkInitializer,java.lang.String) -> a
org.geometerplus.android.fbreader.network.NetworkInitializer$1 -> org.geometerplus.android.fbreader.network.bg:
    org.geometerplus.android.fbreader.network.NetworkInitializer this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.NetworkInitializer$2 -> org.geometerplus.android.fbreader.network.bh:
    org.geometerplus.android.fbreader.network.NetworkInitializer this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkInitializer$3 -> org.geometerplus.android.fbreader.network.bi:
    org.geometerplus.android.fbreader.network.NetworkInitializer this$0 -> a
    void onCancel(android.content.DialogInterface) -> onCancel
org.geometerplus.android.fbreader.network.NetworkLibraryActivity -> org.geometerplus.android.fbreader.network.NetworkLibraryActivity:
    org.geometerplus.fbreader.network.NetworkTree myTree -> c
    android.content.Intent myIntent -> d
    void addLinkToIntent(android.content.Intent,org.geometerplus.fbreader.network.ICustomNetworkLink) -> a
    org.geometerplus.fbreader.network.ICustomNetworkLink getLinkFromIntent(android.content.Intent) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onNewIntent(android.content.Intent) -> onNewIntent
    void processSavedIntent() -> b
    void processIntent(android.content.Intent) -> b
    void prepareView() -> c
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    android.view.MenuItem addMenuItem(android.view.Menu,int,java.lang.String,int) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean searchIsInProgress() -> d
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean onSearchRequested() -> onSearchRequested
    void onModelChanged() -> a
    org.geometerplus.fbreader.network.NetworkTree access$0(org.geometerplus.android.fbreader.network.NetworkLibraryActivity) -> a
org.geometerplus.android.fbreader.network.NetworkLibraryActivity$1 -> org.geometerplus.android.fbreader.network.bj:
    org.geometerplus.android.fbreader.network.NetworkLibraryActivity this$0 -> a
    org.geometerplus.fbreader.network.ICustomNetworkLink val$link -> b
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkLibraryActivity$2 -> org.geometerplus.android.fbreader.network.bk:
    org.geometerplus.android.fbreader.network.NetworkLibraryActivity this$0 -> a
    boolean[] val$checked -> b
    void onClick(android.content.DialogInterface,int,boolean) -> onClick
org.geometerplus.android.fbreader.network.NetworkLibraryActivity$3 -> org.geometerplus.android.fbreader.network.bl:
    org.geometerplus.android.fbreader.network.NetworkLibraryActivity this$0 -> a
    boolean[] val$checked -> b
    java.util.List val$allLanguageCodes -> c
    org.geometerplus.fbreader.network.NetworkLibrary val$library -> d
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.NetworkLibraryActivity$4 -> org.geometerplus.android.fbreader.network.bm:
    org.geometerplus.android.fbreader.network.NetworkLibraryActivity this$0 -> a
    org.geometerplus.android.fbreader.network.NetworkView val$view -> b
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.NetworkLibraryActivity$5 -> org.geometerplus.android.fbreader.network.bn:
    org.geometerplus.android.fbreader.network.NetworkLibraryActivity this$0 -> a
    org.geometerplus.android.fbreader.network.NetworkView val$view -> b
    android.os.Handler val$handler -> c
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkLibraryActivity$LibraryAdapter -> org.geometerplus.android.fbreader.network.bo:
    org.geometerplus.android.fbreader.network.NetworkLibraryActivity this$0 -> a
    int getCount() -> getCount
    org.geometerplus.fbreader.network.NetworkTree getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
org.geometerplus.android.fbreader.network.NetworkNotifications -> org.geometerplus.android.fbreader.network.bp:
    org.geometerplus.android.fbreader.network.NetworkNotifications ourInstance -> a
    int myBookDownloadingId -> b
    org.geometerplus.android.fbreader.network.NetworkNotifications Instance() -> a
    int getBookDownloadingId() -> b
org.geometerplus.android.fbreader.network.NetworkSearchActivity -> org.geometerplus.android.fbreader.network.NetworkSearchActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.network.NetworkSearchActivity$Searcher -> org.geometerplus.android.fbreader.network.bq:
    org.geometerplus.fbreader.network.tree.SearchItemTree myTree -> a
    java.lang.String myPattern -> b
    void doBefore() -> d
    void doLoading(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
    void updateItems(java.util.List) -> a
    void onFinish(java.lang.String,boolean,java.util.Set) -> a
org.geometerplus.android.fbreader.network.NetworkTreeActions -> org.geometerplus.android.fbreader.network.br:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    java.lang.String getTitleValue(java.lang.String) -> a
    java.lang.String getConfirmValue(java.lang.String) -> b
    java.lang.String getOptionsValue(java.lang.String,java.lang.String) -> a
    android.view.MenuItem addMenuItem(android.view.ContextMenu,int,java.lang.String) -> a
    android.view.MenuItem addMenuItem(android.view.ContextMenu,int,java.lang.String,java.lang.String) -> a
    android.view.MenuItem addOptionsItem(android.view.Menu,int,java.lang.String) -> a
    android.view.MenuItem addOptionsItem$303c2b57(android.view.Menu,java.lang.String,java.lang.String) -> a
    android.view.MenuItem prepareOptionsItem(android.view.Menu,int,boolean) -> a
    android.view.MenuItem prepareOptionsItem$7cd3e83d(android.view.Menu,boolean,java.lang.String,java.lang.String) -> a
    boolean canHandleTree(org.geometerplus.fbreader.network.NetworkTree) -> a
    java.lang.String getTreeTitle(org.geometerplus.fbreader.network.NetworkTree) -> b
    void buildContextMenu(android.app.Activity,android.view.ContextMenu,org.geometerplus.fbreader.network.NetworkTree) -> a
    int getDefaultActionCode(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree) -> a
    java.lang.String getConfirmText$513542e4(int) -> a
    boolean runAction(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree,int) -> a
    boolean createOptionsMenu(android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean prepareOptionsMenu(org.geometerplus.android.fbreader.network.NetworkBaseActivity,android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
org.geometerplus.android.fbreader.network.NetworkView -> org.geometerplus.android.fbreader.network.bs:
    org.geometerplus.android.fbreader.network.NetworkView ourInstance -> a
    boolean myInitialized -> b
    java.util.ArrayList myActions -> c
    org.geometerplus.android.fbreader.network.TopupActions myTopupActions -> d
    android.os.Handler myEventHandler -> e
    java.util.LinkedList myEventListeners -> f
    org.geometerplus.android.fbreader.network.NetworkView Instance() -> a
    boolean isInitialized() -> b
    void initialize() -> c
    void finishBackgroundUpdate() -> d
    org.geometerplus.android.fbreader.network.TopupActions getTopupActions() -> e
    org.geometerplus.android.fbreader.network.NetworkTreeActions getActions(org.geometerplus.fbreader.network.NetworkTree) -> a
    void addEventListener(org.geometerplus.android.fbreader.network.NetworkView$EventListener) -> a
    void removeEventListener(org.geometerplus.android.fbreader.network.NetworkView$EventListener) -> b
    void fireModelChangedAsync() -> f
    void fireModelChanged() -> g
org.geometerplus.android.fbreader.network.NetworkView$1 -> org.geometerplus.android.fbreader.network.bt:
    org.geometerplus.android.fbreader.network.NetworkView this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.NetworkView$EventListener -> org.geometerplus.android.fbreader.network.bu:
    void onModelChanged() -> a
org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase -> org.geometerplus.android.fbreader.network.bv:
    android.database.sqlite.SQLiteDatabase myDatabase -> a
    android.database.sqlite.SQLiteStatement myInsertCustomLinkStatement -> b
    android.database.sqlite.SQLiteStatement myUpdateCustomLinkStatement -> c
    android.database.sqlite.SQLiteStatement myInsertCustomLinkUrlStatement -> d
    android.database.sqlite.SQLiteStatement myUpdateCustomLinkUrlStatement -> e
    void executeAsATransaction(java.lang.Runnable) -> a
    java.util.List listLinks() -> a
    void saveLink(org.geometerplus.fbreader.network.INetworkLink) -> a
    void deleteLink(org.geometerplus.fbreader.network.INetworkLink) -> b
    android.database.sqlite.SQLiteStatement access$0(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> a
    android.database.sqlite.SQLiteDatabase access$1(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> b
    void access$2(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase,android.database.sqlite.SQLiteStatement) -> a
    android.database.sqlite.SQLiteStatement access$3(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> c
    void access$4(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase,android.database.sqlite.SQLiteStatement) -> b
    android.database.sqlite.SQLiteStatement access$5(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> d
    void access$6(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase,android.database.sqlite.SQLiteStatement) -> c
    android.database.sqlite.SQLiteStatement access$7(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> e
    void access$8(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase,android.database.sqlite.SQLiteStatement) -> d
org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase$1 -> org.geometerplus.android.fbreader.network.bw:
    org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase this$0 -> a
    org.geometerplus.fbreader.network.INetworkLink val$link -> b
    void run() -> run
org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase$2 -> org.geometerplus.android.fbreader.network.bx:
    org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase this$0 -> a
    org.geometerplus.fbreader.network.INetworkLink val$link -> b
    void run() -> run
org.geometerplus.android.fbreader.network.SearchItemActions -> org.geometerplus.android.fbreader.network.by:
    boolean canHandleTree(org.geometerplus.fbreader.network.NetworkTree) -> a
    java.lang.String getTreeTitle(org.geometerplus.fbreader.network.NetworkTree) -> b
    void buildContextMenu(android.app.Activity,android.view.ContextMenu,org.geometerplus.fbreader.network.NetworkTree) -> a
    int getDefaultActionCode(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree) -> a
    java.lang.String getConfirmText$513542e4(int) -> a
    boolean createOptionsMenu(android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean prepareOptionsMenu(org.geometerplus.android.fbreader.network.NetworkBaseActivity,android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean runAction(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree,int) -> a
org.geometerplus.android.fbreader.network.TopupActions -> org.geometerplus.android.fbreader.network.bz:
    boolean canHandleTree(org.geometerplus.fbreader.network.NetworkTree) -> a
    void buildContextMenu(android.app.Activity,android.view.ContextMenu,org.geometerplus.fbreader.network.NetworkTree) -> a
    void buildContextMenu(android.app.Activity,android.view.ContextMenu,org.geometerplus.fbreader.network.INetworkLink) -> a
    int getDefaultActionCode(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree) -> a
    int getDefaultActionCode(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink) -> b
    java.lang.String getConfirmText$513542e4(int) -> a
    boolean createOptionsMenu(android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean prepareOptionsMenu(org.geometerplus.android.fbreader.network.NetworkBaseActivity,android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean runAction(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree,int) -> a
    boolean runAction(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink,int) -> a
    java.lang.Runnable topupRunnable(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink,java.lang.String) -> a
    void runStandalone(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink) -> a
org.geometerplus.android.fbreader.network.TopupActions$1 -> org.geometerplus.android.fbreader.network.ca:
    android.app.Activity val$activity -> a
    org.geometerplus.fbreader.network.INetworkLink val$link -> b
    void run() -> run
org.geometerplus.android.fbreader.network.TopupActions$2 -> org.geometerplus.android.fbreader.network.cb:
    android.app.Activity val$activity -> a
    org.geometerplus.fbreader.network.INetworkLink val$link -> b
    java.lang.String val$action -> c
    void run() -> run
org.geometerplus.android.fbreader.network.TopupActions$3 -> org.geometerplus.android.fbreader.network.cc:
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager val$mgr -> a
    android.app.Activity val$activity -> b
    java.lang.Runnable val$action -> c
    void run() -> run
org.geometerplus.android.fbreader.network.Util -> org.geometerplus.android.fbreader.network.cd:
    java.util.Map ourAfterRegisrationMap -> a
    boolean testService(android.app.Activity,java.lang.String,java.lang.String) -> a
    boolean isRegistrationSupported(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink) -> a
    void runRegistrationDialog(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink) -> b
    void runAuthenticationDialog(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink,java.lang.String,java.lang.Runnable) -> a
    void processCustomAuthentication(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink,int,android.content.Intent) -> a
    void processSignup(org.geometerplus.fbreader.network.INetworkLink,int,android.content.Intent) -> a
    boolean isTopupSupported(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink) -> c
    boolean isTopupSupported(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink,java.lang.String) -> a
    void runTopupDialog(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink,java.lang.String) -> b
    boolean isBrowserTopupSupported$5a0daebc(org.geometerplus.fbreader.network.INetworkLink) -> a
    void openInBrowser(android.content.Context,java.lang.String) -> a
    void openTree(android.content.Context,org.geometerplus.fbreader.network.NetworkTree) -> a
    org.geometerplus.fbreader.network.NetworkTree getTreeFromIntent(android.content.Intent) -> a
org.geometerplus.android.fbreader.network.Util$1 -> org.geometerplus.android.fbreader.network.ce:
    org.geometerplus.fbreader.network.INetworkLink val$link -> a
    void run() -> run
org.geometerplus.android.fbreader.network.Util$2 -> org.geometerplus.android.fbreader.network.cf:
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager val$mgr -> a
    java.lang.String val$password -> b
    java.lang.Runnable val$onSuccess -> c
    android.app.Activity val$activity -> d
    org.geometerplus.fbreader.network.INetworkLink val$link -> e
    void run() -> run
org.geometerplus.android.fbreader.preferences.AnimationSpeedPreference -> org.geometerplus.android.fbreader.preferences.a:
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption myOption -> a
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> b
    android.widget.SeekBar mySlider -> c
    void onBindDialogView(android.view.View) -> onBindDialogView
    void onClick(android.content.DialogInterface,int) -> onClick
    void onAccept() -> a
    android.widget.SeekBar access$0(org.geometerplus.android.fbreader.preferences.AnimationSpeedPreference) -> a
    org.geometerplus.zlibrary.core.resources.ZLResource access$1(org.geometerplus.android.fbreader.preferences.AnimationSpeedPreference) -> b
org.geometerplus.android.fbreader.preferences.AnimationSpeedPreference$SeekBarDrawable -> org.geometerplus.android.fbreader.preferences.b:
    android.graphics.drawable.Drawable myBase -> b
    android.graphics.Paint myPaint -> c
    android.graphics.Paint myOutlinePaint -> d
    org.geometerplus.android.fbreader.preferences.AnimationSpeedPreference this$0 -> a
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    boolean onStateChange(int[]) -> onStateChange
    boolean isStateful() -> isStateful
    boolean onLevelChange(int) -> onLevelChange
    void draw(android.graphics.Canvas) -> draw
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
org.geometerplus.android.fbreader.preferences.BatteryLevelToTurnScreenOffPreference -> org.geometerplus.android.fbreader.preferences.c:
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption myOption -> a
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.BookTitlePreference -> org.geometerplus.android.fbreader.preferences.d:
    org.geometerplus.fbreader.library.Book myBook -> a
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.DictionaryPreference -> org.geometerplus.android.fbreader.preferences.e:
    org.geometerplus.zlibrary.core.options.ZLStringOption myOption -> a
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.EditBookInfoActivity -> org.geometerplus.android.fbreader.preferences.EditBookInfoActivity:
    org.geometerplus.fbreader.library.Book myBook -> b
    void init(android.content.Intent) -> a
    void onPause() -> onPause
org.geometerplus.android.fbreader.preferences.FontOption -> org.geometerplus.android.fbreader.preferences.f:
    org.geometerplus.zlibrary.core.options.ZLStringOption myOption -> a
    java.lang.String UNCHANGED -> b
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.FontStylePreference -> org.geometerplus.android.fbreader.preferences.g:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption myBoldOption -> a
    org.geometerplus.zlibrary.core.options.ZLBooleanOption myItalicOption -> b
    java.lang.String[] myValues -> d
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.LanguagePreference -> org.geometerplus.android.fbreader.preferences.h:
    org.geometerplus.fbreader.library.Book myBook -> a
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.PreferenceActivity -> org.geometerplus.android.fbreader.preferences.PreferenceActivity:
    void init(android.content.Intent) -> a
org.geometerplus.android.fbreader.preferences.PreferenceActivity$1 -> org.geometerplus.android.fbreader.preferences.i:
    org.geometerplus.android.fbreader.preferences.PreferenceActivity this$0 -> a
    org.geometerplus.android.fbreader.preferences.ZLPreferenceSet val$statusBarPreferences -> b
    void onClick() -> onClick
org.geometerplus.android.fbreader.preferences.PreferenceActivity$2 -> org.geometerplus.android.fbreader.preferences.j:
    org.geometerplus.android.fbreader.preferences.PreferenceActivity this$0 -> a
    org.geometerplus.android.fbreader.preferences.ZLPreferenceSet val$bgPreferences -> b
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.PreferenceActivity$3 -> org.geometerplus.android.fbreader.preferences.k:
    org.geometerplus.android.fbreader.preferences.PreferenceActivity this$0 -> a
    org.geometerplus.android.fbreader.preferences.ZLPreferenceSet val$footerPreferences -> d
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.PreferenceActivity$4 -> org.geometerplus.android.fbreader.preferences.l:
    org.geometerplus.android.fbreader.preferences.PreferenceActivity this$0 -> a
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidApplication val$androidApp -> b
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.PreferenceActivity$5 -> org.geometerplus.android.fbreader.preferences.m:
    org.geometerplus.android.fbreader.preferences.PreferenceActivity this$0 -> a
    org.geometerplus.android.fbreader.preferences.ZLPreferenceSet val$volumeKeysPreferences -> b
    void onClick() -> onClick
org.geometerplus.android.fbreader.preferences.WallpaperPreference -> org.geometerplus.android.fbreader.preferences.n:
    org.geometerplus.zlibrary.core.options.ZLStringOption myOption -> a
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.ZLBoolean3Preference -> org.geometerplus.android.fbreader.preferences.o:
    org.geometerplus.zlibrary.core.options.ZLBoolean3Option myOption -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3 -> b
    void onAccept() -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3() -> b
org.geometerplus.android.fbreader.preferences.ZLBooleanPreference -> org.geometerplus.android.fbreader.preferences.p:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption myOption -> a
    void onClick() -> onClick
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.ZLChoicePreference -> org.geometerplus.android.fbreader.preferences.q:
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption myOption -> a
    boolean $assertionsDisabled -> b
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.ZLColorPreference -> org.geometerplus.android.fbreader.preferences.r:
    org.geometerplus.zlibrary.core.options.ZLColorOption myOption -> a
    android.widget.SeekBar myRedSlider -> b
    android.widget.SeekBar myGreenSlider -> c
    android.widget.SeekBar myBlueSlider -> d
    android.graphics.drawable.GradientDrawable myPreviewDrawable -> e
    android.widget.SeekBar createSlider(android.view.View,int,int,java.lang.String) -> a
    void onBindDialogView(android.view.View) -> onBindDialogView
    void onClick(android.content.DialogInterface,int) -> onClick
    void onAccept() -> a
    android.graphics.drawable.GradientDrawable access$0(org.geometerplus.android.fbreader.preferences.ZLColorPreference) -> a
    android.widget.SeekBar access$1(org.geometerplus.android.fbreader.preferences.ZLColorPreference) -> b
    android.widget.SeekBar access$2(org.geometerplus.android.fbreader.preferences.ZLColorPreference) -> c
    android.widget.SeekBar access$3(org.geometerplus.android.fbreader.preferences.ZLColorPreference) -> d
org.geometerplus.android.fbreader.preferences.ZLColorPreference$1 -> org.geometerplus.android.fbreader.preferences.s:
    org.geometerplus.android.fbreader.preferences.ZLColorPreference this$0 -> a
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
org.geometerplus.android.fbreader.preferences.ZLColorPreference$SeekBarDrawable -> org.geometerplus.android.fbreader.preferences.t:
    android.widget.SeekBar mySlider -> a
    android.graphics.drawable.Drawable myBase -> b
    java.lang.String myText -> c
    android.graphics.Paint myPaint -> d
    android.graphics.Paint myOutlinePaint -> e
    boolean myLabelOnRight -> f
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    boolean onStateChange(int[]) -> onStateChange
    boolean isStateful() -> isStateful
    boolean onLevelChange(int) -> onLevelChange
    void draw(android.graphics.Canvas) -> draw
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
org.geometerplus.android.fbreader.preferences.ZLEnumPreference -> org.geometerplus.android.fbreader.preferences.u:
    org.geometerplus.zlibrary.core.options.ZLEnumOption myOption -> a
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.ZLIntegerChoicePreference -> org.geometerplus.android.fbreader.preferences.v:
    org.geometerplus.zlibrary.core.options.ZLIntegerOption myOption -> b
    int[] myValues -> d
    boolean $assertionsDisabled -> a
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.ZLIntegerRangePreference -> org.geometerplus.android.fbreader.preferences.w:
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption myOption -> a
    void onDialogClosed(boolean) -> onDialogClosed
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.ZLPreference -> org.geometerplus.android.fbreader.preferences.x:
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity -> org.geometerplus.android.fbreader.preferences.y:
    java.util.ArrayList myPreferences -> b
    android.preference.PreferenceScreen myScreen -> c
    org.geometerplus.zlibrary.core.resources.ZLResource Resource -> a
    org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity$Screen createPreferenceScreen(java.lang.String) -> a
    org.geometerplus.android.fbreader.preferences.ZLPreference addPreference(org.geometerplus.android.fbreader.preferences.ZLPreference) -> a
    void init(android.content.Intent) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
    java.util.ArrayList access$0(org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity) -> a
org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity$Screen -> org.geometerplus.android.fbreader.preferences.z:
    org.geometerplus.zlibrary.core.resources.ZLResource Resource -> a
    android.preference.PreferenceScreen myScreen -> c
    org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity this$0 -> b
    org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity$Screen createPreferenceScreen(java.lang.String) -> a
    org.geometerplus.android.fbreader.preferences.ZLPreference addPreference(org.geometerplus.android.fbreader.preferences.ZLPreference) -> a
    org.geometerplus.android.fbreader.preferences.ZLPreference addOption(org.geometerplus.zlibrary.core.options.ZLBooleanOption,java.lang.String) -> a
    org.geometerplus.android.fbreader.preferences.ZLPreference addOption(org.geometerplus.zlibrary.core.options.ZLStringOption,java.lang.String) -> a
    org.geometerplus.android.fbreader.preferences.ZLPreference addOption(org.geometerplus.zlibrary.core.options.ZLColorOption,java.lang.String) -> a
    org.geometerplus.android.fbreader.preferences.ZLPreference addOption(org.geometerplus.zlibrary.core.options.ZLEnumOption,java.lang.String) -> a
    android.preference.PreferenceScreen access$1(org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity$Screen) -> a
org.geometerplus.android.fbreader.preferences.ZLPreferenceSet -> org.geometerplus.android.fbreader.preferences.aa:
    java.util.LinkedList myPreferences -> a
    void add(org.geometerplus.android.fbreader.preferences.ZLPreference) -> a
    void setEnabled(boolean) -> a
org.geometerplus.android.fbreader.preferences.ZLStringChoicePreference -> org.geometerplus.android.fbreader.preferences.ab:
    org.geometerplus.zlibrary.core.options.ZLStringOption myOption -> a
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.ZLStringListPreference -> org.geometerplus.android.fbreader.preferences.ac:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    boolean $assertionsDisabled -> c
    void setList(java.lang.String[]) -> a
    void setLists(java.lang.String[],java.lang.String[]) -> a
    boolean setInitialValue(java.lang.String) -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.ZLStringOptionPreference -> org.geometerplus.android.fbreader.preferences.ad:
    org.geometerplus.zlibrary.core.options.ZLStringOption myOption -> a
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.ZLStringPreference -> org.geometerplus.android.fbreader.preferences.ae:
    java.lang.String myValue -> a
    void setValue(java.lang.String) -> a
    java.lang.String getValue() -> b
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.tree.ZLAndroidTree -> org.geometerplus.android.fbreader.a.a:
    int getCoverResourceId() -> c
org.geometerplus.android.util.PackageUtil -> org.geometerplus.android.a.a:
    boolean canBeStarted(android.content.Context,android.content.Intent,boolean) -> a
    boolean installFromMarket(android.app.Activity,java.lang.String) -> a
    void runInstallPluginDialog(android.app.Activity,java.util.Map,java.lang.Runnable) -> a
org.geometerplus.android.util.PackageUtil$1 -> org.geometerplus.android.a.b:
    android.app.Activity val$activity -> a
    java.lang.String val$plugin -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.util.PackageUtil$2 -> org.geometerplus.android.a.c:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption val$doNotInstallOption -> a
    android.widget.CheckBox val$checkBox -> b
    java.lang.Runnable val$postRunnable -> c
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.util.SQLiteUtil -> org.geometerplus.android.a.d:
    void bindString(android.database.sqlite.SQLiteStatement,int,java.lang.String) -> a
    void bindDate(android.database.sqlite.SQLiteStatement,int,java.util.Date) -> a
    java.util.Date getDate(android.database.Cursor,int) -> a
org.geometerplus.android.util.UIUtil -> org.geometerplus.android.a.e:
    java.lang.Object ourMonitor -> a
    android.app.ProgressDialog ourProgress -> b
    java.util.Queue ourTaskQueue -> c
    android.os.Handler ourProgressHandler -> d
    void wait(java.lang.String,java.lang.Runnable,android.content.Context) -> a
    void runWithMessage(android.content.Context,java.lang.String,java.lang.Runnable,java.lang.Runnable) -> a
    void showMessageText(android.content.Context,java.lang.String) -> a
    void showErrorMessage(android.content.Context,java.lang.String) -> b
    void showErrorMessage(android.content.Context,java.lang.String,java.lang.String) -> a
    java.lang.Object access$0() -> a
    java.util.Queue access$1() -> b
    android.app.ProgressDialog access$2() -> c
    void access$3$7db20201() -> d
    android.os.Handler access$4() -> e
org.geometerplus.android.util.UIUtil$1 -> org.geometerplus.android.a.f:
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.util.UIUtil$2 -> org.geometerplus.android.a.g:
    android.app.ProgressDialog val$currentProgress -> a
    void run() -> run
org.geometerplus.android.util.UIUtil$3 -> org.geometerplus.android.a.h:
    android.app.ProgressDialog val$progress -> a
    java.lang.Runnable val$postAction -> b
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.util.UIUtil$4 -> org.geometerplus.android.a.i:
    java.lang.Runnable val$action -> a
    android.os.Handler val$handler -> b
    void run() -> run
org.geometerplus.android.util.UIUtil$Pair -> org.geometerplus.android.a.j:
    java.lang.Runnable Action -> a
    java.lang.String Message -> b
org.geometerplus.fbreader.Paths -> org.geometerplus.a.a:
    org.geometerplus.zlibrary.core.options.ZLStringOption BooksDirectoryOption() -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption FontsDirectoryOption() -> b
    org.geometerplus.zlibrary.core.options.ZLStringOption WallpapersDirectoryOption() -> c
    java.lang.String cacheDirectory() -> d
    java.lang.String networkCacheDirectory() -> e
org.geometerplus.fbreader.bookmodel.BookModel -> org.geometerplus.a.a.a:
    org.geometerplus.zlibrary.core.image.ZLImageMap myImageMap -> d
    org.geometerplus.fbreader.library.Book Book -> a
    org.geometerplus.zlibrary.text.model.ZLTextModel BookTextModel -> b
    org.geometerplus.fbreader.bookmodel.TOCTree TOCTree -> c
    java.util.HashMap myFootnotes -> e
    org.geometerplus.zlibrary.text.model.CharStorage myInternalHyperlinks -> f
    char[] myCurrentLinkBlock -> g
    int myCurrentLinkBlockOffset -> h
    org.geometerplus.fbreader.bookmodel.BookModel createModel(org.geometerplus.fbreader.library.Book) -> a
    org.geometerplus.zlibrary.text.model.ZLTextModel getFootnoteModel(java.lang.String) -> a
    void addHyperlinkLabel(java.lang.String,org.geometerplus.zlibrary.text.model.ZLTextModel,int) -> a
    org.geometerplus.fbreader.bookmodel.BookModel$Label getLabel(java.lang.String) -> b
    void addImage(java.lang.String,org.geometerplus.zlibrary.core.image.ZLImage) -> a
org.geometerplus.fbreader.bookmodel.BookModel$Label -> org.geometerplus.a.a.b:
    java.lang.String ModelId -> a
    int ParagraphIndex -> b
org.geometerplus.fbreader.bookmodel.BookReader -> org.geometerplus.a.a.c:
    org.geometerplus.fbreader.bookmodel.BookModel Model -> a
    org.geometerplus.zlibrary.text.model.ZLTextWritableModel myCurrentTextModel -> b
    boolean myTextParagraphExists -> c
    boolean myTextParagraphIsNonEmpty -> d
    char[] myTextBuffer -> e
    int myTextBufferLength -> f
    java.lang.StringBuilder myContentsBuffer -> g
    byte[] myKindStack -> h
    int myKindStackSize -> i
    byte myHyperlinkKind -> j
    java.lang.String myHyperlinkReference -> k
    boolean myInsideTitle -> l
    boolean mySectionContainsRegularContents -> m
    org.geometerplus.fbreader.bookmodel.TOCTree myCurrentContentsTree -> n
    java.nio.charset.CharsetDecoder myByteDecoder -> o
    byte[] myUnderflowByteBuffer -> p
    int myUnderflowLength -> q
    void setByteDecoder(java.nio.charset.CharsetDecoder) -> a
    void flushTextBufferToParagraph() -> n
    void addControl(byte,boolean) -> a
    void pushKind(byte) -> a
    boolean popKind() -> a
    void beginParagraph() -> b
    void beginParagraph(byte) -> b
    void endParagraph() -> c
    void insertEndOfSectionParagraph() -> d
    void unsetCurrentTextModel() -> e
    void enterTitle() -> f
    void exitTitle() -> g
    void setMainTextModel() -> h
    void setFootnoteTextModel(java.lang.String) -> a
    void addData(char[]) -> a
    void addData(char[],int,int,boolean) -> a
    void addByteData(byte[],int,int) -> a
    byte hyperlinkType(byte) -> c
    void addHyperlinkControl(byte,java.lang.String) -> a
    void addHyperlinkLabel(java.lang.String) -> b
    void addHyperlinkLabel(java.lang.String,int) -> a
    void addContentsData(char[]) -> b
    void addContentsData(char[],int,int) -> a
    boolean hasContentsData() -> i
    void beginContentsParagraph(int) -> a
    void endContentsParagraph() -> j
    boolean paragraphIsOpen() -> k
    boolean paragraphIsNonEmpty() -> l
    void beginContentsParagraph() -> m
    void addImageReference(java.lang.String) -> c
    void addImageReference(java.lang.String,short) -> a
    void addImage(java.lang.String,org.geometerplus.zlibrary.core.image.ZLImage) -> a
    void addFixedHSpace(short) -> a
org.geometerplus.fbreader.bookmodel.TOCTree -> org.geometerplus.a.a.d:
    java.lang.String myText -> a
    org.geometerplus.fbreader.bookmodel.TOCTree$Reference myReference -> b
    java.lang.String getText() -> a
    void setText(java.lang.String) -> a
    org.geometerplus.fbreader.bookmodel.TOCTree$Reference getReference() -> b
    void setReference(org.geometerplus.zlibrary.text.model.ZLTextModel,int) -> a
org.geometerplus.fbreader.bookmodel.TOCTree$Reference -> org.geometerplus.a.a.e:
    int ParagraphIndex -> a
    org.geometerplus.zlibrary.text.model.ZLTextModel Model -> b
org.geometerplus.fbreader.fbreader.BackgroundColorAction -> org.geometerplus.a.b.a:
    void run() -> a
org.geometerplus.fbreader.fbreader.ChangeFontSizeAction -> org.geometerplus.a.b.b:
    int myDelta -> a
    void run() -> a
org.geometerplus.fbreader.fbreader.ClearFindResultsAction -> org.geometerplus.a.b.c:
    void run() -> a
org.geometerplus.fbreader.fbreader.ColorProfile -> org.geometerplus.a.b.d:
    java.util.ArrayList ourNames -> j
    java.util.HashMap ourProfiles -> k
    org.geometerplus.zlibrary.core.options.ZLStringOption WallpaperOption -> a
    org.geometerplus.zlibrary.core.options.ZLColorOption BackgroundOption -> b
    org.geometerplus.zlibrary.core.options.ZLColorOption SelectionBackgroundOption -> c
    org.geometerplus.zlibrary.core.options.ZLColorOption SelectionForegroundOption -> d
    org.geometerplus.zlibrary.core.options.ZLColorOption HighlightingOption -> e
    org.geometerplus.zlibrary.core.options.ZLColorOption RegularTextOption -> f
    org.geometerplus.zlibrary.core.options.ZLColorOption HyperlinkTextOption -> g
    org.geometerplus.zlibrary.core.options.ZLColorOption VisitedHyperlinkTextOption -> h
    org.geometerplus.zlibrary.core.options.ZLColorOption FooterFillOption -> i
    org.geometerplus.fbreader.fbreader.ColorProfile get(java.lang.String) -> a
    org.geometerplus.zlibrary.core.options.ZLColorOption createOption(java.lang.String,java.lang.String,int,int,int) -> a
org.geometerplus.fbreader.fbreader.ExitAction -> org.geometerplus.a.b.e:
    void run() -> a
org.geometerplus.fbreader.fbreader.FBAction -> org.geometerplus.a.b.f:
    org.geometerplus.fbreader.fbreader.FBReaderApp Reader -> d
org.geometerplus.fbreader.fbreader.FBReaderApp -> org.geometerplus.a.b.g:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption AllowScreenBrightnessAdjustmentOption -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption TextSearchPatternOption -> b
    org.geometerplus.zlibrary.core.options.ZLBooleanOption UseSeparateBindingsOption -> c
    org.geometerplus.zlibrary.core.options.ZLBooleanOption EnableDoubleTapOption -> d
    org.geometerplus.zlibrary.core.options.ZLBooleanOption NavigateAllWordsOption -> e
    org.geometerplus.zlibrary.core.options.ZLEnumOption WordTappingActionOption -> f
    org.geometerplus.zlibrary.core.options.ZLColorOption ImageViewBackgroundOption -> g
    org.geometerplus.zlibrary.core.options.ZLEnumOption ImageTappingActionOption -> h
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption LeftMarginOption -> i
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption RightMarginOption -> j
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption TopMarginOption -> k
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption BottomMarginOption -> l
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption ScrollbarTypeOption -> m
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption FooterHeightOption -> n
    org.geometerplus.zlibrary.core.options.ZLBooleanOption FooterShowTOCMarksOption -> o
    org.geometerplus.zlibrary.core.options.ZLBooleanOption FooterShowClockOption -> p
    org.geometerplus.zlibrary.core.options.ZLBooleanOption FooterShowBatteryOption -> q
    org.geometerplus.zlibrary.core.options.ZLBooleanOption FooterShowProgressOption -> r
    org.geometerplus.zlibrary.core.options.ZLStringOption FooterFontOption -> s
    org.geometerplus.zlibrary.core.options.ZLStringOption ColorProfileOption -> t
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ShowPreviousBookInCancelMenuOption -> u
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ShowPositionsInCancelMenuOption -> v
    org.geometerplus.zlibrary.core.application.ZLKeyBindings myBindings -> D
    org.geometerplus.fbreader.fbreader.FBView BookTextView -> w
    org.geometerplus.fbreader.fbreader.FBView FootnoteView -> x
    org.geometerplus.fbreader.bookmodel.BookModel Model -> y
    java.lang.String myArg0 -> E
    org.geometerplus.fbreader.fbreader.ColorProfile myColorProfile -> F
    java.util.ArrayList myCancelActionsList -> G
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$fbreader$FBReaderApp$CancelActionType -> H
    void initWindow() -> a
    void openBook(org.geometerplus.fbreader.library.Book,org.geometerplus.fbreader.library.Bookmark) -> a
    org.geometerplus.fbreader.fbreader.ColorProfile getColorProfile() -> b
    void setColorProfileName(java.lang.String) -> a
    org.geometerplus.zlibrary.core.application.ZLKeyBindings keyBindings() -> c
    void tryOpenFootnote(java.lang.String) -> b
    void clearTextCaches() -> d
    void openBookInternal(org.geometerplus.fbreader.library.Book,org.geometerplus.fbreader.library.Bookmark) -> b
    void gotoBookmark(org.geometerplus.fbreader.library.Bookmark) -> a
    void showBookTextView() -> e
    org.geometerplus.fbreader.library.Book createBookForFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
    void openFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    void onWindowClosing() -> f
    java.util.List getCancelActionsList() -> g
    void runCancelAction(int) -> a
    void updateInvisibleBookmarksList(org.geometerplus.fbreader.library.Bookmark) -> b
    void addInvisibleBookmark(org.geometerplus.zlibrary.text.view.ZLTextWordCursor) -> a
    void addInvisibleBookmark() -> h
    org.geometerplus.fbreader.library.Bookmark addBookmark(int,boolean) -> a
    org.geometerplus.fbreader.library.Book access$0$39b7ecbb(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$fbreader$FBReaderApp$CancelActionType() -> v
org.geometerplus.fbreader.fbreader.FBReaderApp$1 -> org.geometerplus.a.b.h:
    org.geometerplus.fbreader.fbreader.FBReaderApp this$0 -> a
    void run() -> run
org.geometerplus.fbreader.fbreader.FBReaderApp$2 -> org.geometerplus.a.b.i:
    org.geometerplus.fbreader.fbreader.FBReaderApp this$0 -> a
    org.geometerplus.fbreader.library.Book val$book -> b
    org.geometerplus.fbreader.library.Bookmark val$bookmark -> c
    void run() -> run
org.geometerplus.fbreader.fbreader.FBReaderApp$BookmarkDescription -> org.geometerplus.a.b.j:
    org.geometerplus.fbreader.library.Bookmark Bookmark -> a
org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionDescription -> org.geometerplus.a.b.k:
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType Type -> b
    java.lang.String Title -> c
    java.lang.String Summary -> d
org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType -> org.geometerplus.a.b.l:
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType previousBook -> a
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType returnTo -> b
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType close -> c
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType[] ENUM$VALUES -> d
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType[] values() -> values
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction -> org.geometerplus.a.b.m:
    org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction doNothing -> a
    org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction selectImage -> b
    org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction openImageView -> c
    org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction[] ENUM$VALUES -> d
    org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction[] values() -> values
    org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction -> org.geometerplus.a.b.n:
    org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction doNothing -> a
    org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction selectSingleWord -> b
    org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction startSelecting -> c
    org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction openDictionary -> d
    org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction[] ENUM$VALUES -> e
    org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction[] values() -> values
    org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.fbreader.FBView -> org.geometerplus.a.b.o:
    org.geometerplus.fbreader.fbreader.FBReaderApp myReader -> j
    int myStartY -> k
    boolean myIsBrightnessAdjustmentInProgress -> l
    int myStartBrightness -> m
    java.lang.String myZoneMapId -> n
    org.geometerplus.fbreader.fbreader.TapZoneMap myZoneMap -> o
    org.geometerplus.fbreader.fbreader.FBView$Footer myFooter -> p
    void setModel(org.geometerplus.zlibrary.text.model.ZLTextModel) -> a
    org.geometerplus.fbreader.fbreader.TapZoneMap getZoneMap() -> Z
    boolean onFingerSingleTap(int,int) -> a
    boolean isDoubleTapSupported() -> a
    boolean onFingerDoubleTap(int,int) -> b
    boolean onFingerPress(int,int) -> c
    boolean isFlickScrollingEnabled() -> aa
    void startManualScrolling(int,int) -> n
    boolean onFingerMove(int,int) -> d
    boolean onFingerRelease(int,int) -> e
    boolean selection(int,int) -> o
    boolean onFingerLongPress(int,int) -> f
    boolean onFingerMoveAfterLongPress(int,int) -> g
    boolean onFingerReleaseAfterLongPress(int,int) -> h
    boolean onTrackballRotated(int,int) -> i
    int getLeftMargin() -> b
    int getRightMargin() -> c
    int getTopMargin() -> d
    int getBottomMargin() -> e
    org.geometerplus.zlibrary.core.filesystem.ZLFile getWallpaperFile() -> f
    org.geometerplus.zlibrary.core.util.ZLColor getBackgroundColor() -> g
    org.geometerplus.zlibrary.core.util.ZLColor getSelectedBackgroundColor() -> h
    org.geometerplus.zlibrary.core.util.ZLColor getSelectedForegroundColor() -> i
    org.geometerplus.zlibrary.core.util.ZLColor getTextColor(org.geometerplus.zlibrary.text.view.ZLTextHyperlink) -> a
    org.geometerplus.zlibrary.core.util.ZLColor getHighlightingColor() -> j
    void releaseSelectionCursor() -> k
    java.lang.String getSelectedText() -> l
    int getCountOfSelectedWords() -> m
    int scrollbarType() -> n
    org.geometerplus.zlibrary.core.view.ZLView$Animation getAnimationType() -> o
    boolean onClick() -> p
    boolean onClick_pic() -> q
    int checkXY(int,int,int) -> a
    boolean checkRegion(int,int) -> j
    void onPress(int,int) -> k
    org.geometerplus.zlibrary.core.view.ZLView$FooterArea getFooterArea() -> r
    org.geometerplus.fbreader.fbreader.FBReaderApp access$1(org.geometerplus.fbreader.fbreader.FBView) -> a
org.geometerplus.fbreader.fbreader.FBView$Footer -> org.geometerplus.a.b.p:
    java.lang.Runnable UpdateTask -> c
    java.util.ArrayList myTOCMarks -> d
    int MAX_TOC_MARKS_NUMBER -> e
    int myGaugeWidth -> a
    org.geometerplus.fbreader.fbreader.FBView this$0 -> b
    int getHeight() -> a
    void resetTOCMarks() -> b
    java.lang.Runnable access$1(org.geometerplus.fbreader.fbreader.FBView$Footer) -> a
org.geometerplus.fbreader.fbreader.FBView$Footer$1 -> org.geometerplus.a.b.q:
    org.geometerplus.fbreader.fbreader.FBView$Footer this$1 -> a
    void run() -> run
org.geometerplus.fbreader.fbreader.FindNextAction -> org.geometerplus.a.b.r:
    boolean isEnabled() -> b
    void run() -> a
org.geometerplus.fbreader.fbreader.FindPreviousAction -> org.geometerplus.a.b.s:
    boolean isEnabled() -> b
    void run() -> a
org.geometerplus.fbreader.fbreader.RotateAction -> org.geometerplus.a.b.t:
    void run() -> a
    boolean isVisible() -> a_
org.geometerplus.fbreader.fbreader.ScrollingPreferences -> org.geometerplus.a.b.u:
    org.geometerplus.fbreader.fbreader.ScrollingPreferences ourInstance -> h
    org.geometerplus.zlibrary.core.options.ZLEnumOption FingerScrollingOption -> a
    org.geometerplus.zlibrary.core.options.ZLBooleanOption VolumeKeysOption -> b
    org.geometerplus.zlibrary.core.options.ZLBooleanOption InvertVolumeKeysOption -> c
    org.geometerplus.zlibrary.core.options.ZLEnumOption AnimationOption -> d
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption AnimationSpeedOption -> e
    org.geometerplus.zlibrary.core.options.ZLBooleanOption HorizontalOption -> f
    org.geometerplus.zlibrary.core.options.ZLEnumOption TapZonesSchemeOption -> g
    org.geometerplus.fbreader.fbreader.ScrollingPreferences Instance() -> a
org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling -> org.geometerplus.a.b.v:
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling byTap -> a
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling byFlick -> b
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling byTapAndFlick -> c
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling[] ENUM$VALUES -> d
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling[] values() -> values
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme -> org.geometerplus.a.b.w:
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme left_to_right -> a
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme right_to_left -> b
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme up -> c
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme down -> d
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme custom -> e
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme[] ENUM$VALUES -> f
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme[] values() -> values
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.fbreader.SelectionClearAction -> org.geometerplus.a.b.x:
    void run() -> a
org.geometerplus.fbreader.fbreader.SwitchProfileAction -> org.geometerplus.a.b.y:
    java.lang.String myProfileName -> a
    boolean isVisible() -> a_
    void run() -> a
org.geometerplus.fbreader.fbreader.TapZoneMap -> org.geometerplus.a.b.z:
    int myVerticalSize -> a
    int myHorizontalSize -> b
    java.util.HashMap myZoneMap -> c
    java.util.HashMap myZoneMap2 -> d
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$fbreader$TapZoneMap$Tap -> e
    java.lang.String getActionByCoordinates(int,int,int,int,org.geometerplus.fbreader.fbreader.TapZoneMap$Tap) -> a
    java.util.HashMap access$0(org.geometerplus.fbreader.fbreader.TapZoneMap) -> a
    java.util.HashMap access$1(org.geometerplus.fbreader.fbreader.TapZoneMap) -> b
    void access$2(org.geometerplus.fbreader.fbreader.TapZoneMap,int) -> a
    void access$3(org.geometerplus.fbreader.fbreader.TapZoneMap,int) -> b
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$fbreader$TapZoneMap$Tap() -> a
org.geometerplus.fbreader.fbreader.TapZoneMap$Reader -> org.geometerplus.a.b.aa:
    org.geometerplus.fbreader.fbreader.TapZoneMap this$0 -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.fbreader.TapZoneMap$Tap -> org.geometerplus.a.b.ab:
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap singleTap -> a
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap singleNotDoubleTap -> b
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap doubleTap -> c
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap[] ENUM$VALUES -> d
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap[] values() -> values
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.fbreader.TapZoneMap$Zone -> org.geometerplus.a.b.ac:
    int HIndex -> a
    int VIndex -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.fbreader.TextBuildTraverser -> org.geometerplus.a.b.ad:
    java.lang.StringBuilder myBuffer -> a
    void processWord(org.geometerplus.zlibrary.text.view.ZLTextWord) -> a
    void processSpace() -> a
    void processEndOfParagraph() -> b
    java.lang.String getText() -> c
org.geometerplus.fbreader.fbreader.TurnPageAction -> org.geometerplus.a.b.ae:
    boolean myForward -> a
    boolean isEnabled() -> b
    void run() -> a
    void runWithCoordinates(int,int) -> a
org.geometerplus.fbreader.fbreader.VolumeKeyTurnPageAction -> org.geometerplus.a.b.af:
    boolean myForward -> a
    boolean isEnabled() -> b
    void run() -> a
org.geometerplus.fbreader.fbreader.WordCountTraverser -> org.geometerplus.a.b.ag:
    int myCount -> a
    void processWord(org.geometerplus.zlibrary.text.view.ZLTextWord) -> a
    void processSpace() -> a
    void processEndOfParagraph() -> b
    int getCount() -> c
org.geometerplus.fbreader.formats.FormatPlugin -> org.geometerplus.a.c.a:
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean readMetaInfo(org.geometerplus.fbreader.library.Book) -> a
    boolean readModel(org.geometerplus.fbreader.bookmodel.BookModel) -> a
    org.geometerplus.zlibrary.core.image.ZLImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
org.geometerplus.fbreader.formats.PluginCollection -> org.geometerplus.a.c.b:
    org.geometerplus.fbreader.formats.PluginCollection ourInstance -> d
    java.util.ArrayList myPlugins -> e
    org.geometerplus.zlibrary.core.options.ZLStringOption DefaultLanguageOption -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption DefaultEncodingOption -> b
    org.geometerplus.zlibrary.core.options.ZLBooleanOption LanguageAutoDetectOption -> c
    org.geometerplus.fbreader.formats.PluginCollection Instance() -> a
    org.geometerplus.fbreader.formats.FormatPlugin getPlugin(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
org.geometerplus.fbreader.formats.fb2.Base64EncodedImage -> org.geometerplus.a.c.a.a:
    int ourCounter -> a
    java.lang.String myDirName -> b
    int myFileNumber -> c
    java.io.OutputStreamWriter myStreamWriter -> d
    void resetCounter() -> d_
    java.lang.String encodedFileName() -> b
    java.lang.String decodedFileName() -> c
    void addData(char[],int,int) -> a
    void close() -> d
org.geometerplus.fbreader.formats.fb2.FB2AnnotationReader -> org.geometerplus.a.c.a.b:
    int myReadState -> a
    java.lang.StringBuilder myBuffer -> b
    boolean dontCacheAttributeValues() -> a
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
org.geometerplus.fbreader.formats.fb2.FB2CoverImage -> org.geometerplus.a.c.a.c:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> a
    org.geometerplus.zlibrary.core.image.ZLSingleImage getRealImage() -> a
    int sourceType() -> b
    java.lang.String getId() -> c
org.geometerplus.fbreader.formats.fb2.FB2CoverImage$BackgroundReader -> org.geometerplus.a.c.a.d:
    boolean myReadCoverPage -> a
    java.lang.String myImageReference -> b
    org.geometerplus.fbreader.formats.fb2.Base64EncodedImage myImage -> c
    org.geometerplus.fbreader.formats.fb2.Base64EncodedImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean processNamespaces() -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
org.geometerplus.fbreader.formats.fb2.FB2CoverReader -> org.geometerplus.a.c.a.e:
org.geometerplus.fbreader.formats.fb2.FB2MetaInfoReader -> org.geometerplus.a.c.a.f:
    org.geometerplus.fbreader.library.Book myBook -> a
    int myReadState -> b
    java.lang.String[] myAuthorNames -> c
    java.lang.StringBuilder myBuffer -> d
    boolean dontCacheAttributeValues() -> a
    boolean readMetaInfo() -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
org.geometerplus.fbreader.formats.fb2.FB2Plugin -> org.geometerplus.a.c.a.g:
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean readMetaInfo(org.geometerplus.fbreader.library.Book) -> a
    boolean readModel(org.geometerplus.fbreader.bookmodel.BookModel) -> a
    org.geometerplus.zlibrary.core.image.ZLImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
org.geometerplus.fbreader.formats.fb2.FB2Reader -> org.geometerplus.a.c.a.h:
    org.geometerplus.fbreader.bookmodel.BookReader myBookReader -> a
    boolean myInsidePoem -> b
    boolean myInsideTitle -> c
    int myBodyCounter -> d
    boolean myReadMainText -> e
    int mySectionDepth -> f
    boolean mySectionStarted -> g
    byte myHyperlinkType -> h
    org.geometerplus.fbreader.formats.fb2.Base64EncodedImage myCurrentImage -> i
    boolean myInsideCoverpage -> j
    java.lang.String myCoverImageReference -> k
    int myParagraphsBeforeBodyNumber -> l
    char[] SPACE -> m
    byte[] myTagStack -> n
    int myTagStackSize -> o
    boolean readBook() -> c
    boolean dontCacheAttributeValues() -> a
    void characterDataHandler(char[],int,int) -> a
    void characterDataHandlerFinal(char[],int,int) -> b
    boolean endElementHandler(java.lang.String) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean processNamespaces() -> b
    void addExternalEntities(java.util.HashMap) -> a
    java.util.List externalDTDs() -> d
org.geometerplus.fbreader.formats.fb2.FB2Tag -> org.geometerplus.a.c.a.i:
    java.util.HashMap ourTagByName -> a
    java.lang.Byte ourUnknownTag -> b
    byte getTagByName(java.lang.String) -> a
org.geometerplus.fbreader.formats.fb2.FB2TagManager -> org.geometerplus.a.c.a.j:
    java.util.HashMap ourMap -> a
    java.util.ArrayList humanReadableTags(java.lang.String) -> a
    java.util.HashMap access$0() -> a
org.geometerplus.fbreader.formats.fb2.FB2TagManager$FB2TagInfoReader -> org.geometerplus.a.c.a.k:
    java.lang.String myLanguage -> a
    org.geometerplus.fbreader.library.Tag myCategoryTag -> b
    org.geometerplus.fbreader.library.Tag mySubCategoryTag -> c
    java.util.ArrayList myGenreIds -> d
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.fbreader.formats.html.HtmlReader -> org.geometerplus.a.c.b.a:
    byte[] myStyleTable -> c
    java.nio.charset.CharsetDecoder myAttributeDecoder -> b
    boolean myInsideTitle -> d
    boolean mySectionStarted -> e
    byte myHyperlinkType -> f
    char[] SPACE -> g
    java.lang.String myHrefAttribute -> h
    boolean myOrderedListIsStarted -> i
    int myOLCounter -> j
    byte[] myControls -> k
    byte myControlsNumber -> l
    java.util.HashMap myEntityMap -> m
    java.nio.charset.CharsetDecoder createDecoder() -> n
    java.io.InputStream getInputStream() -> o
    void startDocumentHandler() -> p
    void endDocumentHandler() -> q
    void byteDataHandler(byte[],int,int) -> b
    void entityDataHandler(java.lang.String) -> d
    void openControl(byte) -> d
    void closeControl(byte) -> e
    void startNewParagraph() -> r
    void endElementHandler(java.lang.String) -> e
    void endElementHandler(byte) -> c
    void startElementHandler(java.lang.String,int,org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap) -> a
    void startElementHandler(byte,int,org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap) -> a
org.geometerplus.fbreader.formats.html.HtmlTag -> org.geometerplus.a.c.b.b:
    java.util.HashMap ourTagByName -> a
    java.lang.Byte ourUnknownTag -> b
    byte getTagByName(java.lang.String) -> a
org.geometerplus.fbreader.formats.oeb.ContainerFileReader -> org.geometerplus.a.c.c.a:
    java.lang.String myRootPath -> a
    java.lang.String getRootPath() -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.formats.oeb.NCXReader -> org.geometerplus.a.c.c.b:
    java.util.TreeMap myNavigationMap -> c
    java.util.ArrayList myPointStack -> d
    int myReadState -> a
    int myPlayIndex -> b
    java.lang.String myLocalPathPrefix -> e
    boolean readFile(java.lang.String) -> b
    java.util.Map navigationMap() -> c
    int atoi(java.lang.String) -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    boolean dontCacheAttributeValues() -> a
org.geometerplus.fbreader.formats.oeb.NCXReader$NavPoint -> org.geometerplus.a.c.c.c:
    int Order -> a
    int Level -> b
    java.lang.String Text -> c
    java.lang.String ContentHRef -> d
org.geometerplus.fbreader.formats.oeb.OEBAnnotationReader -> org.geometerplus.a.c.c.d:
    java.lang.String myDescriptionTag -> a
    int myReadState -> b
    java.lang.StringBuilder myBuffer -> c
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean processNamespaces() -> b
    void namespaceMapChangedHandler(java.util.Map) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void characterDataHandler(char[],int,int) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.fbreader.formats.oeb.OEBBookReader -> org.geometerplus.a.c.c.e:
    char[] Dots -> a
    org.geometerplus.fbreader.bookmodel.BookReader myModelReader -> b
    java.util.HashMap myIdToHref -> c
    java.util.ArrayList myHtmlFileNames -> d
    java.util.ArrayList myTourTOC -> e
    java.util.ArrayList myGuideTOC -> f
    java.lang.String myOPFSchemePrefix -> g
    java.lang.String myFilePrefix -> h
    java.lang.String myNCXTOCFileName -> i
    java.util.TreeMap myFileNumbers -> j
    java.util.TreeMap myTOCLabels -> k
    int myState -> l
    boolean readBook(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.fbreader.bookmodel.BookModel$Label getTOCLabel(java.lang.String) -> b
    void generateTOC() -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    boolean processNamespaces() -> b
    void namespaceMapChangedHandler(java.util.Map) -> a
    boolean dontCacheAttributeValues() -> a
org.geometerplus.fbreader.formats.oeb.OEBCoverBackgroundReader -> org.geometerplus.a.c.c.f:
    org.geometerplus.zlibrary.core.image.ZLFileImage myImage -> a
    java.lang.String myPathPrefix -> b
    java.lang.String myXHTMLPathPrefix -> c
    java.lang.String myCoverXHTML -> d
    boolean myReadGuide -> e
    org.geometerplus.zlibrary.core.image.ZLFileImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    java.lang.String access$0(org.geometerplus.fbreader.formats.oeb.OEBCoverBackgroundReader) -> a
    void access$1(org.geometerplus.fbreader.formats.oeb.OEBCoverBackgroundReader,org.geometerplus.zlibrary.core.image.ZLFileImage) -> a
org.geometerplus.fbreader.formats.oeb.OEBCoverBackgroundReader$XHTMLImageFinder -> org.geometerplus.a.c.c.g:
    org.geometerplus.fbreader.formats.oeb.OEBCoverBackgroundReader this$0 -> a
    boolean processNamespaces() -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.formats.oeb.OEBCoverReader -> org.geometerplus.a.c.c.h:
org.geometerplus.fbreader.formats.oeb.OEBCoverReader$OEBCoverImage -> org.geometerplus.a.c.c.i:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> a
    org.geometerplus.zlibrary.core.image.ZLSingleImage getRealImage() -> a
    int sourceType() -> b
    java.lang.String getId() -> c
org.geometerplus.fbreader.formats.oeb.OEBMetaInfoReader -> org.geometerplus.a.c.c.j:
    org.geometerplus.fbreader.library.Book myBook -> a
    java.lang.String myDCMetadataTag -> b
    java.lang.String myMetadataTag -> c
    java.lang.String myOpfMetadataTag -> d
    java.lang.String myMetadataTagRealName -> e
    java.lang.String myTitleTag -> f
    java.lang.String myAuthorTag -> g
    java.lang.String mySubjectTag -> h
    java.lang.String myLanguageTag -> i
    java.lang.String myMetaTag -> j
    java.lang.String mySeriesTitle -> k
    float mySeriesIndex -> l
    java.util.ArrayList myAuthorList -> m
    java.util.ArrayList myAuthorList2 -> n
    int myReadState -> o
    boolean myReadMetaData -> p
    java.lang.StringBuilder myBuffer -> q
    boolean readMetaInfo(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean processNamespaces() -> b
    void namespaceMapChangedHandler(java.util.Map) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void characterDataHandler(char[],int,int) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.fbreader.formats.oeb.OEBPlugin -> org.geometerplus.a.c.c.k:
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile getOpfFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> d
    boolean readMetaInfo(org.geometerplus.fbreader.library.Book) -> a
    boolean readModel(org.geometerplus.fbreader.bookmodel.BookModel) -> a
    org.geometerplus.zlibrary.core.image.ZLImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
org.geometerplus.fbreader.formats.oeb.Reference -> org.geometerplus.a.c.c.l:
    java.lang.String Title -> a
    java.lang.String HRef -> b
org.geometerplus.fbreader.formats.pdb.DocDecompressor -> org.geometerplus.a.c.d.a:
    int decompress(java.io.InputStream,byte[],int) -> a
org.geometerplus.fbreader.formats.pdb.MobipocketHtmlBookReader -> org.geometerplus.a.c.d.b:
    java.nio.charset.CharsetDecoder myTocDecoder -> c
    org.geometerplus.fbreader.formats.pdb.MobipocketStream myMobipocketStream -> d
    boolean myReadGuide -> e
    int myTocStartOffset -> f
    int myTocEndOffset -> g
    java.util.TreeMap myTocEntries -> h
    java.util.TreeMap myPositionToParagraph -> i
    java.util.TreeSet myFileposReferences -> j
    int myCurrentTocPosition -> k
    org.geometerplus.zlibrary.core.html.ZLByteBuffer myTocBuffer -> l
    java.io.InputStream getInputStream() -> o
    boolean tocRangeContainsPosition(int) -> b
    void startElementHandler(byte,int,org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap) -> a
    void endElementHandler(byte) -> c
    void byteDataHandler(byte[],int,int) -> b
    void startDocumentHandler() -> p
    void endDocumentHandler() -> q
org.geometerplus.fbreader.formats.pdb.MobipocketPlugin -> org.geometerplus.a.c.d.c:
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean readMetaInfo(org.geometerplus.fbreader.library.Book) -> a
    boolean readModel(org.geometerplus.fbreader.bookmodel.BookModel) -> a
    org.geometerplus.zlibrary.core.image.ZLImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
org.geometerplus.fbreader.formats.pdb.MobipocketStream -> org.geometerplus.a.c.d.d:
    int myFileSize -> i
    int myImageStartIndex -> j
    int getImageOffset(int) -> a
    int getImageLength(int) -> b
org.geometerplus.fbreader.formats.pdb.PalmDocLikeStream -> org.geometerplus.a.c.d.e:
    int myMaxRecordIndex -> a
    int myRecordIndex -> b
    int myCompressionType -> c
    long myFileSize -> i
    boolean fillBuffer() -> a
org.geometerplus.fbreader.formats.pdb.PdbHeader -> org.geometerplus.a.c.d.f:
    java.lang.String DocName -> a
    int Flags -> b
    java.lang.String Id -> c
    int[] Offsets -> d
    int length() -> a
org.geometerplus.fbreader.formats.pdb.PdbPlugin -> org.geometerplus.a.c.d.g:
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.lang.String fileType(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> d
org.geometerplus.fbreader.formats.pdb.PdbStream -> org.geometerplus.a.c.d.h:
    org.geometerplus.zlibrary.core.util.ZLInputStreamWithOffset myBase -> d
    org.geometerplus.fbreader.formats.pdb.PdbHeader myHeader -> e
    byte[] myBuffer -> f
    short myBufferLength -> g
    short myBufferOffset -> h
    int read() -> read
    int read(byte[],int,int) -> read
    void close() -> close
    boolean fillBuffer() -> a
org.geometerplus.fbreader.formats.pdb.PdbUtil -> org.geometerplus.a.c.d.i:
    void skip(java.io.InputStream,int) -> a
    int readShort(java.io.InputStream) -> a
    long readInt(java.io.InputStream) -> b
org.geometerplus.fbreader.formats.util.MiscUtil -> org.geometerplus.a.c.e.a:
    java.lang.String htmlDirectoryPrefix(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.lang.String archiveEntryName(java.lang.String) -> a
    boolean isHexDigit(char) -> a
    java.lang.String decodeHtmlReference(java.lang.String) -> b
org.geometerplus.fbreader.formats.xhtml.XHTMLReader -> org.geometerplus.a.c.f.a:
    java.util.HashMap ourTagActions -> f
    org.geometerplus.fbreader.bookmodel.BookReader myModelReader -> g
    java.lang.String myPathPrefix -> a
    java.lang.String myLocalPathPrefix -> b
    java.lang.String myReferencePrefix -> c
    boolean myPreformatted -> d
    boolean myInsideBody -> e
    java.util.Map myFileNumbers -> h
    java.util.ArrayList ourExternalDTDs -> i
    org.geometerplus.fbreader.formats.xhtml.XHTMLTagAction addAction(java.lang.String,org.geometerplus.fbreader.formats.xhtml.XHTMLTagAction) -> a
    org.geometerplus.fbreader.bookmodel.BookReader getModelReader() -> c
    java.lang.String getFileAlias(java.lang.String) -> b
    boolean readFile(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    java.util.List xhtmlDTDs() -> e
    java.util.List externalDTDs() -> d
    boolean dontCacheAttributeValues() -> a
    boolean processNamespaces() -> b
org.geometerplus.fbreader.formats.xhtml.XHTMLTagAction -> org.geometerplus.a.c.f.b:
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagBodyAction -> org.geometerplus.a.c.f.c:
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagControlAction -> org.geometerplus.a.c.f.d:
    byte myControl -> a
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagHyperlinkAction -> org.geometerplus.a.c.f.e:
    byte[] myHyperlinkStack -> a
    int myHyperlinkStackSize -> b
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagImageAction -> org.geometerplus.a.c.f.f:
    java.lang.String myNamespace -> a
    java.lang.String myNameAttribute -> b
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagItemAction -> org.geometerplus.a.c.f.g:
    char[] BULLET -> a
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagParagraphAction -> org.geometerplus.a.c.f.h:
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagParagraphWithControlAction -> org.geometerplus.a.c.f.i:
    byte myControl -> a
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagPreAction -> org.geometerplus.a.c.f.j:
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagRestartParagraphAction -> org.geometerplus.a.c.f.k:
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.library.Author -> org.geometerplus.a.d.a:
    java.lang.String DisplayName -> a
    java.lang.String SortKey -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.library.AuthorTree -> org.geometerplus.a.d.b:
    org.geometerplus.fbreader.library.Author Author -> a
    org.geometerplus.fbreader.library.SeriesTree createSeriesSubTree(java.lang.String) -> a
    java.lang.String getName() -> a
    java.lang.String getSortKey() -> c_
org.geometerplus.fbreader.library.Book -> org.geometerplus.a.d.c:
    org.geometerplus.zlibrary.core.filesystem.ZLFile File -> a
    long myId -> b
    java.lang.String myEncoding -> c
    java.lang.String myLanguage -> d
    java.lang.String myTitle -> e
    java.util.List myAuthors -> f
    java.util.List myTags -> g
    org.geometerplus.fbreader.library.SeriesInfo mySeriesInfo -> h
    boolean myIsSaved -> i
    java.util.Set myVisitedHyperlinks -> j
    org.geometerplus.fbreader.library.Book getById(long) -> a
    org.geometerplus.fbreader.library.Book getByFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    void reloadInfoFromFile() -> a
    void reloadInfoFromDatabase() -> b
    boolean readMetaInfo() -> c
    void loadLists() -> n
    java.util.List authors() -> d
    void addAuthorWithNoCheck(org.geometerplus.fbreader.library.Author) -> a
    void addAuthor(java.lang.String) -> a
    void addAuthor(java.lang.String,java.lang.String) -> a
    long getId() -> e
    java.lang.String getTitle() -> f
    void setTitle(java.lang.String) -> b
    org.geometerplus.fbreader.library.SeriesInfo getSeriesInfo() -> g
    void setSeriesInfoWithNoCheck(java.lang.String,float) -> a
    void setSeriesInfo(java.lang.String,float) -> b
    java.lang.String getLanguage() -> h
    void setLanguage(java.lang.String) -> c
    java.lang.String getEncoding() -> i
    void setEncoding(java.lang.String) -> d
    java.util.List tags() -> j
    void addTagWithNoCheck(org.geometerplus.fbreader.library.Tag) -> a
    void addTag(org.geometerplus.fbreader.library.Tag) -> b
    void addTag(java.lang.String) -> e
    boolean matches(java.lang.String) -> f
    boolean save() -> k
    org.geometerplus.zlibrary.text.view.ZLTextPosition getStoredPosition() -> l
    void storePosition(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    void initHyperlinkSet() -> o
    boolean isHyperlinkVisited(java.lang.String) -> g
    void markHyperlinkAsVisited(java.lang.String) -> h
    void insertIntoBookList() -> m
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    long access$0(org.geometerplus.fbreader.library.Book) -> a
    java.lang.String access$1(org.geometerplus.fbreader.library.Book) -> b
    java.lang.String access$2(org.geometerplus.fbreader.library.Book) -> c
    java.lang.String access$3(org.geometerplus.fbreader.library.Book) -> d
    void access$4(org.geometerplus.fbreader.library.Book,long) -> a
    void access$5(org.geometerplus.fbreader.library.Book) -> e
    org.geometerplus.fbreader.library.SeriesInfo access$6(org.geometerplus.fbreader.library.Book) -> f
org.geometerplus.fbreader.library.Book$1 -> org.geometerplus.a.d.d:
    org.geometerplus.fbreader.library.Book this$0 -> a
    org.geometerplus.fbreader.library.BooksDatabase val$database -> b
    void run() -> run
org.geometerplus.fbreader.library.BookInSeriesTree -> org.geometerplus.a.d.e:
    int compareTo(org.geometerplus.fbreader.tree.FBTree) -> a
org.geometerplus.fbreader.library.BookTree -> org.geometerplus.a.d.f:
    org.geometerplus.fbreader.library.Book Book -> a
    boolean myShowAuthors -> b
    java.lang.String getName() -> a
    java.lang.String getSummary() -> b
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> d
org.geometerplus.fbreader.library.Bookmark -> org.geometerplus.a.d.g:
    long myId -> c
    long myBookId -> d
    java.lang.String myBookTitle -> e
    java.lang.String myText -> f
    java.util.Date myCreationDate -> g
    java.util.Date myModificationDate -> h
    java.util.Date myAccessDate -> i
    int myAccessCount -> m
    java.util.Date myLatestDate -> n
    java.lang.String ModelId -> a
    boolean IsVisible -> b
    boolean myIsChanged -> o
    java.util.List bookmarks() -> a
    java.util.List invisibleBookmarks(org.geometerplus.fbreader.library.Book) -> a
    long getId() -> b
    long getBookId() -> c
    java.lang.String getText() -> d
    java.lang.String getBookTitle() -> e
    java.util.Date getTime(int) -> a
    int getAccessCount() -> f
    void onOpen() -> g
    void save() -> h
    void delete() -> i
    java.lang.String createBookmarkText(org.geometerplus.zlibrary.text.view.ZLTextWordCursor,int) -> a
org.geometerplus.fbreader.library.Bookmark$ByTimeComparator -> org.geometerplus.a.d.h:
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.fbreader.library.BooksDatabase -> org.geometerplus.a.d.i:
    org.geometerplus.fbreader.library.BooksDatabase ourInstance -> a
    org.geometerplus.fbreader.library.BooksDatabase Instance() -> e
    org.geometerplus.fbreader.library.Book createBook(long,long,java.lang.String,java.lang.String,java.lang.String) -> b
    org.geometerplus.fbreader.library.Book createBook(long,org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String,java.lang.String,java.lang.String) -> a
    void addAuthor(org.geometerplus.fbreader.library.Book,org.geometerplus.fbreader.library.Author) -> a
    void addTag(org.geometerplus.fbreader.library.Book,org.geometerplus.fbreader.library.Tag) -> a
    void setSeriesInfo(org.geometerplus.fbreader.library.Book,java.lang.String,float) -> a
    void executeAsATransaction(java.lang.Runnable) -> a
    java.util.Map loadBooks(org.geometerplus.fbreader.library.FileInfoSet) -> a
    org.geometerplus.fbreader.library.Book loadBook(long) -> a
    void reloadBook(org.geometerplus.fbreader.library.Book) -> a
    org.geometerplus.fbreader.library.Book loadBookByFile(long,org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.util.List loadAuthors(long) -> c
    java.util.List loadTags(long) -> e
    org.geometerplus.fbreader.library.SeriesInfo loadSeriesInfo(long) -> f
    void updateBookInfo(long,long,java.lang.String,java.lang.String,java.lang.String) -> a
    long insertBookInfo(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String,java.lang.String,java.lang.String) -> a
    void deleteAllBookAuthors(long) -> b
    void saveBookAuthorInfo(long,long,org.geometerplus.fbreader.library.Author) -> a
    void deleteAllBookTags(long) -> d
    void saveBookTagInfo(long,org.geometerplus.fbreader.library.Tag) -> a
    void saveBookSeriesInfo(long,org.geometerplus.fbreader.library.SeriesInfo) -> a
    org.geometerplus.fbreader.library.FileInfo createFileInfo(long,java.lang.String,org.geometerplus.fbreader.library.FileInfo) -> a
    java.util.Collection loadFileInfos() -> a
    java.util.Collection loadFileInfos(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.util.Collection loadFileInfos(long) -> h
    void removeFileInfo(long) -> g
    void saveFileInfo(org.geometerplus.fbreader.library.FileInfo) -> a
    java.util.List loadRecentBookIds() -> b
    void saveRecentBookIds(java.util.List) -> a
    java.util.List loadFavoritesIds() -> c
    void addToFavorites(long) -> i
    void removeFromFavorites(long) -> j
    org.geometerplus.fbreader.library.Bookmark createBookmark(long,long,java.lang.String,java.lang.String,java.util.Date,java.util.Date,java.util.Date,int,java.lang.String,int,int,int,boolean) -> a
    java.util.List loadBookmarks$4d71d71e(long) -> k
    java.util.List loadAllVisibleBookmarks() -> d
    long saveBookmark(org.geometerplus.fbreader.library.Bookmark) -> a
    void deleteBookmark(org.geometerplus.fbreader.library.Bookmark) -> b
    org.geometerplus.zlibrary.text.view.ZLTextPosition getStoredPosition(long) -> l
    void storePosition(long,org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    boolean insertIntoBookList(long) -> m
    boolean deleteFromBookList(long) -> n
    boolean checkBookList(long) -> o
    java.util.Collection loadVisitedHyperlinks(long) -> p
    void addVisitedHyperlink(long,java.lang.String) -> a
org.geometerplus.fbreader.library.FileInfo -> org.geometerplus.a.d.j:
    java.lang.String Name -> a
    long Id -> b
    long FileSize -> c
org.geometerplus.fbreader.library.FileInfoSet -> org.geometerplus.a.d.k:
    java.util.HashMap myInfosByFile -> a
    java.util.HashMap myFilesByInfo -> b
    java.util.HashMap myInfosByPair -> c
    java.util.HashMap myInfosById -> d
    java.util.LinkedHashSet myInfosToSave -> e
    java.util.LinkedHashSet myInfosToRemove -> f
    void load(java.util.Collection) -> a
    void save() -> a
    boolean check(org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile,boolean) -> a
    java.util.List archiveEntries(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.fbreader.library.FileInfo get(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
    long getId(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    org.geometerplus.zlibrary.core.filesystem.ZLFile getFile(org.geometerplus.fbreader.library.FileInfo) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile getFile(long) -> a
    void removeChildren(org.geometerplus.fbreader.library.FileInfo) -> b
    void addChildren(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> d
    java.util.LinkedHashSet access$0(org.geometerplus.fbreader.library.FileInfoSet) -> a
    java.util.HashMap access$1(org.geometerplus.fbreader.library.FileInfoSet) -> b
    java.util.LinkedHashSet access$2(org.geometerplus.fbreader.library.FileInfoSet) -> c
org.geometerplus.fbreader.library.FileInfoSet$1 -> org.geometerplus.a.d.l:
    org.geometerplus.fbreader.library.FileInfoSet this$0 -> a
    org.geometerplus.fbreader.library.BooksDatabase val$database -> b
    void run() -> run
org.geometerplus.fbreader.library.FileInfoSet$Pair -> org.geometerplus.a.d.m:
    java.lang.String myName -> a
    org.geometerplus.fbreader.library.FileInfo myParent -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.geometerplus.fbreader.library.Library -> org.geometerplus.a.d.n:
    java.util.LinkedList myBooks -> a
    java.util.HashSet myExternalBooks -> b
    org.geometerplus.fbreader.library.LibraryTree myLibraryByAuthor -> c
    org.geometerplus.fbreader.library.LibraryTree myLibraryByTitle -> d
    org.geometerplus.fbreader.library.LibraryTree myLibraryByTag -> e
    org.geometerplus.fbreader.library.LibraryTree myRecentBooks -> f
    org.geometerplus.fbreader.library.LibraryTree myFavorites -> g
    org.geometerplus.fbreader.library.LibraryTree mySearchResult -> h
    int myState -> i
    boolean myInterrupted -> j
    java.util.ArrayList myNullList -> k
    java.util.HashMap ourCoverMap -> l
    java.lang.ref.WeakReference NULL_IMAGE -> m
    boolean hasState$134632() -> a
    void waitForState$13462e() -> b
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile getHelpFile() -> c
    org.geometerplus.fbreader.library.Book getBook(org.geometerplus.zlibrary.core.filesystem.ZLFile,org.geometerplus.fbreader.library.FileInfoSet,java.util.Map,boolean) -> a
    void collectBooks(org.geometerplus.zlibrary.core.filesystem.ZLFile,org.geometerplus.fbreader.library.FileInfoSet,java.util.Map,boolean) -> b
    void collectExternalBooks(org.geometerplus.fbreader.library.FileInfoSet,java.util.Map) -> a
    void collectBooks() -> m
    org.geometerplus.fbreader.library.TagTree getTagTree(org.geometerplus.fbreader.library.Tag,java.util.HashMap) -> a
    void synchronize() -> d
    org.geometerplus.fbreader.library.LibraryTree byAuthor() -> e
    org.geometerplus.fbreader.library.LibraryTree byTitle() -> f
    org.geometerplus.fbreader.library.LibraryTree byTag() -> g
    org.geometerplus.fbreader.library.LibraryTree recentBooks() -> h
    org.geometerplus.fbreader.library.Book getRecentBook() -> i
    org.geometerplus.fbreader.library.Book getPreviousBook() -> j
    org.geometerplus.fbreader.library.LibraryTree favorites() -> k
    org.geometerplus.fbreader.library.LibraryTree searchResults() -> l
    org.geometerplus.fbreader.library.LibraryTree searchBooks(java.lang.String) -> a
    void addBookToRecentList(org.geometerplus.fbreader.library.Book) -> a
    boolean isBookInFavorites(org.geometerplus.fbreader.library.Book) -> b
    void addBookToFavorites(org.geometerplus.fbreader.library.Book) -> c
    void removeBookFromFavorites(org.geometerplus.fbreader.library.Book) -> d
    int getRemoveBookMode(org.geometerplus.fbreader.library.Book) -> e
    void removeBook(org.geometerplus.fbreader.library.Book,int) -> a
    org.geometerplus.zlibrary.core.image.ZLImage getCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.lang.String getAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    java.util.LinkedList access$0(org.geometerplus.fbreader.library.Library) -> a
org.geometerplus.fbreader.library.Library$1 -> org.geometerplus.a.d.o:
    org.geometerplus.fbreader.library.Library this$0 -> a
    void run() -> run
org.geometerplus.fbreader.library.Library$AuthorSeriesPair -> org.geometerplus.a.d.p:
    org.geometerplus.fbreader.library.Author myAuthor -> a
    java.lang.String mySeries -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.library.LibraryTree -> org.geometerplus.a.d.q:
    org.geometerplus.fbreader.library.TagTree createTagSubTree(org.geometerplus.fbreader.library.Tag) -> a
    org.geometerplus.fbreader.library.TitleTree createTitleSubTree(java.lang.String) -> b
    org.geometerplus.fbreader.library.AuthorTree createAuthorSubTree(org.geometerplus.fbreader.library.Author) -> a
    org.geometerplus.fbreader.library.BookTree createBookSubTree(org.geometerplus.fbreader.library.Book,boolean) -> a
    boolean containsBook(org.geometerplus.fbreader.library.Book) -> a
    boolean removeBook(org.geometerplus.fbreader.library.Book) -> b
org.geometerplus.fbreader.library.RootTree -> org.geometerplus.a.d.r:
    java.lang.String getName() -> a
org.geometerplus.fbreader.library.SeriesInfo -> org.geometerplus.a.d.s:
    java.lang.String Name -> a
    float Index -> b
org.geometerplus.fbreader.library.SeriesTree -> org.geometerplus.a.d.t:
    java.lang.String Series -> a
    java.lang.String getName() -> a
    org.geometerplus.fbreader.library.BookTree createBookInSeriesSubTree(org.geometerplus.fbreader.library.Book) -> c
org.geometerplus.fbreader.library.Tag -> org.geometerplus.a.d.u:
    java.util.HashMap ourTagSet -> c
    org.geometerplus.fbreader.library.Tag Parent -> a
    java.lang.String Name -> b
    org.geometerplus.fbreader.library.Tag getTag(org.geometerplus.fbreader.library.Tag,java.lang.String) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.library.TagTree -> org.geometerplus.a.d.v:
    org.geometerplus.fbreader.library.Tag Tag -> a
    java.lang.String getName() -> a
    java.lang.String getSortKey() -> c_
org.geometerplus.fbreader.library.TitleTree -> org.geometerplus.a.d.w:
    java.lang.String Title -> a
    java.lang.String getName() -> a
org.geometerplus.fbreader.network.AbstractNetworkLink -> org.geometerplus.a.e.a:
    int myId -> f
    java.lang.String mySiteName -> a
    java.lang.String myTitle -> b
    java.lang.String mySummary -> c
    java.lang.String myLanguage -> d
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection myInfos -> e
    org.geometerplus.zlibrary.core.options.ZLStringListOption myBooksInBasketOption -> g
    int getId() -> a
    void setId(int) -> a
    java.lang.String getSiteName() -> b
    java.lang.String getTitle() -> c
    java.lang.String getSummary() -> d
    java.lang.String getLanguage() -> e
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection urlInfoMap() -> h_
    java.lang.String getUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfoWithDate getUrlInfo(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> b
    java.util.Set getUrlKeys() -> g
    org.geometerplus.fbreader.network.Basket basket() -> h
    void add(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    void remove(org.geometerplus.fbreader.network.NetworkBookItem) -> b
    void clear() -> i
    boolean contains(org.geometerplus.fbreader.network.NetworkBookItem) -> c
    java.util.List bookIds() -> j
    org.geometerplus.fbreader.network.NetworkOperationData createOperationData(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.Base64EncodedImage -> org.geometerplus.a.e.b:
    java.lang.String myDecodedFileName -> a
    java.lang.String makeImagesDir() -> d
    void setData(java.lang.String) -> a
    boolean isCacheValid(java.io.File) -> a
    java.lang.String encodedFileName() -> b
    java.lang.String decodedFileName() -> c
org.geometerplus.fbreader.network.Basket -> org.geometerplus.a.e.c:
    void add(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    void remove(org.geometerplus.fbreader.network.NetworkBookItem) -> b
    boolean contains(org.geometerplus.fbreader.network.NetworkBookItem) -> c
    java.util.List bookIds() -> j
    void clear() -> i
org.geometerplus.fbreader.network.HtmlUtil -> org.geometerplus.a.e.d:
    java.lang.CharSequence getHtmlText(java.lang.String) -> a
org.geometerplus.fbreader.network.ICustomNetworkLink -> org.geometerplus.a.e.e:
    void setTitle(java.lang.String) -> a
    void setSummary(java.lang.String) -> b
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection urlInfoMap() -> h_
    void setUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type,java.lang.String) -> a
    boolean isObsolete$1349f3() -> g_
    void reloadInfo(boolean) -> a
    boolean hasChanges() -> f_
    void resetChanges() -> k
org.geometerplus.fbreader.network.INetworkLink -> org.geometerplus.a.e.f:
    int getId() -> a
    void setId(int) -> a
    java.lang.String getSiteName() -> b
    java.lang.String getTitle() -> c
    java.lang.String getSummary() -> d
    java.lang.String getUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfoWithDate getUrlInfo(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> b
    java.util.Set getUrlKeys() -> g
    java.lang.String getLanguage() -> e
    org.geometerplus.fbreader.network.NetworkOperationData createOperationData(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest simpleSearchRequest(java.lang.String,org.geometerplus.fbreader.network.NetworkOperationData) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest resume(org.geometerplus.fbreader.network.NetworkOperationData) -> a
    org.geometerplus.fbreader.network.NetworkCatalogItem libraryItem() -> l
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager authenticationManager() -> m
    org.geometerplus.fbreader.network.Basket basket() -> h
    java.lang.String rewriteUrl(java.lang.String,boolean) -> a
org.geometerplus.fbreader.network.IPredefinedNetworkLink -> org.geometerplus.a.e.g:
    java.lang.String getPredefinedId() -> f
org.geometerplus.fbreader.network.NetworkBookItem -> org.geometerplus.a.e.h:
    int Index -> a
    java.lang.String Id -> b
    java.util.LinkedList Authors -> c
    java.util.LinkedList Tags -> d
    java.lang.String SeriesTitle -> e
    float IndexInSeries -> f
    boolean isFullyLoaded() -> a
    void loadFullInformation() -> b
    org.geometerplus.fbreader.network.NetworkCatalogItem createRelatedCatalogItem(org.geometerplus.fbreader.network.urlInfo.RelatedUrlInfo) -> a
    org.geometerplus.fbreader.network.urlInfo.BookUrlInfo reference(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    java.lang.String localCopyFileName() -> c
org.geometerplus.fbreader.network.NetworkBookItem$AuthorData -> org.geometerplus.a.e.i:
    java.lang.String DisplayName -> a
    java.lang.String SortKey -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.fbreader.network.NetworkBookItemComparator -> org.geometerplus.a.e.j:
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.fbreader.network.NetworkCatalogItem -> org.geometerplus.a.e.k:
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility myAccessibility -> a
    int myFlags -> b
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$NetworkCatalogItem$Accessibility -> c
    java.util.Map extraData() -> a
    void loadChildren(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
    boolean supportsResumeLoading() -> b
    void resumeLoading(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> b
    void onDisplayItem() -> c
    int getFlags() -> d
    void setFlags(int) -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3 getVisibility() -> e
    java.lang.String getStringId() -> f
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$NetworkCatalogItem$Accessibility() -> j
org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility -> org.geometerplus.a.e.l:
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility NEVER -> a
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility ALWAYS -> b
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility SIGNED_IN -> c
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility HAS_BOOKS -> d
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility[] ENUM$VALUES -> e
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility[] values() -> values
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.network.NetworkDatabase -> org.geometerplus.a.e.m:
    org.geometerplus.fbreader.network.NetworkDatabase ourInstance -> a
    org.geometerplus.fbreader.network.NetworkDatabase Instance() -> b
    java.util.List listLinks() -> a
    void saveLink(org.geometerplus.fbreader.network.INetworkLink) -> a
    void deleteLink(org.geometerplus.fbreader.network.INetworkLink) -> b
org.geometerplus.fbreader.network.NetworkImage -> org.geometerplus.a.e.n:
    java.lang.String Url -> a
    org.geometerplus.zlibrary.core.image.ZLFileImage myFileImage -> b
    java.lang.String makeImageFilePath(java.lang.String,org.geometerplus.zlibrary.core.util.MimeType) -> a
    java.lang.String getFilePath() -> j
    int sourceType() -> b
    java.lang.String getId() -> c
    java.lang.String getURI() -> e_
    void synchronize() -> d
    void synchronizeFast() -> e
    void synchronizeInternal(boolean) -> a
    java.io.InputStream inputStream() -> f
org.geometerplus.fbreader.network.NetworkItem -> org.geometerplus.a.e.o:
    org.geometerplus.fbreader.network.INetworkLink Link -> g
    java.lang.CharSequence Title -> h
    java.lang.CharSequence mySummary -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection myURLs -> b
    void setSummary(java.lang.CharSequence) -> a
    java.lang.CharSequence getSummary() -> g
    void addUrls(org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection) -> a
    java.util.List getAllInfos() -> h
    java.util.List getAllInfos(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> b
    java.lang.String getUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> c
    java.lang.String getImageUrl() -> i
org.geometerplus.fbreader.network.NetworkLibrary -> org.geometerplus.a.e.p:
    org.geometerplus.fbreader.network.NetworkLibrary ourInstance -> b
    org.geometerplus.zlibrary.core.options.ZLStringOption NetworkSearchPatternOption -> a
    java.util.List myLinks -> c
    org.geometerplus.zlibrary.core.options.ZLStringOption myActiveLanguageCodesOption -> d
    org.geometerplus.fbreader.network.tree.RootTree myRootTree -> e
    org.geometerplus.fbreader.network.tree.RootTree myFakeRootTree -> f
    org.geometerplus.fbreader.network.tree.SearchItemTree mySearchItemTree -> g
    boolean myChildrenAreInvalid -> h
    boolean myUpdateVisibility -> i
    boolean myIsAlreadyInitialized -> j
    java.util.ArrayList myBackgroundLinks -> k
    java.lang.Object myBackgroundLock -> l
    org.geometerplus.fbreader.network.NetworkLibrary Instance() -> a
    java.util.List languageCodes() -> b
    org.geometerplus.zlibrary.core.options.ZLStringOption activeLanguageCodesOption() -> j
    java.util.Collection activeLanguageCodes() -> c
    void setActiveLanguageCodes(java.util.Collection) -> a
    java.lang.String commaSeparatedString(java.util.Collection) -> b
    java.util.List activeLinks() -> k
    void initialize() -> d
    void removeAllLoadedLinks() -> l
    void runBackgroundUpdate(boolean) -> a
    void finishBackgroundUpdate() -> e
    java.lang.String rewriteUrl(java.lang.String,boolean) -> a
    void invalidateVisibility() -> f
    boolean linkIsChanged(org.geometerplus.fbreader.network.INetworkLink) -> a
    void updateVisibility() -> m
    void synchronize() -> g
    org.geometerplus.fbreader.network.NetworkTree getRootTree() -> h
    org.geometerplus.fbreader.network.tree.SearchItemTree getSearchItemTree() -> i
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree getFakeCatalogTree(org.geometerplus.fbreader.network.NetworkCatalogItem) -> a
    org.geometerplus.fbreader.network.NetworkTree getTreeByKey(org.geometerplus.fbreader.network.NetworkTree$Key) -> a
    void simpleSearch(java.lang.String,org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
    void addCustomLink(org.geometerplus.fbreader.network.ICustomNetworkLink) -> a
    void removeCustomLink(org.geometerplus.fbreader.network.ICustomNetworkLink) -> b
    java.util.List access$0(org.geometerplus.fbreader.network.NetworkLibrary) -> a
    java.util.ArrayList access$1(org.geometerplus.fbreader.network.NetworkLibrary) -> b
org.geometerplus.fbreader.network.NetworkLibrary$1 -> org.geometerplus.a.e.q:
    org.geometerplus.fbreader.network.NetworkLibrary this$0 -> a
    void onNewLink(org.geometerplus.fbreader.network.INetworkLink) -> a
org.geometerplus.fbreader.network.NetworkLibrary$2 -> org.geometerplus.a.e.r:
    org.geometerplus.fbreader.network.NetworkLibrary this$0 -> a
    void onNewLink(org.geometerplus.fbreader.network.INetworkLink) -> a
org.geometerplus.fbreader.network.NetworkLibrary$3 -> org.geometerplus.a.e.s:
    org.geometerplus.fbreader.network.NetworkLibrary this$0 -> a
    org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener val$listener -> b
    void onNewItem(org.geometerplus.fbreader.network.INetworkLink,org.geometerplus.fbreader.network.NetworkItem) -> a
    boolean confirmInterrupt() -> a
    void commitItems(org.geometerplus.fbreader.network.INetworkLink) -> a
org.geometerplus.fbreader.network.NetworkLibrary$LinksComparator -> org.geometerplus.a.e.t:
    java.lang.String filterLinkTitle(java.lang.String) -> a
    int languageOrder(java.lang.String) -> b
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.fbreader.network.NetworkLibrary$OnNewLinkListener -> org.geometerplus.a.e.u:
    void onNewLink(org.geometerplus.fbreader.network.INetworkLink) -> a
org.geometerplus.fbreader.network.NetworkOperationData -> org.geometerplus.a.e.v:
    org.geometerplus.fbreader.network.INetworkLink Link -> a
    org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener Listener -> b
    java.lang.String ResumeURI -> c
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest resume() -> a
org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener -> org.geometerplus.a.e.w:
    void onNewItem(org.geometerplus.fbreader.network.INetworkLink,org.geometerplus.fbreader.network.NetworkItem) -> a
    void commitItems(org.geometerplus.fbreader.network.INetworkLink) -> a
    boolean confirmInterrupt() -> a
org.geometerplus.fbreader.network.NetworkTree -> org.geometerplus.a.e.x:
    org.geometerplus.fbreader.network.NetworkTree$Key myKey -> a
    java.util.Map myUserData -> b
    org.geometerplus.zlibrary.core.image.ZLImage createCover(org.geometerplus.fbreader.network.NetworkItem) -> a
    org.geometerplus.fbreader.network.NetworkItem getHoldedItem() -> e
    org.geometerplus.fbreader.network.NetworkTree$Key getUniqueKey() -> f
    void setUserData(java.lang.String,java.lang.Object) -> a
    java.lang.Object getUserData(java.lang.String) -> a
    java.lang.String getStringId() -> g
    void removeItems(java.util.Set) -> a
org.geometerplus.fbreader.network.NetworkTree$Key -> org.geometerplus.a.e.y:
    org.geometerplus.fbreader.network.NetworkTree$Key Parent -> a
    java.lang.String Id -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.NetworkURLCatalogItem -> org.geometerplus.a.e.z:
    java.lang.String getStringId() -> f
org.geometerplus.fbreader.network.SearchResult -> org.geometerplus.a.e.aa:
    java.lang.String Summary -> a
    java.util.LinkedHashMap BooksMap -> b
org.geometerplus.fbreader.network.TopUpItem -> org.geometerplus.a.e.ab:
org.geometerplus.fbreader.network.atom.ATOMAuthor -> org.geometerplus.a.e.a.a:
org.geometerplus.fbreader.network.atom.ATOMCategory -> org.geometerplus.a.e.a.b:
    java.lang.String getTerm() -> a
    java.lang.String getLabel() -> b
org.geometerplus.fbreader.network.atom.ATOMCommonAttributes -> org.geometerplus.a.e.a.c:
    org.geometerplus.zlibrary.core.xml.ZLStringMap myAttributes -> a
    void readAttribute(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    java.lang.String getAttribute(java.lang.String) -> a
    void addAttribute(java.lang.String,java.lang.String) -> a
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMDateConstruct -> org.geometerplus.a.e.a.d:
    int Year -> a
    int Month -> b
    int Day -> c
    int Hour -> d
    int Minutes -> e
    int Seconds -> f
    float SecondFraction -> g
    int TZHour -> h
    int TZMinutes -> i
    int[] DAYS_IN_MONTHS -> j
    boolean parse(java.lang.String,org.geometerplus.fbreader.network.atom.ATOMDateConstruct) -> a
    void appendChars$3fb042fc(java.lang.StringBuilder,int) -> a
    java.lang.String toString() -> toString
    int daysInMonth(int,int) -> a
    int compareTo(org.geometerplus.fbreader.network.atom.ATOMDateConstruct) -> a
    boolean equals(java.lang.Object) -> equals
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.fbreader.network.atom.ATOMEntry -> org.geometerplus.a.e.a.e:
    org.geometerplus.fbreader.network.atom.ATOMId Id -> a
    java.util.LinkedList Authors -> b
    java.util.LinkedList Categories -> c
    java.util.LinkedList Contributors -> d
    java.util.LinkedList Links -> e
    org.geometerplus.fbreader.network.atom.ATOMPublished Published -> f
    java.lang.CharSequence Summary -> g
    java.lang.CharSequence Content -> h
    java.lang.CharSequence Title -> i
    org.geometerplus.fbreader.network.atom.ATOMUpdated Updated -> j
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMFeedHandler -> org.geometerplus.a.e.a.f:
    void processFeedStart() -> a
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
    void processFeedEnd() -> b
org.geometerplus.fbreader.network.atom.ATOMFeedMetadata -> org.geometerplus.a.e.a.g:
    org.geometerplus.fbreader.network.atom.ATOMId Id -> a
    java.util.LinkedList Authors -> b
    java.util.LinkedList Categories -> c
    org.geometerplus.fbreader.network.atom.ATOMIcon Icon -> d
    java.util.LinkedList Links -> e
    java.lang.CharSequence Subtitle -> f
    java.lang.CharSequence Title -> g
    org.geometerplus.fbreader.network.atom.ATOMUpdated Updated -> h
org.geometerplus.fbreader.network.atom.ATOMIcon -> org.geometerplus.a.e.a.h:
    java.lang.String Uri -> a
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMId -> org.geometerplus.a.e.a.i:
    java.lang.String Uri -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMLink -> org.geometerplus.a.e.a.j:
    java.lang.String getHref() -> a
    java.lang.String getRel() -> b
    java.lang.String getType() -> c
    java.lang.String getTitle() -> d
org.geometerplus.fbreader.network.atom.ATOMPersonConstruct -> org.geometerplus.a.e.a.k:
    java.lang.String Name -> a
    java.lang.String Uri -> b
    java.lang.String Email -> c
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMPublished -> org.geometerplus.a.e.a.l:
org.geometerplus.fbreader.network.atom.ATOMUpdated -> org.geometerplus.a.e.a.m:
org.geometerplus.fbreader.network.atom.ATOMXMLReader -> org.geometerplus.a.e.a.n:
    org.geometerplus.fbreader.network.atom.ATOMFeedHandler myFeedHandler -> d
    org.geometerplus.fbreader.network.atom.ATOMFeedMetadata myFeed -> e
    org.geometerplus.fbreader.network.atom.ATOMEntry myEntry -> f
    org.geometerplus.fbreader.network.atom.ATOMAuthor myAuthor -> g
    org.geometerplus.fbreader.network.atom.ATOMId myId -> h
    org.geometerplus.fbreader.network.atom.ATOMLink myLink -> i
    org.geometerplus.fbreader.network.atom.ATOMCategory myCategory -> j
    org.geometerplus.fbreader.network.atom.ATOMUpdated myUpdated -> k
    org.geometerplus.fbreader.network.atom.ATOMPublished myPublished -> l
    org.geometerplus.fbreader.network.atom.ATOMIcon myIcon -> m
    java.util.Map myNamespaceMap -> n
    int myState -> a
    java.lang.StringBuilder myBuffer -> o
    org.geometerplus.fbreader.network.atom.FormattedBuffer myFormattedBuffer -> b
    boolean myFeedMetadataProcessed -> c
    org.geometerplus.fbreader.network.atom.ATOMFeedHandler getATOMFeedHandler() -> c
    org.geometerplus.fbreader.network.atom.ATOMFeedMetadata getATOMFeed() -> e
    org.geometerplus.fbreader.network.atom.ATOMEntry getATOMEntry() -> f
    org.geometerplus.fbreader.network.atom.ATOMLink getATOMLink() -> g
    boolean processNamespaces() -> b
    void namespaceMapChangedHandler(java.util.Map) -> a
    java.lang.String getNamespace(java.lang.String) -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    java.lang.String extractBufferContent() -> h
    org.geometerplus.fbreader.network.atom.ATOMFeedMetadata createFeed(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    org.geometerplus.fbreader.network.atom.ATOMEntry createEntry(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> b
    org.geometerplus.fbreader.network.atom.ATOMLink createLink(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> c
    boolean startElementHandler(java.lang.String,java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String) -> a
    boolean endElementHandler(java.lang.String,java.lang.String,java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    void setFormattingType(java.lang.String) -> c
org.geometerplus.fbreader.network.atom.FormattedBuffer -> org.geometerplus.a.e.a.o:
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type myType -> a
    java.lang.StringBuilder myBuffer -> b
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$atom$FormattedBuffer$Type -> c
    void appendText(java.lang.CharSequence) -> a
    void appendStartTag(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void appendEndTag(java.lang.String) -> a
    void reset(org.geometerplus.fbreader.network.atom.FormattedBuffer$Type) -> a
    void reset() -> a
    java.lang.CharSequence getText() -> b
    java.lang.String toString() -> toString
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$atom$FormattedBuffer$Type() -> c
org.geometerplus.fbreader.network.atom.FormattedBuffer$Type -> org.geometerplus.a.e.a.p:
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type Text -> a
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type Html -> b
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type XHtml -> c
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type[] ENUM$VALUES -> d
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type[] values() -> values
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager -> org.geometerplus.a.e.b.a:
    java.util.HashMap ourManagers -> d
    org.geometerplus.fbreader.network.INetworkLink Link -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption UserNameOption -> b
    java.lang.String SSLCertificate -> c
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager createManager$63066561(org.geometerplus.fbreader.network.INetworkLink,java.lang.Class) -> a
    boolean isAuthorised(boolean) -> a
    void authorise(java.lang.String) -> a
    void logOut() -> a
    org.geometerplus.fbreader.network.urlInfo.BookUrlInfo downloadReference(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    boolean mayBeAuthorised(boolean) -> b
    java.lang.String currentUserName() -> b
    boolean needsInitialization() -> c
    void initialize() -> d
    boolean needPurchase(org.geometerplus.fbreader.network.NetworkBookItem) -> b
    void purchaseBook(org.geometerplus.fbreader.network.NetworkBookItem) -> c
    java.util.List purchasedBooks() -> e
    java.lang.String currentAccount() -> f
    java.lang.String topupLink() -> g
    java.util.Map getTopupData() -> h
org.geometerplus.fbreader.network.authentication.litres.ByAuthorCatalogItem -> org.geometerplus.a.e.b.a.a:
    java.util.Comparator getComparator() -> j
    java.lang.String getStringId() -> f
org.geometerplus.fbreader.network.authentication.litres.ByDateCatalogItem -> org.geometerplus.a.e.b.a.b:
    java.util.Comparator getComparator() -> j
    java.lang.String getStringId() -> f
org.geometerplus.fbreader.network.authentication.litres.BySeriesCatalogItem -> org.geometerplus.a.e.b.a.c:
    java.util.Comparator getComparator() -> j
    boolean accepts(org.geometerplus.fbreader.network.NetworkItem) -> a
    java.lang.String getStringId() -> f
org.geometerplus.fbreader.network.authentication.litres.BySeriesCatalogItem$1 -> org.geometerplus.a.e.b.a.d:
    org.geometerplus.fbreader.network.authentication.litres.BySeriesCatalogItem this$0 -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.fbreader.network.authentication.litres.ByTitleCatalogItem -> org.geometerplus.a.e.b.a.e:
    java.util.Comparator getComparator() -> j
    java.lang.String getStringId() -> f
org.geometerplus.fbreader.network.authentication.litres.ByTitleCatalogItem$1 -> org.geometerplus.a.e.b.a.f:
    org.geometerplus.fbreader.network.authentication.litres.ByTitleCatalogItem this$0 -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.fbreader.network.authentication.litres.LitResAuthenticationManager -> org.geometerplus.a.e.b.a.g:
    boolean myFullyInitialized -> d
    org.geometerplus.zlibrary.core.options.ZLStringOption mySidOption -> e
    org.geometerplus.zlibrary.core.options.ZLStringOption myUserIdOption -> f
    org.geometerplus.zlibrary.core.options.ZLBooleanOption myCanRebillOption -> g
    java.lang.String myInitializedDataSid -> h
    java.lang.String myAccount -> i
    java.util.Map myPurchasedBookMap -> j
    java.util.List myPurchasedBookList -> k
    void initUser(java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    void logOut() -> a
    boolean isAuthorised(boolean) -> a
    void authorise(java.lang.String) -> a
    org.geometerplus.fbreader.network.urlInfo.BookUrlInfo downloadReference(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    java.lang.String currentUserName() -> b
    boolean needPurchase(org.geometerplus.fbreader.network.NetworkBookItem) -> b
    void purchaseBook(org.geometerplus.fbreader.network.NetworkBookItem) -> c
    java.lang.String topupLink() -> g
    java.lang.String currentAccount() -> f
    void reloadPurchasedBooks() -> i
    java.util.List purchasedBooks() -> e
    boolean needsInitialization() -> c
    void initialize() -> d
    org.geometerplus.fbreader.network.authentication.litres.LitResNetworkRequest loadPurchasedBooks() -> j
    void loadPurchasedBooksOnSuccess(org.geometerplus.fbreader.network.authentication.litres.LitResNetworkRequest) -> a
    java.util.Map getTopupData() -> h
org.geometerplus.fbreader.network.authentication.litres.LitResAuthenticationXMLReader -> org.geometerplus.a.e.b.a.h:
    java.lang.String HostName -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkException myException -> b
    void setException(org.geometerplus.zlibrary.core.network.ZLNetworkException) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkException getException() -> c
org.geometerplus.fbreader.network.authentication.litres.LitResBookshelfItem -> org.geometerplus.a.e.b.a.i:
    boolean myForceReload -> a
    void onDisplayItem() -> c
    void loadChildren(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResLoginXMLReader -> org.geometerplus.a.e.b.a.j:
    java.lang.String FirstName -> b
    java.lang.String LastName -> c
    java.lang.String UserId -> d
    java.lang.String Sid -> e
    boolean CanRebill -> f
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResNetworkRequest -> org.geometerplus.a.e.b.a.k:
    org.geometerplus.fbreader.network.authentication.litres.LitResAuthenticationXMLReader Reader -> a
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResPurchaseXMLReader -> org.geometerplus.a.e.b.a.l:
    java.lang.String Account -> b
    java.lang.String BookId -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResRecommendationsItem -> org.geometerplus.a.e.b.a.m:
    java.lang.String getCatalogUrl() -> j
org.geometerplus.fbreader.network.authentication.litres.LitResUtil -> org.geometerplus.a.e.b.a.n:
    java.lang.String url(org.geometerplus.fbreader.network.INetworkLink,java.lang.String) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResXMLReader -> org.geometerplus.a.e.b.a.o:
    org.geometerplus.fbreader.network.opds.OPDSNetworkLink Link -> b
    java.util.List Books -> c
    int myIndex -> d
    java.lang.String myBookId -> e
    java.lang.String myTitle -> f
    java.lang.String mySeriesTitle -> g
    int myIndexInSeries -> h
    java.lang.CharSequence mySummary -> i
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection myUrls -> j
    java.lang.String myAuthorFirstName -> k
    java.lang.String myAuthorMiddleName -> l
    java.lang.String myAuthorLastName -> m
    java.util.LinkedList myAuthors -> n
    java.util.LinkedList myTags -> o
    int myState -> p
    java.lang.StringBuilder myBuffer -> q
    org.geometerplus.fbreader.network.atom.FormattedBuffer myAnnotationBuffer -> r
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
org.geometerplus.fbreader.network.authentication.litres.SortedCatalogItem -> org.geometerplus.a.e.b.a.p:
    java.util.List myChildren -> a
    boolean isEmpty() -> k
    java.util.Comparator getComparator() -> j
    boolean accepts(org.geometerplus.fbreader.network.NetworkItem) -> a
    void onDisplayItem() -> c
    void loadChildren(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
org.geometerplus.fbreader.network.opds.BasketItem -> org.geometerplus.a.e.c.a:
    java.lang.String getCatalogUrl() -> j
org.geometerplus.fbreader.network.opds.DCDate -> org.geometerplus.a.e.c.b:
org.geometerplus.fbreader.network.opds.OPDSBookItem -> org.geometerplus.a.e.c.c:
    boolean myInformationIsFull -> i
    java.lang.CharSequence getAnnotation(org.geometerplus.fbreader.network.opds.OPDSEntry) -> b
    java.util.List getAuthors(org.geometerplus.fbreader.network.opds.OPDSEntry) -> c
    java.util.List getTags(org.geometerplus.fbreader.network.opds.OPDSEntry) -> d
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection getUrls(org.geometerplus.fbreader.network.opds.OPDSNetworkLink,org.geometerplus.fbreader.network.opds.OPDSEntry,java.lang.String) -> b
    void collectReferences(org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection,org.geometerplus.fbreader.network.opds.OPDSLink,java.lang.String,org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type,java.lang.String,boolean) -> a
    int formatByMimeType(org.geometerplus.zlibrary.core.util.MimeType) -> a
    boolean isFullyLoaded() -> a
    void loadFullInformation() -> b
    org.geometerplus.fbreader.network.NetworkCatalogItem createRelatedCatalogItem(org.geometerplus.fbreader.network.urlInfo.RelatedUrlInfo) -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection access$1(org.geometerplus.fbreader.network.opds.OPDSNetworkLink,org.geometerplus.fbreader.network.opds.OPDSEntry,java.lang.String) -> a
    void access$2(org.geometerplus.fbreader.network.opds.OPDSBookItem,org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection) -> a
    java.lang.CharSequence access$3(org.geometerplus.fbreader.network.opds.OPDSEntry) -> a
    void access$4(org.geometerplus.fbreader.network.opds.OPDSBookItem,java.lang.CharSequence) -> a
    void access$5$2db442cc(org.geometerplus.fbreader.network.opds.OPDSBookItem) -> a
org.geometerplus.fbreader.network.opds.OPDSBookItem$1 -> org.geometerplus.a.e.c.d:
    org.geometerplus.fbreader.network.opds.OPDSBookItem this$0 -> a
    java.lang.String val$url -> f
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.opds.OPDSBookItem$SingleEntryFeedHandler -> org.geometerplus.a.e.c.e:
    java.lang.String myUrl -> b
    org.geometerplus.fbreader.network.opds.OPDSBookItem this$0 -> a
    void processFeedStart() -> a
    void processFeedEnd() -> b
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
org.geometerplus.fbreader.network.opds.OPDSCatalogInfoHandler -> org.geometerplus.a.e.c.f:
    boolean FeedStarted -> a
    java.lang.String Icon -> b
    java.lang.CharSequence Title -> c
    java.lang.CharSequence Summary -> d
    org.geometerplus.fbreader.network.opds.OpenSearchDescription DirectOpenSearchDescription -> e
    java.util.List myOpensearchDescriptionURLs -> f
    java.lang.String myBaseURL -> g
    org.geometerplus.fbreader.network.opds.OPDSNetworkLink myLink -> h
    void processFeedStart() -> a
    void processFeedEnd() -> b
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
org.geometerplus.fbreader.network.opds.OPDSCatalogItem -> org.geometerplus.a.e.c.g:
    org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State myLoadingState -> a
    java.util.Map myExtraData -> b
    void doLoadChildren(org.geometerplus.zlibrary.core.network.ZLNetworkRequest) -> a
    java.util.Map extraData() -> a
    java.lang.String getCatalogUrl() -> j
    void loadChildren(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
    boolean supportsResumeLoading() -> b
    void resumeLoading(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> b
org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State -> org.geometerplus.a.e.c.h:
    java.lang.String LastLoadedId -> d
    java.util.HashSet LoadedIds -> e
org.geometerplus.fbreader.network.opds.OPDSCustomNetworkLink -> org.geometerplus.a.e.c.i:
    boolean myHasChanges -> f
    boolean hasChanges() -> f_
    void resetChanges() -> k
    void setSummary(java.lang.String) -> b
    void setTitle(java.lang.String) -> a
    void setUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type,java.lang.String) -> a
    boolean isObsolete$1349f3() -> g_
    void reloadInfo(boolean) -> a
    void access$0(org.geometerplus.fbreader.network.opds.OPDSCustomNetworkLink,java.lang.String) -> a
    void access$1(org.geometerplus.fbreader.network.opds.OPDSCustomNetworkLink,java.lang.String) -> b
org.geometerplus.fbreader.network.opds.OPDSCustomNetworkLink$1 -> org.geometerplus.a.e.c.j:
    org.geometerplus.fbreader.network.opds.OPDSCustomNetworkLink this$0 -> a
    java.util.LinkedList val$opensearchDescriptionURLs -> f
    java.util.List val$descriptions -> g
    boolean val$urlsOnly -> h
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.opds.OPDSCustomNetworkLink$2 -> org.geometerplus.a.e.c.k:
    org.geometerplus.fbreader.network.opds.OPDSCustomNetworkLink this$0 -> a
    java.util.List val$descriptions -> f
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.opds.OPDSEntry -> org.geometerplus.a.e.c.l:
    java.lang.String DCLanguage -> k
    java.lang.String DCPublisher -> l
    org.geometerplus.fbreader.network.opds.DCDate DCIssued -> m
    java.lang.String SeriesTitle -> n
    float SeriesIndex -> o
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.opds.OPDSFeedHandler -> org.geometerplus.a.e.c.m:
    org.geometerplus.fbreader.network.opds.OPDSCatalogItem myCatalog -> a
    java.lang.String myBaseURL -> b
    org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State myData -> c
    int myIndex -> d
    java.lang.String myNextURL -> e
    java.lang.String mySkipUntilId -> f
    boolean myFoundNewIds -> g
    int myItemsToLoad -> h
    void processFeedStart() -> a
    void processFeedEnd() -> b
    boolean tryInterrupt() -> c
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
org.geometerplus.fbreader.network.opds.OPDSFeedMetadata -> org.geometerplus.a.e.c.n:
    int OpensearchTotalResults -> i
    int OpensearchItemsPerPage -> j
    int OpensearchStartIndex -> k
    java.lang.String ViewType -> l
org.geometerplus.fbreader.network.opds.OPDSLink -> org.geometerplus.a.e.c.o:
    java.util.LinkedList Prices -> a
    java.util.LinkedList Formats -> b
    org.geometerplus.fbreader.network.opds.OPDSPrice getPrice(java.lang.String) -> b
    org.geometerplus.fbreader.network.opds.OPDSPrice selectBestPrice() -> e
org.geometerplus.fbreader.network.opds.OPDSLinkReader -> org.geometerplus.a.e.c.p:
    void loadOPDSLinks(int,org.geometerplus.fbreader.network.NetworkLibrary$OnNewLinkListener) -> a
org.geometerplus.fbreader.network.opds.OPDSLinkReader$1 -> org.geometerplus.a.e.c.q:
    org.geometerplus.fbreader.network.NetworkLibrary$OnNewLinkListener val$listener -> a
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.opds.OPDSLinkXMLReader -> org.geometerplus.a.e.c.r:
    org.geometerplus.fbreader.network.atom.ATOMUpdated getUpdatedTime() -> h
    boolean startElementHandler(java.lang.String,java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String) -> a
org.geometerplus.fbreader.network.opds.OPDSLinkXMLReader$FeedHandler -> org.geometerplus.a.e.c.s:
    org.geometerplus.fbreader.network.NetworkLibrary$OnNewLinkListener myListener -> a
    java.lang.String myAuthenticationType -> b
    java.util.LinkedList myUrlRewritingRules -> c
    java.util.HashMap myRelationAliases -> d
    java.util.LinkedHashMap myExtraData -> e
    org.geometerplus.fbreader.network.atom.ATOMUpdated myUpdatedTime -> f
    org.geometerplus.fbreader.network.atom.ATOMUpdated myReadAfterTime -> g
    void setAuthenticationType(java.lang.String) -> a
    void addUrlRewritingRule(org.geometerplus.fbreader.network.opds.URLRewritingRule) -> a
    void addRelationAlias(org.geometerplus.fbreader.network.opds.RelationAlias,java.lang.String) -> a
    void putExtraData(java.lang.String,java.lang.String) -> a
    void clear() -> c
    org.geometerplus.fbreader.network.atom.ATOMUpdated getUpdatedTime() -> d
    void processFeedStart() -> a
    void processFeedEnd() -> b
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
org.geometerplus.fbreader.network.opds.OPDSNetworkLink -> org.geometerplus.a.e.c.t:
    java.util.TreeMap myRelationAliases -> f
    java.util.LinkedList myUrlRewritingRules -> g
    java.util.Map myExtraData -> h
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager myAuthenticationManager -> i
    void setRelationAliases(java.util.Map) -> a
    void setUrlRewritingRules(java.util.List) -> a
    void setExtraData(java.util.Map) -> b
    void setAuthenticationManager(org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest createNetworkData(org.geometerplus.fbreader.network.opds.OPDSCatalogItem,java.lang.String,org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State) -> a
    org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State createOperationData(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> b
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest simpleSearchRequest(java.lang.String,org.geometerplus.fbreader.network.NetworkOperationData) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest resume(org.geometerplus.fbreader.network.NetworkOperationData) -> a
    org.geometerplus.fbreader.network.NetworkCatalogItem libraryItem() -> l
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager authenticationManager() -> m
    java.lang.String rewriteUrl(java.lang.String,boolean) -> a
    java.lang.String relation(java.lang.String,org.geometerplus.zlibrary.core.util.MimeType) -> a
    java.lang.String toString() -> toString
    org.geometerplus.fbreader.network.NetworkOperationData createOperationData(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
org.geometerplus.fbreader.network.opds.OPDSNetworkLink$1 -> org.geometerplus.a.e.c.u:
    org.geometerplus.fbreader.network.opds.OPDSNetworkLink this$0 -> a
    org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State val$result -> f
    org.geometerplus.fbreader.network.opds.OPDSCatalogItem val$catalog -> g
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.opds.OPDSPredefinedNetworkLink -> org.geometerplus.a.e.c.v:
    java.lang.String myPredefinedId -> f
    java.lang.String getPredefinedId() -> f
org.geometerplus.fbreader.network.opds.OPDSPrice -> org.geometerplus.a.e.c.w:
    java.lang.String Price -> a
    java.lang.String Currency -> b
org.geometerplus.fbreader.network.opds.OPDSXMLReader -> org.geometerplus.a.e.c.x:
    org.geometerplus.fbreader.network.opds.DCDate myDCIssued -> d
    java.lang.String myPriceCurrency -> e
    boolean startElementHandler(java.lang.String,java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String) -> a
    boolean endElementHandler(java.lang.String,java.lang.String,java.lang.String) -> a
    org.geometerplus.fbreader.network.atom.ATOMLink createLink(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> c
    org.geometerplus.fbreader.network.atom.ATOMEntry createEntry(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> b
    org.geometerplus.fbreader.network.atom.ATOMFeedMetadata createFeed(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.network.opds.OpenSearchDescription -> org.geometerplus.a.e.c.y:
    java.lang.String Template -> a
    int IndexOffset -> b
    int PageOffset -> c
    int ItemsPerPage -> d
    org.geometerplus.fbreader.network.opds.OpenSearchDescription createDefault(java.lang.String) -> a
    boolean isValid() -> a
    java.lang.String makeQuery(java.lang.String) -> b
org.geometerplus.fbreader.network.opds.OpenSearchXMLReader -> org.geometerplus.a.e.c.z:
    java.util.List myDescriptions -> a
    java.lang.String myBaseURL -> b
    java.lang.String myOpenSearchNamespaceId -> c
    int myState -> d
    boolean processNamespaces() -> b
    void namespaceMapChangedHandler(java.util.Map) -> a
    int parseInt(java.lang.String) -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.fbreader.network.opds.RelationAlias -> org.geometerplus.a.e.c.aa:
    java.lang.String Alias -> a
    java.lang.String Type -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.fbreader.network.opds.URLRewritingRule -> org.geometerplus.a.e.c.ab:
    int myType -> a
    int myApply -> b
    java.util.HashMap myParameters -> c
    int whereToApply() -> a
    java.lang.String apply(java.lang.String) -> a
org.geometerplus.fbreader.network.tree.AddCustomCatalogItemTree -> org.geometerplus.a.e.d.a:
    java.lang.String getName() -> a
    java.lang.String getSummary() -> b
    org.geometerplus.fbreader.network.NetworkItem getHoldedItem() -> e
    java.lang.String getStringId() -> g
org.geometerplus.fbreader.network.tree.NetworkAuthorTree -> org.geometerplus.a.e.d.b:
    org.geometerplus.fbreader.network.NetworkBookItem$AuthorData Author -> a
    int myBooksNumber -> b
    java.util.HashMap mySeriesMap -> c
    java.lang.String getName() -> a
    java.lang.String getSortKey() -> c_
    void updateSubTrees(java.util.LinkedList) -> a
    org.geometerplus.fbreader.network.NetworkItem getHoldedItem() -> e
    java.lang.String getStringId() -> g
org.geometerplus.fbreader.network.tree.NetworkBookTree -> org.geometerplus.a.e.d.c:
    org.geometerplus.fbreader.network.NetworkBookItem Book -> a
    boolean myShowAuthors -> b
    java.lang.String getName() -> a
    java.lang.String getSummary() -> b
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> d
    org.geometerplus.fbreader.network.NetworkItem getHoldedItem() -> e
    java.lang.String getStringId() -> g
org.geometerplus.fbreader.network.tree.NetworkCatalogRootTree -> org.geometerplus.a.e.d.d:
org.geometerplus.fbreader.network.tree.NetworkCatalogTree -> org.geometerplus.a.e.d.e:
    org.geometerplus.fbreader.network.NetworkCatalogItem Item -> a
    java.util.ArrayList ChildrenItems -> b
    long myLoadedTime -> c
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3 -> f
    java.lang.String getName() -> a
    java.lang.String getSummary() -> b
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> d
    boolean isContentValid() -> h
    void updateLoadedTime() -> i
    void updateVisibility() -> j
    org.geometerplus.fbreader.network.NetworkItem getHoldedItem() -> e
    void removeItems(java.util.Set) -> a
    java.lang.String getStringId() -> g
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3() -> t
org.geometerplus.fbreader.network.tree.NetworkSeriesTree -> org.geometerplus.a.e.d.f:
    java.lang.String SeriesTitle -> a
    boolean myShowAuthors -> b
    java.lang.String getName() -> a
    java.lang.String getSummary() -> b
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> d
    org.geometerplus.fbreader.network.NetworkItem getHoldedItem() -> e
    void removeItems(java.util.Set) -> a
    java.lang.String getStringId() -> g
org.geometerplus.fbreader.network.tree.NetworkTreeFactory -> org.geometerplus.a.e.d.g:
    org.geometerplus.fbreader.network.NetworkTree createNetworkTree(org.geometerplus.fbreader.network.tree.NetworkCatalogTree,org.geometerplus.fbreader.network.NetworkItem,int) -> a
org.geometerplus.fbreader.network.tree.RootTree -> org.geometerplus.a.e.d.h:
    java.lang.String myId -> a
    java.lang.String getName() -> a
    org.geometerplus.fbreader.network.NetworkItem getHoldedItem() -> e
    java.lang.String getStringId() -> g
org.geometerplus.fbreader.network.tree.SearchItemTree -> org.geometerplus.a.e.d.i:
    org.geometerplus.fbreader.network.SearchResult myResult -> a
    java.lang.String getName() -> a
    java.lang.String getSummary() -> b
    void setSearchResult(org.geometerplus.fbreader.network.SearchResult) -> a
    org.geometerplus.fbreader.network.SearchResult getSearchResult() -> h
    void updateSubTrees() -> i
    org.geometerplus.fbreader.network.NetworkItem getHoldedItem() -> e
    java.lang.String getStringId() -> g
org.geometerplus.fbreader.network.tree.TopUpTree -> org.geometerplus.a.e.d.j:
    org.geometerplus.fbreader.network.TopUpItem Item -> a
    java.lang.String getName() -> a
    java.lang.String getSummary() -> b
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> d
    java.lang.String getStringId() -> g
    org.geometerplus.fbreader.network.NetworkItem getHoldedItem() -> e
org.geometerplus.fbreader.network.urlInfo.BookBuyUrlInfo -> org.geometerplus.a.e.e.a:
    java.lang.String Price -> a
    java.lang.String price(java.lang.String,java.lang.String) -> a
org.geometerplus.fbreader.network.urlInfo.BookUrlInfo -> org.geometerplus.a.e.e.b:
    int BookFormat -> b
    java.lang.String makeBookFileName(java.lang.String,int,org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    java.lang.String cleanUrl() -> a
    java.lang.String localCopyFileName(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.urlInfo.DecoratedBookUrlInfo -> org.geometerplus.a.e.e.c:
    java.lang.String myCleanUrl -> a
    java.lang.String cleanUrl() -> a
org.geometerplus.fbreader.network.urlInfo.RelatedUrlInfo -> org.geometerplus.a.e.e.d:
    java.lang.String Title -> a
    org.geometerplus.zlibrary.core.util.MimeType Mime -> b
org.geometerplus.fbreader.network.urlInfo.UrlInfo -> org.geometerplus.a.e.e.e:
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type InfoType -> c
    java.lang.String Url -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type -> org.geometerplus.a.e.e.f:
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Catalog -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type HtmlPage -> b
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type SingleEntry -> c
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Related -> d
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Image -> e
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Thumbnail -> f
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Search -> g
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type SignIn -> h
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type SignOut -> i
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type SignUp -> j
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type TopUp -> k
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type RecoverPassword -> l
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Book -> m
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type BookConditional -> n
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type BookDemo -> o
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type BookFullOrDemo -> p
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type BookBuy -> q
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type BookBuyInBrowser -> r
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type TOC -> s
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Comments -> t
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type[] ENUM$VALUES -> u
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type[] values() -> values
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection -> org.geometerplus.a.e.e.g:
    java.util.LinkedList myInfos -> a
    void upgrade(org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection) -> a
    void addInfo(org.geometerplus.fbreader.network.urlInfo.UrlInfo) -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfo getInfo(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    java.util.List getAllInfos() -> a
    java.util.List getAllInfos(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> b
    java.lang.String getUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> c
    void clear() -> b
    void removeAllInfos(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> d
    boolean isEmpty() -> c
org.geometerplus.fbreader.network.urlInfo.UrlInfoWithDate -> org.geometerplus.a.e.e.h:
    org.geometerplus.fbreader.network.urlInfo.UrlInfoWithDate NULL -> a
    java.util.Date Updated -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.tree.FBTree -> org.geometerplus.a.f.a:
    org.geometerplus.zlibrary.core.image.ZLImage myCover -> a
    boolean myCoverRequested -> b
    java.lang.String mySecondString -> c
    java.lang.String getName() -> a
    org.geometerplus.fbreader.tree.FBTree getSubTreeByName(java.lang.String) -> c
    java.lang.String getSortKey() -> c_
    int compareTo(org.geometerplus.fbreader.tree.FBTree) -> a
    void sortAllChildren() -> k
    void invalidateChildren() -> l
    java.lang.String getSecondString() -> m
    java.lang.String getSummary() -> b
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> d
    org.geometerplus.zlibrary.core.image.ZLImage getCover() -> n
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.zlibrary.core.application.ZLApplication -> org.geometerplus.zlibrary.a.a.a:
    org.geometerplus.zlibrary.core.sqliteconfig.SQLiteDB db -> z
    org.geometerplus.zlibrary.core.sqliteconfig.ConnectMysql mysql -> A
    android.speech.tts.TextToSpeech tts -> B
    org.geometerplus.zlibrary.core.sqliteconfig.SyncDB syncdb -> C
    org.geometerplus.zlibrary.core.application.ZLApplication ourInstance -> a
    org.geometerplus.zlibrary.core.application.ZLApplicationWindow myWindow -> b
    org.geometerplus.zlibrary.core.view.ZLView myView -> c
    java.util.HashMap myIdToActionMap -> d
    java.util.HashMap myPopups -> e
    org.geometerplus.zlibrary.core.application.ZLApplication$PopupPanel myActivePopup -> f
    java.util.Timer myTimer -> g
    java.util.HashMap myTimerTaskPeriods -> h
    java.util.HashMap myTimerTasks -> i
    org.geometerplus.zlibrary.core.application.ZLApplication Instance() -> i
    void setView(org.geometerplus.zlibrary.core.view.ZLView) -> a
    org.geometerplus.zlibrary.core.view.ZLView getCurrentView() -> j
    void setWindow(org.geometerplus.zlibrary.core.application.ZLApplicationWindow) -> a
    void initWindow() -> a
    org.geometerplus.zlibrary.core.view.ZLViewWidget getViewWidget() -> k
    void onRepaintFinished() -> l
    void hideActivePopup() -> m
    void showPopup(java.lang.String) -> c
    void addAction(java.lang.String,org.geometerplus.zlibrary.core.application.ZLApplication$ZLAction) -> a
    void removeAction(java.lang.String) -> d
    boolean isActionVisible(java.lang.String) -> e
    boolean isActionEnabled(java.lang.String) -> f
    void doAction(java.lang.String) -> g
    void doActionWithCoordinates(java.lang.String,int,int) -> a
    org.geometerplus.zlibrary.core.application.ZLKeyBindings keyBindings() -> c
    boolean doActionByKey(java.lang.String,boolean) -> a
    void rotateScreen() -> n
    boolean canRotateScreen() -> o
    boolean closeWindow() -> p
    void onWindowClosing() -> f
    void openFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.util.Collection popupPanels() -> q
    org.geometerplus.zlibrary.core.application.ZLApplication$PopupPanel getActivePopup() -> r
    org.geometerplus.zlibrary.core.application.ZLApplication$PopupPanel getPopupById(java.lang.String) -> h
    int getBatteryLevel() -> s
    void addTimerTaskInternal(java.lang.Runnable,long) -> b
    void startTimer() -> t
    void stopTimer() -> u
    void addTimerTask(java.lang.Runnable,long) -> a
    void removeTimerTask(java.lang.Runnable) -> a
    java.util.HashMap access$0(org.geometerplus.zlibrary.core.application.ZLApplication) -> a
org.geometerplus.zlibrary.core.application.ZLApplication$MyTimerTask -> org.geometerplus.zlibrary.a.a.b:
    java.lang.Runnable myRunnable -> a
    void run() -> run
org.geometerplus.zlibrary.core.application.ZLApplication$PopupPanel -> org.geometerplus.zlibrary.a.a.c:
    org.geometerplus.zlibrary.core.application.ZLApplication Application -> c
    java.lang.String getId() -> b
    void update() -> a
    void hide_() -> e
    void show_() -> c
org.geometerplus.zlibrary.core.application.ZLApplication$ZLAction -> org.geometerplus.zlibrary.a.a.d:
    boolean isVisible() -> a_
    boolean isEnabled() -> b
    boolean checkAndRun() -> d
    void run() -> a
    void runWithCoordinates(int,int) -> a
org.geometerplus.zlibrary.core.application.ZLApplicationWindow -> org.geometerplus.zlibrary.a.a.e:
    org.geometerplus.zlibrary.core.application.ZLApplication myApplication -> a
    org.geometerplus.zlibrary.core.application.ZLApplication getApplication() -> a
    void refreshMenu() -> b
    org.geometerplus.zlibrary.core.view.ZLViewWidget getViewWidget() -> c
    void rotate() -> d
    boolean canRotate() -> e
    void close() -> f
    int getBatteryLevel() -> g
org.geometerplus.zlibrary.core.application.ZLKeyBindings -> org.geometerplus.zlibrary.a.a.f:
    java.lang.String myName -> a
    org.geometerplus.zlibrary.core.options.ZLStringListOption myKeysOption -> b
    java.util.TreeMap myActionMap -> c
    java.util.TreeMap myLongPressActionMap -> d
    org.geometerplus.zlibrary.core.options.ZLStringOption createOption(java.lang.String,boolean,java.lang.String) -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption getOption(java.lang.String,boolean) -> a
    java.lang.String getBinding(java.lang.String,boolean) -> b
    java.util.TreeMap access$0(org.geometerplus.zlibrary.core.application.ZLKeyBindings) -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption access$1$2a1ebbf4(org.geometerplus.zlibrary.core.application.ZLKeyBindings,java.lang.String,java.lang.String) -> a
org.geometerplus.zlibrary.core.application.ZLKeyBindings$Reader -> org.geometerplus.zlibrary.a.a.g:
    java.util.List myKeyList -> b
    org.geometerplus.zlibrary.core.application.ZLKeyBindings this$0 -> a
    boolean dontCacheAttributeValues() -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.zlibrary.core.config.ZLConfig -> org.geometerplus.zlibrary.a.b.a:
    org.geometerplus.zlibrary.core.config.ZLConfig ourInstance -> a
    org.geometerplus.zlibrary.core.config.ZLConfig Instance() -> a
    java.util.List listGroups() -> b
    java.util.List listNames(java.lang.String) -> a
    java.lang.String getValue(java.lang.String,java.lang.String,java.lang.String) -> a
    void setValue(java.lang.String,java.lang.String,java.lang.String) -> b
    void unsetValue(java.lang.String,java.lang.String) -> a
    void removeGroup(java.lang.String) -> b
org.geometerplus.zlibrary.core.dialogs.DialogMoveLecture -> org.geometerplus.zlibrary.a.c.a:
    void recordS(int,java.lang.String) -> a
org.geometerplus.zlibrary.core.dialogs.DialogMoveTab -> org.geometerplus.zlibrary.a.c.b:
    org.geometerplus.fbreader.fbreader.FBReaderApp Reader -> a
    org.geometerplus.android.fbreader.FBReader ba -> b
    android.view.WindowManager$LayoutParams p -> c
    java.lang.String DBTextTable -> E
    java.lang.String DBTextRangeTable -> F
    java.lang.String DBTTSTable -> G
    java.lang.String DBRecordTable -> H
    int index -> I
    int page -> J
    java.lang.String user -> K
    int l -> d
    int t -> e
    int r -> f
    int b -> g
    java.lang.String str -> h
    boolean isDialog -> L
    android.widget.LinearLayout editlayout -> i
    android.widget.LinearLayout ws -> j
    android.widget.ImageView iv -> k
    android.widget.TextView textview -> l
    android.widget.EditText edittext -> m
    android.widget.RadioGroup radio -> n
    android.widget.Button saveBtn -> o
    android.widget.Button cancelBtn -> p
    android.widget.Button voiceBtn -> q
    android.widget.Button vRecordBtn -> r
    android.widget.Button vPlayBtn -> s
    android.widget.Button vStopBtn -> t
    android.widget.Button color_r -> u
    android.widget.Button color_o -> v
    android.widget.Button color_y -> w
    android.widget.Button color_g -> x
    android.widget.Button color_b -> y
    android.widget.Button color_gray -> z
    android.view.inputmethod.InputMethodManager imm -> M
    android.media.MediaRecorder mediaRecorder -> N
    android.media.MediaPlayer mediaPlayer -> O
    java.lang.String fileName -> P
    java.lang.String userName -> Q
    int Notestyle -> R
    int Notestyle_r -> S
    int Notestyle_g -> T
    int Notestyle_b -> U
    java.lang.String noteString -> A
    boolean IschangeTab -> B
    java.lang.String strWord -> C
    android.widget.TabHost tabHost -> V
    android.media.MediaPlayer$OnCompletionListener playerlistener -> D
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setContentView(android.view.View) -> setContentView
    void setViewColor(android.widget.Button,int,int,int) -> a
    void setLocation$255f295(int) -> a
    void saveEditText() -> a
    void delEditText() -> b
    void recordSetting(java.lang.String) -> a
    boolean isRecord() -> c
    void setFBReaderApp(org.geometerplus.fbreader.fbreader.FBReaderApp) -> a
    void setFBReader(org.geometerplus.android.fbreader.FBReader) -> a
    void isNowRecord() -> d
    int access$0(org.geometerplus.zlibrary.core.dialogs.DialogMoveTab) -> a
    java.lang.String access$1(org.geometerplus.zlibrary.core.dialogs.DialogMoveTab) -> b
    android.view.inputmethod.InputMethodManager access$2(org.geometerplus.zlibrary.core.dialogs.DialogMoveTab) -> c
    void access$3$5213c060(org.geometerplus.zlibrary.core.dialogs.DialogMoveTab,int) -> a
    void access$4(org.geometerplus.zlibrary.core.dialogs.DialogMoveTab) -> d
    boolean access$5(org.geometerplus.zlibrary.core.dialogs.DialogMoveTab) -> e
    java.lang.String access$6(org.geometerplus.zlibrary.core.dialogs.DialogMoveTab) -> f
    int access$7(org.geometerplus.zlibrary.core.dialogs.DialogMoveTab) -> g
    void access$8(org.geometerplus.zlibrary.core.dialogs.DialogMoveTab) -> h
    void access$9(org.geometerplus.zlibrary.core.dialogs.DialogMoveTab,int) -> b
    void access$10(org.geometerplus.zlibrary.core.dialogs.DialogMoveTab,int) -> c
    void access$11(org.geometerplus.zlibrary.core.dialogs.DialogMoveTab,int) -> d
    int access$12(org.geometerplus.zlibrary.core.dialogs.DialogMoveTab) -> i
    void access$13(org.geometerplus.zlibrary.core.dialogs.DialogMoveTab,int) -> e
    void access$14(org.geometerplus.zlibrary.core.dialogs.DialogMoveTab) -> j
    void access$15(org.geometerplus.zlibrary.core.dialogs.DialogMoveTab) -> k
    void access$16(org.geometerplus.zlibrary.core.dialogs.DialogMoveTab) -> l
    void access$17(org.geometerplus.zlibrary.core.dialogs.DialogMoveTab) -> m
    void access$18(org.geometerplus.zlibrary.core.dialogs.DialogMoveTab) -> n
    void access$19$5830ad2c(org.geometerplus.zlibrary.core.dialogs.DialogMoveTab) -> o
org.geometerplus.zlibrary.core.dialogs.DialogMoveTab$1 -> org.geometerplus.zlibrary.a.c.c:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTab this$0 -> a
    void onCompletion(android.media.MediaPlayer) -> onCompletion
org.geometerplus.zlibrary.core.dialogs.DialogMoveTab$10 -> org.geometerplus.zlibrary.a.c.d:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTab this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTab$11 -> org.geometerplus.zlibrary.a.c.e:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTab this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTab$12 -> org.geometerplus.zlibrary.a.c.f:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTab this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTab$13 -> org.geometerplus.zlibrary.a.c.g:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTab this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTab$14 -> org.geometerplus.zlibrary.a.c.h:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTab this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTab$15 -> org.geometerplus.zlibrary.a.c.i:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTab this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTab$16 -> org.geometerplus.zlibrary.a.c.j:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTab this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTab$17 -> org.geometerplus.zlibrary.a.c.k:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTab this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTab$18 -> org.geometerplus.zlibrary.a.c.l:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTab this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTab$19 -> org.geometerplus.zlibrary.a.c.m:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTab this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTab$2 -> org.geometerplus.zlibrary.a.c.n:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTab this$0 -> a
    android.widget.TabHost val$tabHost -> b
    void onTabChanged(java.lang.String) -> onTabChanged
org.geometerplus.zlibrary.core.dialogs.DialogMoveTab$3 -> org.geometerplus.zlibrary.a.c.o:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTab this$0 -> a
    int val$r -> b
    int val$g -> c
    int val$b -> d
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTab$4 -> org.geometerplus.zlibrary.a.c.p:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTab this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
org.geometerplus.zlibrary.core.dialogs.DialogMoveTab$5 -> org.geometerplus.zlibrary.a.c.q:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTab this$0 -> a
    void onCheckedChanged(android.widget.RadioGroup,int) -> onCheckedChanged
org.geometerplus.zlibrary.core.dialogs.DialogMoveTab$6 -> org.geometerplus.zlibrary.a.c.r:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTab this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTab$7 -> org.geometerplus.zlibrary.a.c.s:
    android.view.WindowManager$LayoutParams p -> a
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTab this$0 -> b
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void dialogMove(float,float) -> a
org.geometerplus.zlibrary.core.dialogs.DialogMoveTab$8 -> org.geometerplus.zlibrary.a.c.t:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTab this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTab$9 -> org.geometerplus.zlibrary.a.c.u:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTab this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic -> org.geometerplus.zlibrary.a.c.v:
    org.geometerplus.fbreader.fbreader.FBReaderApp Reader -> a
    android.view.WindowManager$LayoutParams p -> b
    java.lang.String DBImageTable -> y
    java.lang.String recordTable -> z
    java.lang.String annoType -> A
    int index -> c
    int page -> B
    java.lang.String user -> C
    int l -> d
    int t -> e
    java.lang.String str -> f
    boolean isDialog -> D
    android.widget.LinearLayout editlayout -> g
    android.widget.ImageView iv -> h
    android.widget.TextView textview -> i
    android.widget.EditText edittext -> j
    android.widget.Button saveBtn -> k
    android.widget.Button cancelBtn -> l
    android.widget.Button vRecordBtn -> m
    android.widget.Button vPlayBtn -> n
    android.widget.Button vStopBtn -> o
    android.view.inputmethod.InputMethodManager imm -> p
    android.media.MediaRecorder mediaRecorder -> q
    android.media.MediaPlayer mediaPlayer -> r
    java.lang.String fileName -> s
    java.lang.String userName -> t
    boolean IschangeTab -> u
    java.lang.String strWord -> v
    android.widget.TabHost tabHost -> w
    android.media.MediaPlayer$OnCompletionListener playerlistener -> x
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setContentView(android.view.View) -> setContentView
    void setLocation$255f295(int) -> a
    void saveEditText() -> a
    void delEditText() -> b
    void recordStart() -> c
    void recordSetting(java.lang.String) -> b
    boolean isRecord() -> d
    void setFBReaderApp(org.geometerplus.fbreader.fbreader.FBReaderApp) -> a
    void isNowRecord() -> e
    void changeDbTable(java.lang.String) -> a
    java.lang.String access$0(org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic) -> a
    java.lang.String access$1(org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic) -> b
    void access$2(org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic) -> c
    boolean access$3(org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic) -> d
    void access$4(org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic) -> e
    void access$5(org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic) -> f
    void access$6(org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic) -> g
    void access$7(org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic) -> h
    void access$8$54e64152(org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic) -> i
org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic$1 -> org.geometerplus.zlibrary.a.c.w:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic this$0 -> a
    void onCompletion(android.media.MediaPlayer) -> onCompletion
org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic$10 -> org.geometerplus.zlibrary.a.c.x:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic$11 -> org.geometerplus.zlibrary.a.c.y:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic$12 -> org.geometerplus.zlibrary.a.c.z:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic$13 -> org.geometerplus.zlibrary.a.c.aa:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic$14 -> org.geometerplus.zlibrary.a.c.ab:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic$15 -> org.geometerplus.zlibrary.a.c.ac:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic$16 -> org.geometerplus.zlibrary.a.c.ad:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic$2 -> org.geometerplus.zlibrary.a.c.ae:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic this$0 -> a
    android.widget.TabHost val$tabHost -> b
    void onTabChanged(java.lang.String) -> onTabChanged
org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic$3 -> org.geometerplus.zlibrary.a.c.af:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic$4 -> org.geometerplus.zlibrary.a.c.ag:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic$5 -> org.geometerplus.zlibrary.a.c.ah:
    android.view.WindowManager$LayoutParams p -> a
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic this$0 -> b
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void dialogMove(float,float) -> a
org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic$6 -> org.geometerplus.zlibrary.a.c.ai:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic$7 -> org.geometerplus.zlibrary.a.c.aj:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic$8 -> org.geometerplus.zlibrary.a.c.ak:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic$9 -> org.geometerplus.zlibrary.a.c.al:
    org.geometerplus.zlibrary.core.dialogs.DialogMoveTabPic this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.core.dialogs.ZLDialogManager -> org.geometerplus.zlibrary.a.c.am:
    org.geometerplus.zlibrary.core.dialogs.ZLDialogManager ourInstance -> a
    org.geometerplus.zlibrary.core.dialogs.ZLDialogManager Instance() -> a
    void wait(java.lang.String,java.lang.Runnable) -> a
org.geometerplus.zlibrary.core.encoding.ZLEncodingCollection -> org.geometerplus.zlibrary.a.d.a:
    org.geometerplus.zlibrary.core.encoding.ZLEncodingCollection ourInstance -> a
    java.util.HashMap myEncodingByAlias -> b
    org.geometerplus.zlibrary.core.encoding.ZLEncodingCollection Instance() -> a
    java.lang.String getEncodingName(int) -> a
    java.util.HashMap access$0(org.geometerplus.zlibrary.core.encoding.ZLEncodingCollection) -> a
org.geometerplus.zlibrary.core.encoding.ZLEncodingCollection$ZLEncodingCollectionReader -> org.geometerplus.zlibrary.a.d.b:
    java.lang.String myCurrentEncodingName -> b
    org.geometerplus.zlibrary.core.encoding.ZLEncodingCollection this$0 -> a
    boolean dontCacheAttributeValues() -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.zlibrary.core.filesystem.ZLArchiveEntryFile -> org.geometerplus.zlibrary.a.e.a:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myParent -> a
    java.lang.String myName -> b
    java.lang.String normalizeEntryName(java.lang.String) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLArchiveEntryFile createArchiveEntryFile(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String) -> a
    java.util.List archiveEntries(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean exists() -> a
    boolean isDirectory() -> b
    java.lang.String getPath() -> c
    java.lang.String getLongName() -> d
    org.geometerplus.zlibrary.core.filesystem.ZLFile getParent() -> e
    org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile getPhysicalFile() -> f
org.geometerplus.zlibrary.core.filesystem.ZLFile -> org.geometerplus.zlibrary.a.e.b:
    java.util.HashMap ourCachedFiles -> a
    java.lang.String myExtension -> b
    java.lang.String myShortName -> d
    int myArchiveType -> c
    boolean myIsCached -> e
    void init() -> g
    org.geometerplus.zlibrary.core.filesystem.ZLFile createFile(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String) -> b
    org.geometerplus.zlibrary.core.filesystem.ZLFile createFileByPath(java.lang.String) -> b
    long size() -> h
    boolean exists() -> a
    boolean isDirectory() -> b
    java.lang.String getPath() -> c
    org.geometerplus.zlibrary.core.filesystem.ZLFile getParent() -> e
    org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile getPhysicalFile() -> f
    java.io.InputStream getInputStream() -> i
    boolean isReadable() -> j
    boolean isArchive() -> k
    java.lang.String getLongName() -> d
    java.lang.String getShortName() -> l
    java.lang.String getExtension() -> m
    java.util.List directoryEntries() -> n
    java.util.List children() -> o
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean isCached() -> p
    void setCached(boolean) -> a
org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile -> org.geometerplus.zlibrary.a.e.c:
    java.io.File myFile -> a
    boolean exists() -> a
    long size() -> h
    boolean isDirectory() -> b
    boolean isReadable() -> j
    boolean delete() -> q
    java.lang.String getPath() -> c
    java.lang.String getLongName() -> d
    org.geometerplus.zlibrary.core.filesystem.ZLFile getParent() -> e
    org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile getPhysicalFile() -> f
    java.io.InputStream getInputStream() -> i
    java.util.List directoryEntries() -> n
org.geometerplus.zlibrary.core.filesystem.ZLResourceFile -> org.geometerplus.zlibrary.a.e.d:
    java.lang.String myPath -> a
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile createResourceFile(java.lang.String) -> a
    java.lang.String getPath() -> c
    java.lang.String getLongName() -> d
    org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile getPhysicalFile() -> f
org.geometerplus.zlibrary.core.filesystem.ZLZipEntryFile -> org.geometerplus.zlibrary.a.e.e:
    java.util.HashMap ourZipFileMap -> d
    java.util.List archiveEntries(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    org.amse.ys.zip.ZipFile getZipFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> d
    void removeFromCache(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
    long size() -> h
    java.io.InputStream getInputStream() -> i
org.geometerplus.zlibrary.core.filesystem.ZLZipEntryFile$1 -> org.geometerplus.zlibrary.a.e.f:
    org.geometerplus.zlibrary.core.filesystem.ZLFile val$file -> a
    java.io.InputStream getInputStream() -> a
org.geometerplus.zlibrary.core.filesystem.tar.ZLTarEntryFile -> org.geometerplus.zlibrary.a.e.a.a:
    java.util.List archiveEntries(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    long size() -> h
    java.io.InputStream getInputStream() -> i
org.geometerplus.zlibrary.core.filesystem.tar.ZLTarHeader -> org.geometerplus.zlibrary.a.e.a.b:
    java.lang.String Name -> a
    int Size -> b
    boolean IsRegularFile -> c
    java.lang.String getStringFromByteArray(byte[]) -> a
    boolean read(java.io.InputStream) -> a
org.geometerplus.zlibrary.core.filesystem.tar.ZLTarInputStream -> org.geometerplus.zlibrary.a.e.a.c:
    java.io.InputStream myBase -> a
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    int available() -> available
org.geometerplus.zlibrary.core.html.ZLByteBuffer -> org.geometerplus.zlibrary.a.f.a:
    byte[] myData -> a
    int myLength -> b
    java.lang.Object myConverterLock -> c
    char[] myConverterBuffer -> d
    java.lang.String myStringValue -> e
    boolean isEmpty() -> a
    void append(byte[],int,int) -> a
    void clear() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean equalsToLCString(java.lang.String) -> a
    java.lang.String toString(java.nio.charset.CharsetDecoder) -> a
    java.lang.String toString() -> toString
org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap -> org.geometerplus.zlibrary.a.f.b:
    org.geometerplus.zlibrary.core.html.ZLByteBuffer[] myKeys -> a
    org.geometerplus.zlibrary.core.html.ZLByteBuffer[] myValues -> b
    int mySize -> c
    void put(org.geometerplus.zlibrary.core.html.ZLByteBuffer,org.geometerplus.zlibrary.core.html.ZLByteBuffer) -> a
    org.geometerplus.zlibrary.core.html.ZLByteBuffer getValue(java.lang.String) -> a
    void clear() -> a
org.geometerplus.zlibrary.core.html.ZLHtmlParser -> org.geometerplus.zlibrary.a.f.c:
    org.geometerplus.zlibrary.core.html.ZLHtmlReader myReader -> a
    java.io.InputStream myStream -> b
    org.geometerplus.zlibrary.core.html.ZLByteBuffer unique(java.util.HashMap,org.geometerplus.zlibrary.core.html.ZLByteBuffer) -> a
    void doIt() -> a
    void processStartTag(org.geometerplus.zlibrary.core.html.ZLHtmlReader,org.geometerplus.zlibrary.core.html.ZLByteBuffer,int,org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap) -> a
    void processEndTag(org.geometerplus.zlibrary.core.html.ZLHtmlReader,org.geometerplus.zlibrary.core.html.ZLByteBuffer) -> a
org.geometerplus.zlibrary.core.html.ZLHtmlProcessor -> org.geometerplus.zlibrary.a.f.d:
    boolean read(org.geometerplus.zlibrary.core.html.ZLHtmlReader,java.io.InputStream) -> a
org.geometerplus.zlibrary.core.html.ZLHtmlReader -> org.geometerplus.zlibrary.a.f.e:
    void startDocumentHandler() -> p
    void endDocumentHandler() -> q
    void startElementHandler(java.lang.String,int,org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap) -> a
    void endElementHandler(java.lang.String) -> e
    void byteDataHandler(byte[],int,int) -> b
    void entityDataHandler(java.lang.String) -> d
org.geometerplus.zlibrary.core.image.ZLBase64EncodedImage -> org.geometerplus.zlibrary.a.g.a:
    boolean myIsDecoded -> a
    byte decodeByte(byte) -> a
    java.lang.String getURI() -> e_
    java.lang.String encodedFileName() -> b
    java.lang.String decodedFileName() -> c
    boolean isCacheValid(java.io.File) -> a
    void decode() -> d
    java.io.InputStream inputStream() -> f
org.geometerplus.zlibrary.core.image.ZLFileImage -> org.geometerplus.zlibrary.a.g.b:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> a
    int myOffset -> b
    int myLength -> c
    java.lang.String getURI() -> e_
    java.io.InputStream inputStream() -> f
org.geometerplus.zlibrary.core.image.ZLImage -> org.geometerplus.zlibrary.a.g.c:
    java.lang.String getURI() -> e_
org.geometerplus.zlibrary.core.image.ZLImageData -> org.geometerplus.zlibrary.a.g.d:
org.geometerplus.zlibrary.core.image.ZLImageManager -> org.geometerplus.zlibrary.a.g.e:
    org.geometerplus.zlibrary.core.image.ZLImageManager ourInstance -> b
    int[][] PalmImage8bitColormap -> a
    org.geometerplus.zlibrary.core.image.ZLImageManager Instance() -> a
    org.geometerplus.zlibrary.core.image.ZLImageData getImageData(org.geometerplus.zlibrary.core.image.ZLImage) -> a
    void startImageLoading(org.geometerplus.zlibrary.core.image.ZLLoadableImage,java.lang.Runnable) -> a
org.geometerplus.zlibrary.core.image.ZLImageMap -> org.geometerplus.zlibrary.a.g.f:
    org.geometerplus.zlibrary.core.image.ZLImage getImage(java.lang.String) -> a
org.geometerplus.zlibrary.core.image.ZLImageProxy -> org.geometerplus.zlibrary.a.g.g:
    org.geometerplus.zlibrary.core.image.ZLSingleImage myImage -> a
    org.geometerplus.zlibrary.core.image.ZLSingleImage getRealImage() -> a
    java.lang.String getURI() -> e_
    java.io.InputStream inputStream() -> f
    void synchronize() -> d
    void synchronizeFast() -> e
org.geometerplus.zlibrary.core.image.ZLLoadableImage -> org.geometerplus.zlibrary.a.g.h:
    boolean myIsSynchronized -> a
    boolean isSynchronized() -> g
    void setSynchronized() -> h
    void startSynchronization(java.lang.Runnable) -> a
    int sourceType() -> b
    void synchronize() -> d
    void synchronizeFast() -> e
    java.lang.String getId() -> c
org.geometerplus.zlibrary.core.image.ZLSingleImage -> org.geometerplus.zlibrary.a.g.i:
    org.geometerplus.zlibrary.core.util.MimeType myMimeType -> a
    java.io.InputStream inputStream() -> f
    org.geometerplus.zlibrary.core.util.MimeType mimeType() -> i
org.geometerplus.zlibrary.core.language.ZLLanguageUtil -> org.geometerplus.zlibrary.a.h.a:
    java.util.ArrayList ourLanguageCodes -> a
    java.util.List languageCodes() -> a
    java.lang.String languageName(java.lang.String) -> a
    java.lang.String languageByIntCode(int,int) -> a
org.geometerplus.zlibrary.core.language.ZLLanguageUtil$CodeComparator -> org.geometerplus.zlibrary.a.h.b:
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.zlibrary.core.library.ZLibrary -> org.geometerplus.zlibrary.a.i.a:
    org.geometerplus.zlibrary.core.library.ZLibrary ourImplementation -> a
    org.geometerplus.zlibrary.core.library.ZLibrary Instance() -> a
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile createResourceFile(java.lang.String) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile createResourceFile(org.geometerplus.zlibrary.core.filesystem.ZLResourceFile,java.lang.String) -> a
    java.lang.String getVersionName() -> b
    void setScreenBrightness(int) -> a
    int getScreenBrightness() -> c
    int getDisplayDPI() -> d
    java.util.Collection defaultLanguageCodes() -> e
org.geometerplus.zlibrary.core.network.CookieDatabase -> org.geometerplus.zlibrary.a.j.a:
    org.geometerplus.zlibrary.core.network.CookieDatabase ourInstance -> a
    org.geometerplus.zlibrary.core.network.CookieDatabase getInstance() -> a
    void saveCookies(java.util.Collection) -> a
    java.util.Collection loadCookies() -> b
org.geometerplus.zlibrary.core.network.ZLNetworkException -> org.geometerplus.zlibrary.a.j.b:
    java.lang.String myCode -> a
    org.geometerplus.zlibrary.core.resources.ZLResource getResource() -> b
    java.lang.String getCode() -> a
org.geometerplus.zlibrary.core.network.ZLNetworkManager -> org.geometerplus.zlibrary.a.j.c:
    org.geometerplus.zlibrary.core.network.ZLNetworkManager ourManager -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkManager$CredentialsCreator myCredentialsCreator -> b
    org.apache.http.protocol.HttpContext myHttpContext -> c
    org.apache.http.client.CookieStore myCookieStore -> d
    org.geometerplus.zlibrary.core.network.ZLNetworkManager Instance() -> a
    void setCredentialsCreator(org.geometerplus.zlibrary.core.network.ZLNetworkManager$CredentialsCreator) -> a
    void perform(org.geometerplus.zlibrary.core.network.ZLNetworkRequest) -> a
    void perform(java.util.List) -> a
    void downloadToFile(java.lang.String,java.io.File) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkManager$CredentialsCreator access$0(org.geometerplus.zlibrary.core.network.ZLNetworkManager) -> a
org.geometerplus.zlibrary.core.network.ZLNetworkManager$1 -> org.geometerplus.zlibrary.a.j.d:
    boolean myIsInitialized -> b
    org.geometerplus.zlibrary.core.network.ZLNetworkManager this$0 -> a
    void addCookie(org.apache.http.cookie.Cookie) -> addCookie
    void addCookies(org.apache.http.cookie.Cookie[]) -> addCookies
    void clear() -> clear
    java.util.List getCookies() -> getCookies
org.geometerplus.zlibrary.core.network.ZLNetworkManager$2 -> org.geometerplus.zlibrary.a.j.e:
    org.geometerplus.zlibrary.core.network.ZLNetworkManager this$0 -> a
    java.io.File val$outFile -> f
    int val$bufferSize -> g
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.zlibrary.core.network.ZLNetworkManager$CredentialsCreator -> org.geometerplus.zlibrary.a.j.f:
    org.apache.http.auth.Credentials createCredentials(java.lang.String,org.apache.http.auth.AuthScope) -> a
org.geometerplus.zlibrary.core.network.ZLNetworkManager$MyCredentialsProvider -> org.geometerplus.zlibrary.a.j.g:
    org.apache.http.client.methods.HttpUriRequest myRequest -> b
    org.geometerplus.zlibrary.core.network.ZLNetworkManager this$0 -> a
    org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope) -> getCredentials
org.geometerplus.zlibrary.core.network.ZLNetworkRequest -> org.geometerplus.zlibrary.a.j.h:
    java.lang.String URL -> b
    java.lang.String SSLCertificate -> c
    java.lang.String PostData -> d
    java.util.Map PostParameters -> e
    void addPostParameter(java.lang.String,java.lang.String) -> a
    java.lang.String getURL() -> a
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.zlibrary.core.options.ZLBoolean3Option -> org.geometerplus.zlibrary.a.k.a:
    org.geometerplus.zlibrary.core.util.ZLBoolean3 myValue -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3 myDefaultValue -> b
    org.geometerplus.zlibrary.core.util.ZLBoolean3 getValue() -> a
    void setValue(org.geometerplus.zlibrary.core.util.ZLBoolean3) -> a
org.geometerplus.zlibrary.core.options.ZLBooleanOption -> org.geometerplus.zlibrary.a.k.b:
    boolean myDefaultValue -> a
    boolean myValue -> b
    boolean getValue() -> a
    void setValue(boolean) -> a
org.geometerplus.zlibrary.core.options.ZLColorOption -> org.geometerplus.zlibrary.a.k.c:
    org.geometerplus.zlibrary.core.util.ZLColor myDefaultValue -> a
    org.geometerplus.zlibrary.core.util.ZLColor myValue -> b
    org.geometerplus.zlibrary.core.util.ZLColor getValue() -> a
    void setValue(org.geometerplus.zlibrary.core.util.ZLColor) -> a
org.geometerplus.zlibrary.core.options.ZLEnumOption -> org.geometerplus.zlibrary.a.k.d:
    java.lang.Enum myDefaultValue -> a
    java.lang.Enum myValue -> b
    java.lang.Enum getValue() -> a
    void setValue(java.lang.Enum) -> a
org.geometerplus.zlibrary.core.options.ZLIntegerOption -> org.geometerplus.zlibrary.a.k.e:
    int myDefaultValue -> a
    int myValue -> b
    int getValue() -> a
    void setValue(int) -> a
org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption -> org.geometerplus.zlibrary.a.k.f:
    int MinValue -> a
    int MaxValue -> b
    int myDefaultValue -> d
    int myValue -> e
    int getValue() -> a
    void setValue(int) -> a
org.geometerplus.zlibrary.core.options.ZLOption -> org.geometerplus.zlibrary.a.k.g:
    java.lang.String myGroup -> a
    java.lang.String myOptionName -> b
    boolean myIsSynchronized -> c
    java.lang.String getConfigValue(java.lang.String) -> a
    void setConfigValue(java.lang.String) -> b
    void unsetConfigValue() -> b
org.geometerplus.zlibrary.core.options.ZLStringListOption -> org.geometerplus.zlibrary.a.k.h:
    java.util.List myDefaultValue -> a
    java.util.List myValue -> b
    java.lang.String listToString(java.util.List) -> b
    java.util.List getValue() -> a
    void setValue(java.util.List) -> a
org.geometerplus.zlibrary.core.options.ZLStringOption -> org.geometerplus.zlibrary.a.k.i:
    java.lang.String myDefaultValue -> a
    java.lang.String myValue -> b
    java.lang.String getValue() -> a
    void setValue(java.lang.String) -> c
org.geometerplus.zlibrary.core.resources.ZLMissingResource -> org.geometerplus.zlibrary.a.l.a:
    org.geometerplus.zlibrary.core.resources.ZLMissingResource Instance -> a
    org.geometerplus.zlibrary.core.resources.ZLResource getResource(java.lang.String) -> a
    boolean hasValue() -> a
    java.lang.String getValue() -> b
org.geometerplus.zlibrary.core.resources.ZLResource -> org.geometerplus.zlibrary.a.l.b:
    java.lang.String Name -> b
    org.geometerplus.zlibrary.core.resources.ZLResource resource(java.lang.String) -> b
    boolean hasValue() -> a
    java.lang.String getValue() -> b
    org.geometerplus.zlibrary.core.resources.ZLResource getResource(java.lang.String) -> a
org.geometerplus.zlibrary.core.resources.ZLTreeResource -> org.geometerplus.zlibrary.a.l.c:
    org.geometerplus.zlibrary.core.resources.ZLTreeResource ourRoot -> a
    long ourTimeStamp -> c
    java.lang.String ourLanguage -> d
    java.lang.String ourCountry -> e
    boolean myHasValue -> f
    java.lang.String myValue -> g
    java.util.HashMap myChildren -> h
    void buildTree() -> c
    void loadData(org.geometerplus.zlibrary.core.resources.ZLTreeResource$ResourceTreeReader,java.lang.String) -> a
    void loadData() -> d
    void setValue(java.lang.String) -> c
    boolean hasValue() -> a
    java.lang.String getValue() -> b
    org.geometerplus.zlibrary.core.resources.ZLResource getResource(java.lang.String) -> a
    java.util.HashMap access$0(org.geometerplus.zlibrary.core.resources.ZLTreeResource) -> a
    void access$1(org.geometerplus.zlibrary.core.resources.ZLTreeResource,java.util.HashMap) -> a
    void access$3(org.geometerplus.zlibrary.core.resources.ZLTreeResource,java.lang.String) -> a
org.geometerplus.zlibrary.core.resources.ZLTreeResource$ResourceTreeReader -> org.geometerplus.zlibrary.a.l.d:
    java.util.ArrayList myStack -> a
    void readDocument(org.geometerplus.zlibrary.core.resources.ZLTreeResource,org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean dontCacheAttributeValues() -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.zlibrary.core.sqliteconfig.ConnectMysql -> org.geometerplus.zlibrary.a.m.a:
    java.lang.String NowTable -> a
    int NowTableId -> b
    android.content.Context con -> c
    java.lang.String status -> d
    java.lang.String connectDatabaseUpdateData(java.util.ArrayList,java.lang.String) -> a
    org.json.JSONObject[] connectDatabaseDownData(java.util.ArrayList,java.lang.String) -> b
    java.lang.String connectDatabaseUploadFile(java.lang.String) -> a
    java.lang.String connectDatabaseDownloadFile(java.lang.String,java.lang.String) -> a
    int syncAnno(java.lang.String[],java.lang.String[],java.lang.String,java.lang.String,java.lang.String) -> a
    int syncAnnoEnd(java.lang.String,java.lang.String,java.lang.String) -> a
    int syncAnnoDownload(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void changeLocalDataBase(org.json.JSONObject[],java.lang.String,java.lang.String) -> a
org.geometerplus.zlibrary.core.sqliteconfig.SQLiteDB -> org.geometerplus.zlibrary.a.m.b:
    java.lang.String[] status -> a
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    int parentInvolvement() -> b
    void insertRange(int,int,int,int,int,java.lang.String) -> a
    void insertNote$2064bb6e(int,java.lang.String,int,java.lang.String) -> a
    void insertPicNote(int,java.lang.String,int,int,int,java.lang.String) -> a
    void insertTTSDate(int,java.lang.String) -> a
    void insertRecordDate(int,java.lang.String,java.lang.String) -> a
    void insertTranslationData(int,int,java.lang.String,java.lang.String,int) -> a
    void insertTranslationNum(int,java.lang.String,java.lang.String) -> g
    void insertParentInData(int,java.lang.String) -> b
    void insertSyncData(int,java.lang.String) -> c
    void updateModDate(int,java.lang.String) -> d
    void updateComment(int,java.lang.String,java.lang.String) -> b
    void updateRecord(int,java.lang.String,java.lang.String) -> c
    void updateColor(int,int,int,int,java.lang.String) -> a
    void updateStyle(int,int,java.lang.String) -> a
    void updateTranslateNum(int,int) -> a
    void updateParentInTime(int) -> a
    void updateRecordDateEnd(int,java.lang.String) -> e
    void updateStatus$6f7c7f01(int,java.lang.String,java.lang.String) -> d
    void updateStatus(int,java.lang.String,java.lang.String,int,java.lang.String) -> a
    int updateSyncData(java.lang.String,java.lang.String,java.lang.String) -> a
    int[] getRangePage(java.lang.String,java.lang.String,int,java.lang.String) -> a
    int[] getRangePage(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    int getRange(int,java.lang.String,java.lang.String,int) -> a
    int getNoteRange(int,java.lang.String,java.lang.String,java.lang.String) -> a
    int getIntData(int,java.lang.String,java.lang.String,java.lang.String) -> b
    java.lang.String getStrComment(int,java.lang.String,java.lang.String) -> e
    java.lang.String getStrComment(int,java.lang.String,java.lang.String,java.lang.String) -> c
    java.lang.String getStrComment(java.lang.String,java.lang.String,java.lang.String) -> b
    int getTranslateNum(java.lang.String,java.lang.String) -> a
    int getTranslateId(java.lang.String,java.lang.String) -> b
    int getTranslateNum(java.lang.String,int) -> a
    int getTranslateId(java.lang.String,int) -> b
    java.lang.String getRecord(int,java.lang.String,java.lang.String) -> f
    int getTableCount(java.lang.String) -> a
    int getRecordID(int,java.lang.String) -> f
    int getTableCount(java.lang.String,java.lang.String) -> c
    int getTableCount(java.lang.String,java.lang.String,int) -> a
    int getTableCount(java.lang.String,java.lang.String,java.lang.String,int) -> a
    int getMaxID(java.lang.String) -> b
    java.lang.String[] getAllData(java.lang.String,int,int) -> a
    android.database.Cursor fetchAll() -> a
org.geometerplus.zlibrary.core.sqliteconfig.SyncDB -> org.geometerplus.zlibrary.a.m.c:
    java.lang.String[] status -> a
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    java.lang.Long insertRange(int,int,int,int,int,java.lang.String) -> a
    java.lang.Long insertNote(int,int,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String) -> a
    java.lang.Long insertPicNote(int,java.lang.String,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String) -> a
    void updateNote(int,int,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String) -> b
    void updatePicNote(int,java.lang.String,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String) -> b
    void updateStatus(int,java.lang.String,java.lang.String) -> a
    int[] getRangePage(java.lang.String,java.lang.String,int,java.lang.String) -> a
    int getRange(int,java.lang.String,java.lang.String,int) -> a
    int getNoteRange(int,java.lang.String,java.lang.String,java.lang.String) -> a
    int getIntData(int,java.lang.String,java.lang.String,java.lang.String) -> b
    java.lang.String getStrComment(int,java.lang.String,java.lang.String,java.lang.String) -> c
    int getTableCount(java.lang.String,java.lang.String,int) -> a
org.geometerplus.zlibrary.core.sqliteconfig.ZLSQLiteConfig -> org.geometerplus.zlibrary.a.m.d:
    android.database.sqlite.SQLiteDatabase myDatabase -> a
    android.database.sqlite.SQLiteStatement myGetValueStatement -> b
    android.database.sqlite.SQLiteStatement mySetValueStatement -> c
    android.database.sqlite.SQLiteStatement myUnsetValueStatement -> d
    android.database.sqlite.SQLiteStatement myDeleteGroupStatement -> e
    java.util.List listGroups() -> b
    java.util.List listNames(java.lang.String) -> a
    void removeGroup(java.lang.String) -> b
    java.lang.String getValue(java.lang.String,java.lang.String,java.lang.String) -> a
    void setValue(java.lang.String,java.lang.String,java.lang.String) -> b
    void unsetValue(java.lang.String,java.lang.String) -> a
org.geometerplus.zlibrary.core.tree.ZLTree -> org.geometerplus.zlibrary.a.n.a:
    int mySize -> a
    org.geometerplus.zlibrary.core.tree.ZLTree Parent -> d
    int Level -> e
    java.util.ArrayList mySubTrees -> b
    int getSize() -> o
    boolean hasChildren() -> p
    java.util.List subTrees() -> q
    org.geometerplus.zlibrary.core.tree.ZLTree getTreeByParagraphNumber(int) -> a
    void addSubTree(org.geometerplus.zlibrary.core.tree.ZLTree,int) -> a
    void removeSelf() -> r
    void clear() -> s
    java.util.Iterator iterator() -> iterator
    java.util.ArrayList access$1(org.geometerplus.zlibrary.core.tree.ZLTree) -> a
org.geometerplus.zlibrary.core.tree.ZLTree$TreeIterator -> org.geometerplus.zlibrary.a.n.b:
    org.geometerplus.zlibrary.core.tree.ZLTree myCurrentElement -> b
    java.util.LinkedList myIndexStack -> c
    int myMaxLevel -> d
    org.geometerplus.zlibrary.core.tree.ZLTree this$0 -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
org.geometerplus.zlibrary.core.util.MimeType -> org.geometerplus.zlibrary.a.o.a:
    java.util.Map ourSimpleTypesMap -> q
    org.geometerplus.zlibrary.core.util.MimeType APP_FB2ZIP -> a
    org.geometerplus.zlibrary.core.util.MimeType APP_EPUB -> b
    org.geometerplus.zlibrary.core.util.MimeType APP_MOBI -> c
    org.geometerplus.zlibrary.core.util.MimeType APP_PDF -> d
    org.geometerplus.zlibrary.core.util.MimeType APP_ATOM -> e
    org.geometerplus.zlibrary.core.util.MimeType APP_OPENSEARCHDESCRIPTION -> f
    org.geometerplus.zlibrary.core.util.MimeType APP_LITRES -> g
    org.geometerplus.zlibrary.core.util.MimeType TEXT_HTML -> h
    org.geometerplus.zlibrary.core.util.MimeType TEXT_XHTML -> i
    org.geometerplus.zlibrary.core.util.MimeType TEXT_PLAIN -> j
    org.geometerplus.zlibrary.core.util.MimeType IMAGE_PNG -> k
    org.geometerplus.zlibrary.core.util.MimeType IMAGE_JPEG -> l
    org.geometerplus.zlibrary.core.util.MimeType IMAGE_AUTO -> m
    org.geometerplus.zlibrary.core.util.MimeType IMAGE_PALM -> n
    org.geometerplus.zlibrary.core.util.MimeType NULL -> o
    java.lang.String Name -> p
    java.util.Map myParameters -> r
    org.geometerplus.zlibrary.core.util.MimeType get(java.lang.String) -> a
    java.lang.String getParameter(java.lang.String) -> b
    boolean equals(java.lang.Object) -> equals
    boolean weakEquals(org.geometerplus.zlibrary.core.util.MimeType) -> a
    int hashCode() -> hashCode
org.geometerplus.zlibrary.core.util.SliceInputStream -> org.geometerplus.zlibrary.a.o.b:
    int myStart -> a
    int myLength -> b
    int available() -> available
    void reset() -> reset
org.geometerplus.zlibrary.core.util.ZLArrayUtils -> org.geometerplus.zlibrary.a.o.c:
    byte[] createCopy(byte[],int,int) -> a
    char[] createCopy(char[],int,int) -> a
    int[] createCopy(int[],int,int) -> a
    java.lang.String[] createCopy(java.lang.String[],int,int) -> a
org.geometerplus.zlibrary.core.util.ZLBoolean3 -> org.geometerplus.zlibrary.a.o.d:
    org.geometerplus.zlibrary.core.util.ZLBoolean3 B3_FALSE -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3 B3_TRUE -> b
    org.geometerplus.zlibrary.core.util.ZLBoolean3 B3_UNDEFINED -> c
    java.lang.String Name -> d
    org.geometerplus.zlibrary.core.util.ZLBoolean3[] ENUM$VALUES -> e
    org.geometerplus.zlibrary.core.util.ZLBoolean3 getByName(java.lang.String) -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3[] values() -> values
    org.geometerplus.zlibrary.core.util.ZLBoolean3 valueOf(java.lang.String) -> valueOf
org.geometerplus.zlibrary.core.util.ZLColor -> org.geometerplus.zlibrary.a.o.e:
    short Red -> a
    short Green -> b
    short Blue -> c
    int getIntValue() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.core.util.ZLInputStreamWithOffset -> org.geometerplus.zlibrary.a.o.f:
    java.io.InputStream myDecoratedStream -> a
    int myOffset -> b
    int available() -> available
    long skip(long) -> skip
    int read() -> read
    void close() -> close
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    void reset() -> reset
    int offset() -> a
org.geometerplus.zlibrary.core.util.ZLMiscUtil -> org.geometerplus.zlibrary.a.o.g:
    boolean equals(java.lang.Object,java.lang.Object) -> a
    int hashCode(java.lang.Object) -> a
    boolean matchesIgnoreCase(java.lang.String,java.lang.String) -> a
org.geometerplus.zlibrary.core.util.ZLNetworkUtil -> org.geometerplus.zlibrary.a.o.h:
    java.lang.String url(java.lang.String,java.lang.String) -> a
    boolean hasParameter(java.lang.String,java.lang.String) -> b
    java.lang.String appendParameter(java.lang.String,java.lang.String,java.lang.String) -> a
org.geometerplus.zlibrary.core.util.ZLSearchPattern -> org.geometerplus.zlibrary.a.o.i:
    boolean IgnoreCase -> a
    char[] LowerCasePattern -> b
    char[] UpperCasePattern -> c
    int getLength() -> a
org.geometerplus.zlibrary.core.util.ZLSearchUtil -> org.geometerplus.zlibrary.a.o.j:
    int find(char[],int,int,org.geometerplus.zlibrary.core.util.ZLSearchPattern) -> a
    int find(char[],int,int,org.geometerplus.zlibrary.core.util.ZLSearchPattern,int) -> a
org.geometerplus.zlibrary.core.util.ZLTTFInfo -> org.geometerplus.zlibrary.a.o.k:
    java.lang.String FamilyName -> a
    java.lang.String SubFamilyName -> b
org.geometerplus.zlibrary.core.util.ZLTTFInfoDetector -> org.geometerplus.zlibrary.a.o.l:
    java.io.InputStream myStream -> a
    int myPosition -> b
    java.util.Map collectFonts(java.io.File[]) -> a
    org.geometerplus.zlibrary.core.util.ZLTTFInfo detectInfo(java.io.File) -> a
    int getInt16(byte[],int) -> b
    org.geometerplus.zlibrary.core.util.ZLTTFInfo readFontInfo(org.geometerplus.zlibrary.core.util.ZLTTFInfoDetector$TableInfo) -> a
    int access$0(byte[],int) -> a
org.geometerplus.zlibrary.core.util.ZLTTFInfoDetector$TableInfo -> org.geometerplus.zlibrary.a.o.m:
    java.lang.String Name -> a
    int Offset -> b
    int Length -> c
org.geometerplus.zlibrary.core.view.DummyPaintContext -> org.geometerplus.zlibrary.a.p.a:
    void clear(org.geometerplus.zlibrary.core.filesystem.ZLFile,boolean) -> a
    void clear(org.geometerplus.zlibrary.core.util.ZLColor) -> a
    void setFontInternal(java.lang.String,int,boolean,boolean,boolean) -> a
    void setTextColor(org.geometerplus.zlibrary.core.util.ZLColor) -> b
    void setLineColor$818b5b1(org.geometerplus.zlibrary.core.util.ZLColor) -> c
    void setFillColor$5027294(org.geometerplus.zlibrary.core.util.ZLColor,int) -> a
    int getWidth() -> a
    int getHeight() -> b
    int getStringWidth(char[],int,int) -> a
    int getSpaceWidthInternal() -> c
    int getStringHeightInternal() -> d
    int getDescentInternal() -> e
    void drawString(int,int,char[],int,int) -> a
    int imageWidth(org.geometerplus.zlibrary.core.image.ZLImageData) -> a
    int imageHeight(org.geometerplus.zlibrary.core.image.ZLImageData) -> b
    void drawImage(int,int,org.geometerplus.zlibrary.core.image.ZLImageData) -> a
    void fillRectangle(int,int,int,int) -> a
    void fillPolygon(int[],int[]) -> a
    void drawPolygonalLine(int[],int[]) -> b
    void drawOutline(int[],int[]) -> c
org.geometerplus.zlibrary.core.view.ZLPaintContext -> org.geometerplus.zlibrary.a.p.b:
    java.util.ArrayList myFamilies -> a
    boolean myResetFont -> b
    java.lang.String myFontFamily -> c
    int myFontSize -> d
    boolean myFontIsBold -> e
    boolean myFontIsItalic -> f
    boolean myFontIsUnderlined -> g
    int mySpaceWidth -> h
    int myStringHeight -> i
    int myDescent -> j
    void clear(org.geometerplus.zlibrary.core.filesystem.ZLFile,boolean) -> a
    void clear(org.geometerplus.zlibrary.core.util.ZLColor) -> a
    void setFont(java.lang.String,int,boolean,boolean,boolean) -> b
    void setFontInternal(java.lang.String,int,boolean,boolean,boolean) -> a
    void setTextColor(org.geometerplus.zlibrary.core.util.ZLColor) -> b
    void setLineColor$818b5b1(org.geometerplus.zlibrary.core.util.ZLColor) -> c
    void setFillColor(org.geometerplus.zlibrary.core.util.ZLColor) -> d
    void setFillColor$5027294(org.geometerplus.zlibrary.core.util.ZLColor,int) -> a
    int getWidth() -> a
    int getHeight() -> b
    int getStringWidth(char[],int,int) -> a
    int getSpaceWidth() -> f
    int getSpaceWidthInternal() -> c
    int getStringHeight() -> g
    int getStringHeightInternal() -> d
    int getDescent() -> h
    int getDescentInternal() -> e
    void drawString(int,int,char[],int,int) -> a
    int imageWidth(org.geometerplus.zlibrary.core.image.ZLImageData) -> a
    int imageHeight(org.geometerplus.zlibrary.core.image.ZLImageData) -> b
    void drawImage(int,int,org.geometerplus.zlibrary.core.image.ZLImageData) -> a
    void fillRectangle(int,int,int,int) -> a
    void drawPolygonalLine(int[],int[]) -> b
    void fillPolygon(int[],int[]) -> a
    void drawOutline(int[],int[]) -> c
org.geometerplus.zlibrary.core.view.ZLView -> org.geometerplus.zlibrary.a.p.c:
    org.geometerplus.zlibrary.core.application.ZLApplication Application -> a
    org.geometerplus.zlibrary.core.view.ZLPaintContext myContext -> b
    org.geometerplus.zlibrary.core.view.ZLView$FooterArea getFooterArea() -> r
    org.geometerplus.zlibrary.core.view.ZLView$Animation getAnimationType() -> o
    void paint(org.geometerplus.zlibrary.core.view.ZLPaintContext,org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    void onScrollingFinished(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    boolean onFingerPress(int,int) -> c
    boolean onFingerRelease(int,int) -> e
    boolean onFingerMove(int,int) -> d
    boolean onFingerLongPress(int,int) -> f
    boolean onFingerReleaseAfterLongPress(int,int) -> h
    boolean onFingerMoveAfterLongPress(int,int) -> g
    boolean onFingerSingleTap(int,int) -> a
    boolean onFingerDoubleTap(int,int) -> b
    boolean isDoubleTapSupported() -> a
    boolean onTrackballRotated(int,int) -> i
    boolean isScrollbarShown() -> s
    int getScrollbarFullSize() -> t
    int getScrollbarThumbPosition(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> b
    int getScrollbarThumbLength(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> c
    boolean canScroll(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> d
    boolean checkRegion(int,int) -> j
    boolean onClick() -> p
    boolean onClick_pic() -> q
    void onPress(int,int) -> k
    int checkXY(int,int,int) -> a
    void clear() -> u
org.geometerplus.zlibrary.core.view.ZLView$Animation -> org.geometerplus.zlibrary.a.p.d:
    org.geometerplus.zlibrary.core.view.ZLView$Animation none -> a
    org.geometerplus.zlibrary.core.view.ZLView$Animation curl -> b
    org.geometerplus.zlibrary.core.view.ZLView$Animation slide -> c
    org.geometerplus.zlibrary.core.view.ZLView$Animation shift -> d
    org.geometerplus.zlibrary.core.view.ZLView$Animation[] ENUM$VALUES -> e
    org.geometerplus.zlibrary.core.view.ZLView$Animation[] values() -> values
    org.geometerplus.zlibrary.core.view.ZLView$Animation valueOf(java.lang.String) -> valueOf
org.geometerplus.zlibrary.core.view.ZLView$Direction -> org.geometerplus.zlibrary.a.p.e:
    org.geometerplus.zlibrary.core.view.ZLView$Direction leftToRight -> a
    org.geometerplus.zlibrary.core.view.ZLView$Direction rightToLeft -> b
    org.geometerplus.zlibrary.core.view.ZLView$Direction up -> c
    org.geometerplus.zlibrary.core.view.ZLView$Direction down -> d
    boolean IsHorizontal -> e
    org.geometerplus.zlibrary.core.view.ZLView$Direction[] ENUM$VALUES -> f
    org.geometerplus.zlibrary.core.view.ZLView$Direction[] values() -> values
    org.geometerplus.zlibrary.core.view.ZLView$Direction valueOf(java.lang.String) -> valueOf
org.geometerplus.zlibrary.core.view.ZLView$FooterArea -> org.geometerplus.zlibrary.a.p.f:
    int getHeight() -> a
org.geometerplus.zlibrary.core.view.ZLView$PageIndex -> org.geometerplus.zlibrary.a.p.g:
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex previous -> a
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex current -> b
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex next -> c
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$PageIndex -> d
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex[] ENUM$VALUES -> e
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getNext() -> a
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPrevious() -> b
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex[] values() -> values
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex valueOf(java.lang.String) -> valueOf
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$PageIndex() -> c
org.geometerplus.zlibrary.core.view.ZLViewWidget -> org.geometerplus.zlibrary.a.p.h:
    void reset() -> a
    void repaint() -> b
    void startManualScrolling(int,int,org.geometerplus.zlibrary.core.view.ZLView$Direction) -> a
    void scrollManuallyTo(int,int) -> a
    void startAnimatedScrolling(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,int,int,org.geometerplus.zlibrary.core.view.ZLView$Direction,int) -> a
    void startAnimatedScrolling(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,org.geometerplus.zlibrary.core.view.ZLView$Direction,int) -> a
    void startAnimatedScrolling(int,int,int) -> a
org.geometerplus.zlibrary.core.xml.ZLDTDParser -> org.geometerplus.zlibrary.a.q.a:
    void doIt(java.io.InputStream,java.util.HashMap) -> a
org.geometerplus.zlibrary.core.xml.ZLMutableString -> org.geometerplus.zlibrary.a.q.b:
    char[] myData -> a
    int myLength -> b
    void append(char[],int,int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.geometerplus.zlibrary.core.xml.ZLStringMap -> org.geometerplus.zlibrary.a.q.c:
    java.lang.String[] myKeys -> a
    java.lang.String[] myValues -> b
    int mySize -> c
    void put(java.lang.String,java.lang.String) -> a
    java.lang.String getValue(java.lang.String) -> a
    int getSize() -> a
    java.lang.String getKey(int) -> a
    java.lang.String getValue(int) -> b
    void clear() -> b
org.geometerplus.zlibrary.core.xml.ZLXMLParser -> org.geometerplus.zlibrary.a.q.d:
    java.io.InputStreamReader myStreamReader -> a
    org.geometerplus.zlibrary.core.xml.ZLXMLReader myXMLReader -> b
    boolean myProcessNamespaces -> c
    java.util.HashMap ourBufferPool -> d
    java.util.Queue ourStringPool -> e
    char[] myBuffer -> f
    int myBufferDescriptionLength -> g
    org.geometerplus.zlibrary.core.xml.ZLMutableString myTagName -> h
    org.geometerplus.zlibrary.core.xml.ZLMutableString myCData -> i
    org.geometerplus.zlibrary.core.xml.ZLMutableString myAttributeName -> j
    org.geometerplus.zlibrary.core.xml.ZLMutableString myAttributeValue -> k
    org.geometerplus.zlibrary.core.xml.ZLMutableString myEntityName -> l
    java.util.HashMap ourDTDMaps -> m
    java.lang.String convertToString(java.util.Map,org.geometerplus.zlibrary.core.xml.ZLMutableString) -> a
    char[] getBuffer(int) -> a
    void storeBuffer(char[]) -> a
    org.geometerplus.zlibrary.core.xml.ZLMutableString getMutableString() -> c
    void storeString(org.geometerplus.zlibrary.core.xml.ZLMutableString) -> a
    void finish() -> a
    char[] getEntityValue(java.util.HashMap,java.lang.String) -> a
    java.util.HashMap getDTDMap(java.util.List) -> a
    void doIt() -> b
    boolean processFullTag(org.geometerplus.zlibrary.core.xml.ZLXMLReader,java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean processStartTag(org.geometerplus.zlibrary.core.xml.ZLXMLReader,java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap,java.util.HashMap) -> a
org.geometerplus.zlibrary.core.xml.ZLXMLProcessor -> org.geometerplus.zlibrary.a.q.e:
    java.util.Map getEntityMap(java.util.List) -> a
    boolean read(org.geometerplus.zlibrary.core.xml.ZLXMLReader,java.io.InputStream,int) -> a
    boolean read(org.geometerplus.zlibrary.core.xml.ZLXMLReader,org.geometerplus.zlibrary.core.filesystem.ZLFile,int) -> a
org.geometerplus.zlibrary.core.xml.ZLXMLReader -> org.geometerplus.zlibrary.a.q.f:
    boolean dontCacheAttributeValues() -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    void characterDataHandlerFinal(char[],int,int) -> b
    boolean processNamespaces() -> b
    void namespaceMapChangedHandler(java.util.Map) -> a
    void addExternalEntities(java.util.HashMap) -> a
    java.util.List externalDTDs() -> d
org.geometerplus.zlibrary.core.xml.ZLXMLReaderAdapter -> org.geometerplus.zlibrary.a.q.g:
    java.util.Map myNamespaceMap -> a
    boolean dontCacheAttributeValues() -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    void characterDataHandlerFinal(char[],int,int) -> b
    boolean processNamespaces() -> b
    void namespaceMapChangedHandler(java.util.Map) -> a
    java.lang.String getAttributeValue(org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String,java.lang.String) -> a
    void addExternalEntities(java.util.HashMap) -> a
    java.util.List externalDTDs() -> d
org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenationInfo -> org.geometerplus.zlibrary.b.a.a:
    boolean[] Mask -> a
    boolean isHyphenationPossible(int) -> a
org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenationReader -> org.geometerplus.zlibrary.b.a.b:
    org.geometerplus.zlibrary.text.hyphenation.ZLTextTeXHyphenator myHyphenator -> a
    boolean myReadPattern -> b
    char[] myBuffer -> c
    int myBufferLength -> d
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenator -> org.geometerplus.zlibrary.b.a.c:
    org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenator ourInstance -> a
    org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenator Instance() -> a
    java.util.List languageCodes() -> b
    void load(java.lang.String) -> a
    org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenationInfo getInfo(org.geometerplus.zlibrary.text.view.ZLTextWord) -> a
    void hyphenate(char[],boolean[],int) -> a
org.geometerplus.zlibrary.text.hyphenation.ZLTextTeXHyphenationPattern -> org.geometerplus.zlibrary.b.a.d:
    int myLength -> a
    char[] mySymbols -> b
    byte[] myValues -> d
    int myHashCode -> c
    void apply(byte[],int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.text.hyphenation.ZLTextTeXHyphenator -> org.geometerplus.zlibrary.b.a.e:
    java.util.HashMap myPatternTable -> a
    java.lang.String myLanguage -> b
    java.util.List myLanguageCodes -> c
    void addPattern(org.geometerplus.zlibrary.text.hyphenation.ZLTextTeXHyphenationPattern) -> a
    java.util.List languageCodes() -> b
    void load(java.lang.String) -> a
    void hyphenate(char[],boolean[],int) -> a
org.geometerplus.zlibrary.text.model.CachedCharStorage -> org.geometerplus.zlibrary.b.b.a:
    int myBlockSize -> a
    java.util.ArrayList myArray -> b
    java.lang.String myDirectoryName -> c
    java.lang.String myFileExtension -> d
    java.lang.String fileName(int) -> c
    int size() -> a
    char[] block(int) -> a
    char[] createNewBlock(int) -> b
    void freezeLastBlock() -> b
org.geometerplus.zlibrary.text.model.CachedCharStorageException -> org.geometerplus.zlibrary.b.b.b:
org.geometerplus.zlibrary.text.model.CharStorage -> org.geometerplus.zlibrary.b.b.c:
    int size() -> a
    char[] block(int) -> a
    char[] createNewBlock(int) -> b
    void freezeLastBlock() -> b
org.geometerplus.zlibrary.text.model.ZLImageEntry -> org.geometerplus.zlibrary.b.b.d:
    org.geometerplus.zlibrary.core.image.ZLImageMap myImageMap -> c
    java.lang.String Id -> a
    short VOffset -> b
    org.geometerplus.zlibrary.core.image.ZLImage getImage() -> a
org.geometerplus.zlibrary.text.model.ZLTextForcedControlEntry -> org.geometerplus.zlibrary.b.b.e:
    short myMask -> a
    short myLeftIndent -> b
    short myRightIndent -> c
    byte myAlignmentType -> d
    void setLeftIndent(short) -> a
    void setRightIndent(short) -> b
    void setAlignmentType(byte) -> a
org.geometerplus.zlibrary.text.model.ZLTextMark -> org.geometerplus.zlibrary.b.b.f:
    int ParagraphIndex -> a
    int Offset -> b
    int Length -> c
    int compareTo(org.geometerplus.zlibrary.text.model.ZLTextMark) -> a
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.zlibrary.text.model.ZLTextModel -> org.geometerplus.zlibrary.b.b.g:
    java.lang.String getId() -> a
    java.lang.String getLanguage() -> b
    int getParagraphsNumber() -> c
    org.geometerplus.zlibrary.text.model.ZLTextParagraph getParagraph(int) -> a
    void removeAllMarks() -> d
    org.geometerplus.zlibrary.text.model.ZLTextMark getNextMark(org.geometerplus.zlibrary.text.model.ZLTextMark) -> a
    org.geometerplus.zlibrary.text.model.ZLTextMark getPreviousMark(org.geometerplus.zlibrary.text.model.ZLTextMark) -> b
    java.util.List getMarks() -> e
    int getTextLength(int) -> b
    int findParagraphByTextLength(int) -> c
    int search$52f4f808(java.lang.String,int,int) -> a
org.geometerplus.zlibrary.text.model.ZLTextParagraph -> org.geometerplus.zlibrary.b.b.h:
    org.geometerplus.zlibrary.text.model.ZLTextParagraph$EntryIterator iterator() -> a
    byte getKind() -> b
org.geometerplus.zlibrary.text.model.ZLTextParagraph$EntryIterator -> org.geometerplus.zlibrary.b.b.i:
    byte getType() -> a
    char[] getTextData() -> b
    int getTextOffset() -> c
    int getTextLength() -> d
    byte getControlKind() -> e
    boolean getControlIsStart() -> f
    byte getHyperlinkType() -> g
    java.lang.String getHyperlinkId() -> h
    org.geometerplus.zlibrary.text.model.ZLImageEntry getImageEntry() -> i
    short getFixedHSpaceLength() -> j
    boolean hasNext() -> k
    void next() -> l
org.geometerplus.zlibrary.text.model.ZLTextParagraphImpl -> org.geometerplus.zlibrary.b.b.j:
    org.geometerplus.zlibrary.text.model.ZLTextPlainModel myModel -> a
    int myIndex -> b
    org.geometerplus.zlibrary.text.model.ZLTextParagraph$EntryIterator iterator() -> a
    byte getKind() -> b
org.geometerplus.zlibrary.text.model.ZLTextPlainModel -> org.geometerplus.zlibrary.b.b.k:
    java.lang.String myId -> a
    java.lang.String myLanguage -> j
    int[] myStartEntryIndices -> b
    int[] myStartEntryOffsets -> c
    int[] myParagraphLengths -> d
    int[] myTextSizes -> e
    byte[] myParagraphKinds -> f
    int myParagraphsNumber -> g
    org.geometerplus.zlibrary.text.model.CharStorage myStorage -> h
    java.util.ArrayList myMarks -> k
    org.geometerplus.zlibrary.core.image.ZLImageMap myImageMap -> i
    java.lang.String getId() -> a
    java.lang.String getLanguage() -> b
    org.geometerplus.zlibrary.text.model.ZLTextMark getNextMark(org.geometerplus.zlibrary.text.model.ZLTextMark) -> a
    org.geometerplus.zlibrary.text.model.ZLTextMark getPreviousMark(org.geometerplus.zlibrary.text.model.ZLTextMark) -> b
    int search$52f4f808(java.lang.String,int,int) -> a
    java.util.List getMarks() -> e
    void removeAllMarks() -> d
    int getParagraphsNumber() -> c
    org.geometerplus.zlibrary.text.model.ZLTextParagraph getParagraph(int) -> a
    int getTextLength(int) -> b
    int findParagraphByTextLength(int) -> c
org.geometerplus.zlibrary.text.model.ZLTextPlainModel$EntryIteratorImpl -> org.geometerplus.zlibrary.b.b.l:
    int myCounter -> d
    int myLength -> e
    byte myType -> f
    int myDataIndex -> a
    int myDataOffset -> b
    char[] myTextData -> g
    int myTextOffset -> h
    int myTextLength -> i
    byte myControlKind -> j
    boolean myControlIsStart -> k
    byte myHyperlinkType -> l
    java.lang.String myHyperlinkId -> m
    org.geometerplus.zlibrary.text.model.ZLImageEntry myImageEntry -> n
    org.geometerplus.zlibrary.text.model.ZLTextForcedControlEntry myForcedControlEntry -> o
    short myFixedHSpaceLength -> p
    org.geometerplus.zlibrary.text.model.ZLTextPlainModel this$0 -> c
    void reset(int) -> a
    byte getType() -> a
    char[] getTextData() -> b
    int getTextOffset() -> c
    int getTextLength() -> d
    byte getControlKind() -> e
    boolean getControlIsStart() -> f
    byte getHyperlinkType() -> g
    java.lang.String getHyperlinkId() -> h
    org.geometerplus.zlibrary.text.model.ZLImageEntry getImageEntry() -> i
    short getFixedHSpaceLength() -> j
    boolean hasNext() -> k
    void next() -> l
org.geometerplus.zlibrary.text.model.ZLTextSpecialParagraphImpl -> org.geometerplus.zlibrary.b.b.m:
    byte myKind -> a
    byte getKind() -> b
org.geometerplus.zlibrary.text.model.ZLTextWritableModel -> org.geometerplus.zlibrary.b.b.n:
    void createParagraph(byte) -> a
    void addControl(byte,boolean) -> a
    void addText(char[],int,int) -> a
    void addHyperlinkControl(byte,byte,java.lang.String) -> a
    void addImage(java.lang.String,short) -> a
    void addFixedHSpace(short) -> a
org.geometerplus.zlibrary.text.model.ZLTextWritablePlainModel -> org.geometerplus.zlibrary.b.b.o:
    char[] myCurrentDataBlock -> j
    int myBlockOffset -> k
    void createParagraph(byte) -> a
    char[] getDataBlock(int) -> d
    void addControl(byte,boolean) -> a
    void addText(char[],int,int) -> a
    void addHyperlinkControl(byte,byte,java.lang.String) -> a
    void addImage(java.lang.String,short) -> a
    void addFixedHSpace(short) -> a
org.geometerplus.zlibrary.text.view.SaveValue -> org.geometerplus.zlibrary.b.c.a:
    int nowIndex -> a
    int picNowIndex -> b
    float wordWidth -> c
    int lecture_num -> d
    int pageIndex -> e
    java.lang.String[] log_Username -> f
    java.lang.String UserName -> g
    java.lang.String SyncUserName -> h
    boolean picNoteOpen -> i
    boolean NoteOpen -> j
    int y_range -> k
    int w -> l
    boolean w_key -> m
    boolean IsNote -> n
    boolean Islecture -> o
    boolean IsRepaint -> p
    boolean IsParent -> q
    boolean IsConnect -> r
    java.lang.String bookName -> s
    boolean IsUPdate -> t
    boolean IsSyncData -> u
org.geometerplus.zlibrary.text.view.ZLTextAbstractHighlighting -> org.geometerplus.zlibrary.b.c.b:
    boolean isEmpty() -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getStartArea(org.geometerplus.zlibrary.text.view.ZLTextPage) -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getEndArea(org.geometerplus.zlibrary.text.view.ZLTextPage) -> b
org.geometerplus.zlibrary.text.view.ZLTextControlElement -> org.geometerplus.zlibrary.b.c.c:
    org.geometerplus.zlibrary.text.view.ZLTextControlElement[] myStartElements -> f
    org.geometerplus.zlibrary.text.view.ZLTextControlElement[] myEndElements -> g
    byte Kind -> a
    boolean IsStart -> b
    org.geometerplus.zlibrary.text.view.ZLTextControlElement get(byte,boolean) -> a
org.geometerplus.zlibrary.text.view.ZLTextElement -> org.geometerplus.zlibrary.b.c.d:
    org.geometerplus.zlibrary.text.view.ZLTextElement HSpace -> c
    org.geometerplus.zlibrary.text.view.ZLTextElement AfterParagraph -> d
    org.geometerplus.zlibrary.text.view.ZLTextElement IndentElement -> e
org.geometerplus.zlibrary.text.view.ZLTextElementArea -> org.geometerplus.zlibrary.b.c.e:
    int XStart -> a
    int XEnd -> b
    int YStart -> c
    int YEnd -> d
    int Length -> e
    boolean AddHyphenationSign -> f
    boolean ChangeStyle -> g
    org.geometerplus.zlibrary.text.view.ZLTextStyle Style -> h
    org.geometerplus.zlibrary.text.view.ZLTextElement Element -> i
    boolean myIsLastInElement -> m
    boolean isFirstInElement() -> a
    boolean isLastInElement() -> b
org.geometerplus.zlibrary.text.view.ZLTextElementAreaVector -> org.geometerplus.zlibrary.b.c.f:
    java.util.List myAreas -> a
    java.util.List myElementRegions -> b
    org.geometerplus.zlibrary.text.view.ZLTextRegion myCurrentElementRegion -> c
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> d
    void clear() -> a
    int size() -> b
    org.geometerplus.zlibrary.text.view.ZLTextElementArea get(int) -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getFirstArea() -> c
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getLastArea() -> d
    boolean add(org.geometerplus.zlibrary.text.view.ZLTextElementArea) -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getFirstAfter(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getLastBefore(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> b
    org.geometerplus.zlibrary.text.view.ZLTextRegion getRegion(org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul) -> a
    org.geometerplus.zlibrary.text.view.ZLTextRegion findRegion(int,int,int,org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter) -> a
    org.geometerplus.zlibrary.text.view.ZLTextRegion nextRegion(org.geometerplus.zlibrary.text.view.ZLTextRegion,org.geometerplus.zlibrary.core.view.ZLView$Direction,org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter) -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> e
org.geometerplus.zlibrary.text.view.ZLTextFixedHSpaceElement -> org.geometerplus.zlibrary.b.c.g:
    org.geometerplus.zlibrary.text.view.ZLTextElement[] ourCollection -> b
    short Length -> a
    org.geometerplus.zlibrary.text.view.ZLTextElement getElement(short) -> a
org.geometerplus.zlibrary.text.view.ZLTextFixedPosition -> org.geometerplus.zlibrary.b.c.h:
    int ParagraphIndex -> j
    int ElementIndex -> k
    int CharIndex -> l
    int getParagraphIndex() -> j
    int getElementIndex() -> k
    int getCharIndex() -> l
org.geometerplus.zlibrary.text.view.ZLTextHighlighting -> org.geometerplus.zlibrary.b.c.i:
    org.geometerplus.zlibrary.text.view.ZLTextPosition myStartPosition -> a
    org.geometerplus.zlibrary.text.view.ZLTextPosition myEndPosition -> b
    void setup(org.geometerplus.zlibrary.text.view.ZLTextPosition,org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    boolean clear() -> b
    boolean isEmpty() -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getStartArea(org.geometerplus.zlibrary.text.view.ZLTextPage) -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getEndArea(org.geometerplus.zlibrary.text.view.ZLTextPage) -> b
org.geometerplus.zlibrary.text.view.ZLTextHorizontalConvexHull -> org.geometerplus.zlibrary.b.c.j:
    java.util.LinkedList myRectangles -> a
    void addArea(org.geometerplus.zlibrary.text.view.ZLTextElementArea) -> a
    void normalize() -> a
    int distanceTo(int,int) -> a
    void draw(org.geometerplus.zlibrary.core.view.ZLPaintContext) -> a
org.geometerplus.zlibrary.text.view.ZLTextHorizontalConvexHull$Rectangle -> org.geometerplus.zlibrary.b.c.k:
    int Left -> a
    int Right -> b
    int Top -> c
    int Bottom -> d
org.geometerplus.zlibrary.text.view.ZLTextHyperlink -> org.geometerplus.zlibrary.b.c.l:
    byte Type -> a
    java.lang.String Id -> b
    java.util.List myElementIndexes -> d
    org.geometerplus.zlibrary.text.view.ZLTextHyperlink NO_LINK -> c
    void addElementIndex(int) -> a
    java.util.List elementIndexes() -> a
org.geometerplus.zlibrary.text.view.ZLTextHyperlinkControlElement -> org.geometerplus.zlibrary.b.c.m:
    org.geometerplus.zlibrary.text.view.ZLTextHyperlink Hyperlink -> f
org.geometerplus.zlibrary.text.view.ZLTextHyperlinkRegionSoul -> org.geometerplus.zlibrary.b.c.n:
    org.geometerplus.zlibrary.text.view.ZLTextHyperlink Hyperlink -> a
org.geometerplus.zlibrary.text.view.ZLTextImageElement -> org.geometerplus.zlibrary.b.c.o:
    java.lang.String Id -> a
    org.geometerplus.zlibrary.core.image.ZLImageData ImageData -> b
    java.lang.String URI -> f
org.geometerplus.zlibrary.text.view.ZLTextImageRegionSoul -> org.geometerplus.zlibrary.b.c.p:
    org.geometerplus.zlibrary.text.view.ZLTextImageElement ImageElement -> a
org.geometerplus.zlibrary.text.view.ZLTextLineInfo -> org.geometerplus.zlibrary.b.c.q:
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor ParagraphCursor -> a
    int ParagraphCursorLength -> b
    int StartElementIndex -> c
    int StartCharIndex -> d
    int RealStartElementIndex -> e
    int RealStartCharIndex -> f
    int EndElementIndex -> g
    int EndCharIndex -> h
    boolean IsVisible -> i
    int LeftIndent -> j
    int Width -> k
    int Height -> l
    int Descent -> m
    int VSpaceAfter -> n
    int SpaceCounter -> o
    org.geometerplus.zlibrary.text.view.ZLTextStyle StartStyle -> p
    boolean isEndOfParagraph() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.text.view.ZLTextPage -> org.geometerplus.zlibrary.b.c.r:
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor StartCursor -> a
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor EndCursor -> b
    java.util.ArrayList LineInfos -> c
    int PaintState -> d
    org.geometerplus.zlibrary.text.view.ZLTextElementAreaVector TextElementMap -> e
    int OldWidth -> f
    int OldHeight -> g
    void reset() -> a
    boolean isEmptyPage() -> b
    void findLineFromStart(org.geometerplus.zlibrary.text.view.ZLTextWordCursor,int) -> a
    void findLineFromEnd(org.geometerplus.zlibrary.text.view.ZLTextWordCursor,int) -> b
org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor -> org.geometerplus.zlibrary.b.c.s:
    int Index -> a
    org.geometerplus.zlibrary.text.model.ZLTextModel Model -> b
    java.util.ArrayList myElements -> c
    char[] SPACE_ARRAY -> d
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor cursor(org.geometerplus.zlibrary.text.model.ZLTextModel,int) -> a
    void fill() -> a
    void clear() -> b
    boolean isFirst() -> c
    boolean isLast() -> d
    boolean isEndOfSection() -> e
    int getParagraphLength() -> f
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor previous() -> g
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor next() -> h
    org.geometerplus.zlibrary.text.view.ZLTextElement getElement(int) -> a
    java.lang.String toString() -> toString
org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor$Processor -> org.geometerplus.zlibrary.b.c.t:
    org.geometerplus.zlibrary.text.model.ZLTextParagraph myParagraph -> a
    org.vimgadgets.linebreak.LineBreaker myLineBreaker -> b
    java.util.ArrayList myElements -> c
    int myOffset -> d
    int myFirstMark -> e
    int myLastMark -> f
    java.util.List myMarks -> g
    byte[] ourBreaks -> h
    void fill() -> a
    void addWord(char[],int,int,int,org.geometerplus.zlibrary.text.view.ZLTextHyperlink) -> a
org.geometerplus.zlibrary.text.view.ZLTextParagraphCursorCache -> org.geometerplus.zlibrary.b.c.u:
    java.util.HashMap ourMap -> a
    void put(org.geometerplus.zlibrary.text.model.ZLTextModel,int,org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor) -> a
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor get(org.geometerplus.zlibrary.text.model.ZLTextModel,int) -> a
    void clear() -> a
org.geometerplus.zlibrary.text.view.ZLTextParagraphCursorCache$Key -> org.geometerplus.zlibrary.b.c.v:
    org.geometerplus.zlibrary.text.model.ZLTextModel myModel -> a
    int myIndex -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.text.view.ZLTextPosition -> org.geometerplus.zlibrary.b.c.w:
    int getParagraphIndex() -> j
    int getElementIndex() -> k
    int getCharIndex() -> l
    boolean samePositionAs(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    int compareTo(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.zlibrary.text.view.ZLTextRegion -> org.geometerplus.zlibrary.b.c.x:
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter AnyRegionFilter -> a
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter HyperlinkFilter -> b
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter ImageOrHyperlinkFilter -> c
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul mySoul -> d
    java.util.List myAreaList -> e
    org.geometerplus.zlibrary.text.view.ZLTextElementArea[] myAreas -> f
    int myFromIndex -> g
    int myToIndex -> h
    org.geometerplus.zlibrary.text.view.ZLTextHorizontalConvexHull myHull -> i
    void extend() -> a
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul getSoul() -> b
    org.geometerplus.zlibrary.text.view.ZLTextElementArea[] textAreas() -> g
    org.geometerplus.zlibrary.text.view.ZLTextHorizontalConvexHull convexHull() -> h
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getFirstArea() -> c
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getLastArea() -> d
    int getTop() -> e
    int getBottom() -> f
    void draw(org.geometerplus.zlibrary.core.view.ZLPaintContext) -> a
    int distanceTo(int,int) -> a
    boolean isAtRightOf(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
    boolean isAtLeftOf(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> b
    boolean isUnder(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> c
    boolean isOver(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> d
    boolean isExactlyUnder(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> e
    boolean isExactlyOver(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> f
org.geometerplus.zlibrary.text.view.ZLTextRegion$1 -> org.geometerplus.zlibrary.b.c.y:
    boolean accepts(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
org.geometerplus.zlibrary.text.view.ZLTextRegion$2 -> org.geometerplus.zlibrary.b.c.z:
    boolean accepts(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
org.geometerplus.zlibrary.text.view.ZLTextRegion$3 -> org.geometerplus.zlibrary.b.c.aa:
    boolean accepts(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter -> org.geometerplus.zlibrary.b.c.ab:
    boolean accepts(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul -> org.geometerplus.zlibrary.b.c.ac:
    int ParagraphIndex -> b
    int StartElementIndex -> c
    int EndElementIndex -> d
    boolean accepts(org.geometerplus.zlibrary.text.view.ZLTextElementArea) -> a
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul) -> a
    int compareTo(org.geometerplus.zlibrary.text.view.ZLTextElementArea) -> b
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.zlibrary.text.view.ZLTextSelection -> org.geometerplus.zlibrary.b.c.ad:
    org.geometerplus.zlibrary.text.view.ZLTextView myView -> a
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul myLeftMostRegionSoul -> b
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul myRightMostRegionSoul -> c
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor myCursorInMovement -> d
    org.geometerplus.zlibrary.text.view.ZLTextSelection$Point myCursorInMovementPoint -> e
    org.geometerplus.zlibrary.text.view.ZLTextSelection$Scroller myScroller -> f
    boolean isEmpty() -> a
    boolean clear() -> b
    void setCursorInMovement(org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor,int,int) -> a
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor getCursorInMovement() -> c
    org.geometerplus.zlibrary.text.view.ZLTextSelection$Point getCursorInMovementPoint() -> d
    boolean start(int,int) -> a
    void stop() -> e
    void expandTo(int,int) -> b
    boolean isAreaSelected(org.geometerplus.zlibrary.text.view.ZLTextElementArea) -> a
    org.geometerplus.zlibrary.text.view.ZLTextPosition getStartPosition() -> f
    org.geometerplus.zlibrary.text.view.ZLTextPosition getEndPosition() -> g
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getStartArea(org.geometerplus.zlibrary.text.view.ZLTextPage) -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getEndArea(org.geometerplus.zlibrary.text.view.ZLTextPage) -> b
    boolean hasAPartBeforePage(org.geometerplus.zlibrary.text.view.ZLTextPage) -> c
    boolean hasAPartAfterPage(org.geometerplus.zlibrary.text.view.ZLTextPage) -> d
    org.geometerplus.zlibrary.text.view.ZLTextView access$0(org.geometerplus.zlibrary.text.view.ZLTextSelection) -> a
org.geometerplus.zlibrary.text.view.ZLTextSelection$Point -> org.geometerplus.zlibrary.b.c.ae:
    int X -> a
    int Y -> b
org.geometerplus.zlibrary.text.view.ZLTextSelection$Scroller -> org.geometerplus.zlibrary.b.c.af:
    boolean myScrollForward -> b
    int myX -> c
    int myY -> d
    org.geometerplus.zlibrary.text.view.ZLTextSelection this$0 -> a
    boolean scrollsForward() -> a
    void setXY(int,int) -> a
    void run() -> run
    void access$0(org.geometerplus.zlibrary.text.view.ZLTextSelection$Scroller) -> a
org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor -> org.geometerplus.zlibrary.b.c.ag:
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor None -> a
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor Left -> b
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor Right -> c
    int ourHeight -> d
    int ourWidth -> e
    int ourAccent -> f
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor[] ENUM$VALUES -> g
    void init() -> d
    int getHeight() -> a
    int getWidth() -> b
    int getAccent() -> c
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor[] values() -> values
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor valueOf(java.lang.String) -> valueOf
org.geometerplus.zlibrary.text.view.ZLTextStyle -> org.geometerplus.zlibrary.b.c.ah:
    org.geometerplus.zlibrary.text.view.ZLTextStyle Base -> a
    org.geometerplus.zlibrary.text.view.ZLTextHyperlink Hyperlink -> b
    java.lang.String getFontFamily() -> a
    int getFontSize() -> b
    boolean isBold() -> c
    boolean isItalic() -> d
    boolean isUnderline() -> e
    int getLeftIndent() -> f
    int getRightIndent() -> g
    int getFirstLineIndentDelta() -> h
    int getLineSpacePercent() -> i
    int getVerticalShift() -> j
    int getSpaceBefore() -> k
    int getSpaceAfter() -> l
    byte getAlignment() -> m
    boolean allowHyphenations() -> n
org.geometerplus.zlibrary.text.view.ZLTextTraverser -> org.geometerplus.zlibrary.b.c.ai:
    org.geometerplus.zlibrary.text.view.ZLTextView myView -> a
    void processWord(org.geometerplus.zlibrary.text.view.ZLTextWord) -> a
    void processSpace() -> a
    void processEndOfParagraph() -> b
    void traverse(org.geometerplus.zlibrary.text.view.ZLTextPosition,org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
org.geometerplus.zlibrary.text.view.ZLTextView -> org.geometerplus.zlibrary.b.c.aj:
    org.geometerplus.zlibrary.text.model.ZLTextModel myModel -> j
    int myScrollingMode -> k
    int myOverlappingValue -> l
    org.geometerplus.zlibrary.text.view.ZLTextPage myPreviousPage -> m
    org.geometerplus.zlibrary.text.view.ZLTextPage myCurrentPage -> c
    org.geometerplus.zlibrary.text.view.ZLTextPage myNextPage -> n
    java.util.HashMap myLineInfoCache -> o
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul mySelectedRegionSoul -> p
    boolean myHighlightSelectedRegion -> q
    org.geometerplus.zlibrary.text.view.ZLTextSelection mySelection -> r
    org.geometerplus.zlibrary.text.view.ZLTextHighlighting myHighlighting -> s
    int selectedy -> d
    char[] ourDefaultLetters -> t
    char[] myLettersBuffer -> u
    int myLettersBufferLength -> v
    org.geometerplus.zlibrary.text.model.ZLTextModel myLettersModel -> w
    int[] left -> e
    int[] right -> f
    int[] top -> g
    int[] bottom -> h
    int y -> i
    char[] SPACE -> x
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$PageIndex -> y
    void setModel(org.geometerplus.zlibrary.text.model.ZLTextModel) -> a
    org.geometerplus.zlibrary.text.model.ZLTextModel getModel() -> v
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor getStartCursor() -> w
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor getEndCursor() -> x
    void gotoMark(org.geometerplus.zlibrary.text.model.ZLTextMark) -> a
    int search$299caf72$53ec41e8(java.lang.String) -> a
    boolean canFindNext() -> y
    void findNext() -> z
    boolean canFindPrevious() -> A
    void findPrevious() -> B
    void clearFindResults() -> C
    void onScrollingFinished(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    void highlight(org.geometerplus.zlibrary.text.view.ZLTextPosition,org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    void clearHighlighting() -> D
    void moveSelectionCursorTo(org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor,int,int) -> a
    void releaseSelectionCursor() -> k
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor getSelectionCursorInMovement() -> E
    org.geometerplus.zlibrary.text.view.ZLTextSelection$Point getSelectionCursorPoint(org.geometerplus.zlibrary.text.view.ZLTextPage,org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor) -> a
    int distanceToCursor(int,int,org.geometerplus.zlibrary.text.view.ZLTextSelection$Point) -> a
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor findSelectionCursor(int,int) -> l
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor findSelectionCursor(int,int,int) -> b
    void drawSelectionCursor(org.geometerplus.zlibrary.core.view.ZLPaintContext,org.geometerplus.zlibrary.text.view.ZLTextSelection$Point) -> a
    void paint(org.geometerplus.zlibrary.core.view.ZLPaintContext,org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    int scrollbarType() -> n
    boolean isScrollbarShown() -> s
    int sizeOfFullText() -> l
    int getCurrentCharNumber(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,boolean) -> a
    int getScrollbarFullSize() -> t
    int getScrollbarThumbPosition(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> b
    int getScrollbarThumbLength(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> c
    int sizeOfTextBeforeCursor(org.geometerplus.zlibrary.text.view.ZLTextWordCursor) -> a
    float computeCharsPerPage() -> m
    int computeTextPageNumber(int) -> b
    int computePageNumber() -> F
    int computeCurrentPage() -> G
    void gotoPage(int) -> a
    void gotoHome() -> H
    void drawBackgroung(org.geometerplus.zlibrary.text.view.ZLTextAbstractHighlighting,org.geometerplus.zlibrary.core.util.ZLColor,org.geometerplus.zlibrary.text.view.ZLTextPage,org.geometerplus.zlibrary.text.view.ZLTextLineInfo,int,int,int) -> a
    void buildInfos(org.geometerplus.zlibrary.text.view.ZLTextPage,org.geometerplus.zlibrary.text.view.ZLTextWordCursor,org.geometerplus.zlibrary.text.view.ZLTextWordCursor) -> a
    org.geometerplus.zlibrary.text.view.ZLTextLineInfo processTextLine(org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor,int,int,int) -> a
    void scrollPage(boolean,int,int) -> a
    void gotoPosition(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    void gotoPosition(int,int,int) -> c
    void gotoPositionByEnd$4868d30e(int,int) -> n
    void preparePaintInfo() -> I
    void preparePaintInfo(org.geometerplus.zlibrary.text.view.ZLTextPage) -> a
    void clearCaches() -> J
    void rebuildPaintInfo() -> Z
    int infoSize(org.geometerplus.zlibrary.text.view.ZLTextLineInfo,int) -> a
    int paragraphSize(org.geometerplus.zlibrary.text.view.ZLTextWordCursor,boolean,int) -> a
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor findStart(org.geometerplus.zlibrary.text.view.ZLTextWordCursor,int,int) -> a
    boolean onFingerMove(int,int) -> d
    boolean onFingerRelease(int,int) -> e
    void hideSelectedRegionBorder() -> K
    org.geometerplus.zlibrary.text.view.ZLTextRegion getSelectedRegion(org.geometerplus.zlibrary.text.view.ZLTextPage) -> b
    org.geometerplus.zlibrary.text.view.ZLTextRegion getSelectedRegion() -> L
    org.geometerplus.zlibrary.text.view.ZLTextRegion findRegion(int,int,org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter) -> a
    org.geometerplus.zlibrary.text.view.ZLTextRegion findRegion(int,int,int,org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter) -> a
    void selectRegion(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
    boolean initSelection(int,int) -> m
    void clearSelection() -> M
    int getSelectionStartY() -> N
    int getSelectionEndY() -> O
    org.geometerplus.zlibrary.text.view.ZLTextPosition getSelectionStartPosition() -> P
    org.geometerplus.zlibrary.text.view.ZLTextPosition getSelectionEndPosition() -> Q
    boolean isSelectionEmpty() -> R
    org.geometerplus.zlibrary.text.view.ZLTextRegion nextRegion(org.geometerplus.zlibrary.core.view.ZLView$Direction,org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter) -> a
    boolean canScroll(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> d
    void clear() -> u
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$PageIndex() -> aa
org.geometerplus.zlibrary.text.view.ZLTextViewBase -> org.geometerplus.zlibrary.b.c.ak:
    org.geometerplus.zlibrary.text.view.ZLTextStyle myTextStyle -> c
    int myWordHeight -> d
    char[] myWordPartArray -> e
    int getWordHeight() -> S
    int getLeftMargin() -> b
    int getRightMargin() -> c
    int getTopMargin() -> d
    int getBottomMargin() -> e
    org.geometerplus.zlibrary.core.filesystem.ZLFile getWallpaperFile() -> f
    org.geometerplus.zlibrary.core.util.ZLColor getBackgroundColor() -> g
    org.geometerplus.zlibrary.core.util.ZLColor getSelectedBackgroundColor() -> h
    org.geometerplus.zlibrary.core.util.ZLColor getSelectedForegroundColor() -> i
    org.geometerplus.zlibrary.core.util.ZLColor getTextColor(org.geometerplus.zlibrary.text.view.ZLTextHyperlink) -> a
    org.geometerplus.zlibrary.core.util.ZLColor getHighlightingColor() -> j
    int getTextAreaHeight() -> T
    int getTextAreaWidth() -> U
    int getBottomLine() -> V
    int getRightLine() -> W
    org.geometerplus.zlibrary.text.view.ZLTextStyle getTextStyle() -> X
    void setTextStyle(org.geometerplus.zlibrary.text.view.ZLTextStyle) -> a
    void resetTextStyle() -> Y
    void applyControl(org.geometerplus.zlibrary.text.view.ZLTextControlElement) -> a
    void applyControls(org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor,int,int) -> a
    int getElementWidth(org.geometerplus.zlibrary.text.view.ZLTextElement,int) -> a
    int getElementHeight(org.geometerplus.zlibrary.text.view.ZLTextElement) -> a
    int getWordWidth(org.geometerplus.zlibrary.text.view.ZLTextWord,int) -> a
    int getWordWidth$3065cd70(org.geometerplus.zlibrary.text.view.ZLTextWord,int,boolean) -> a
    void drawWord(int,int,org.geometerplus.zlibrary.text.view.ZLTextWord,int,int,boolean,org.geometerplus.zlibrary.core.util.ZLColor) -> a
    void drawString(int,int,char[],int,int,org.geometerplus.zlibrary.text.view.ZLTextWord$Mark,int) -> a
org.geometerplus.zlibrary.text.view.ZLTextWord -> org.geometerplus.zlibrary.b.c.al:
    char[] Data -> a
    int Offset -> b
    int Length -> f
    int myWidth -> g
    org.geometerplus.zlibrary.text.view.ZLTextWord$Mark myMark -> h
    int myParagraphOffset -> i
    boolean isASpace() -> a
    org.geometerplus.zlibrary.text.view.ZLTextWord$Mark getMark() -> b
    int getParagraphOffset() -> c
    void addMark(int,int) -> a
    int getWidth(org.geometerplus.zlibrary.core.view.ZLPaintContext) -> a
    java.lang.String toString() -> toString
org.geometerplus.zlibrary.text.view.ZLTextWord$Mark -> org.geometerplus.zlibrary.b.c.am:
    int Start -> a
    int Length -> b
    org.geometerplus.zlibrary.text.view.ZLTextWord$Mark myNext -> d
    org.geometerplus.zlibrary.text.view.ZLTextWord this$0 -> c
    org.geometerplus.zlibrary.text.view.ZLTextWord$Mark getNext() -> a
    void access$1(org.geometerplus.zlibrary.text.view.ZLTextWord$Mark,org.geometerplus.zlibrary.text.view.ZLTextWord$Mark) -> a
org.geometerplus.zlibrary.text.view.ZLTextWordCursor -> org.geometerplus.zlibrary.b.c.an:
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor myParagraphCursor -> a
    int myElementIndex -> b
    int myCharIndex -> c
    void setCursor(org.geometerplus.zlibrary.text.view.ZLTextWordCursor) -> a
    void setCursor(org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor) -> a
    boolean isNull() -> a
    boolean isStartOfParagraph() -> b
    boolean isEndOfParagraph() -> c
    int getParagraphIndex() -> j
    int getElementIndex() -> k
    int getCharIndex() -> l
    org.geometerplus.zlibrary.text.view.ZLTextElement getElement() -> d
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor getParagraphCursor() -> e
    org.geometerplus.zlibrary.text.model.ZLTextMark getMark() -> f
    void nextWord() -> g
    boolean nextParagraph() -> h
    boolean previousParagraph() -> i
    void moveToParagraphStart() -> m
    void moveToParagraphEnd() -> n
    void moveToParagraph(int) -> a
    void moveTo(int,int) -> a
    void reset() -> o
    void rebuild() -> p
    java.lang.String toString() -> toString
org.geometerplus.zlibrary.text.view.ZLTextWordRegionSoul -> org.geometerplus.zlibrary.b.c.ao:
    org.geometerplus.zlibrary.text.view.ZLTextWord Word -> a
org.geometerplus.zlibrary.text.view.style.ZLTextBaseStyle -> org.geometerplus.zlibrary.b.c.a.a:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption AutoHyphenationOption -> c
    org.geometerplus.zlibrary.core.options.ZLBooleanOption BoldOption -> d
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ItalicOption -> e
    org.geometerplus.zlibrary.core.options.ZLBooleanOption UnderlineOption -> f
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption AlignmentOption -> g
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption LineSpaceOption -> h
    org.geometerplus.zlibrary.core.options.ZLStringOption FontFamilyOption -> i
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption FontSizeOption -> j
    java.lang.String getFontFamily() -> a
    int getFontSize() -> b
    boolean isBold() -> c
    boolean isItalic() -> d
    boolean isUnderline() -> e
    int getLeftIndent() -> f
    int getRightIndent() -> g
    int getFirstLineIndentDelta() -> h
    int getLineSpacePercent() -> i
    int getVerticalShift() -> j
    int getSpaceBefore() -> k
    int getSpaceAfter() -> l
    byte getAlignment() -> m
    boolean allowHyphenations() -> n
org.geometerplus.zlibrary.text.view.style.ZLTextDecoratedStyle -> org.geometerplus.zlibrary.b.c.a.b:
    java.lang.String myFontFamily -> c
    int myFontSize -> d
    boolean myIsItalic -> e
    boolean myIsBold -> f
    boolean myIsUnderline -> g
    int myVerticalShift -> h
    boolean myIsNotCached -> i
    void initCache() -> u
    java.lang.String getFontFamily() -> a
    java.lang.String getFontFamilyInternal() -> o
    int getFontSize() -> b
    int getFontSizeInternal() -> p
    boolean isItalic() -> d
    boolean isItalicInternal() -> q
    boolean isBold() -> c
    boolean isBoldInternal() -> r
    boolean isUnderline() -> e
    boolean isUnderlineInternal() -> s
    int getVerticalShift() -> j
    int getVerticalShiftInternal() -> t
org.geometerplus.zlibrary.text.view.style.ZLTextFullDecoratedStyle -> org.geometerplus.zlibrary.b.c.a.c:
    org.geometerplus.zlibrary.text.view.style.ZLTextFullStyleDecoration myFullDecoration -> c
    int getLeftIndent() -> f
    int getRightIndent() -> g
    int getFirstLineIndentDelta() -> h
    int getLineSpacePercent() -> i
    int getSpaceBefore() -> k
    int getSpaceAfter() -> l
    byte getAlignment() -> m
org.geometerplus.zlibrary.text.view.style.ZLTextFullStyleDecoration -> org.geometerplus.zlibrary.b.c.a.d:
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption SpaceBeforeOption -> a
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption SpaceAfterOption -> b
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption LeftIndentOption -> c
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption RightIndentOption -> d
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption FirstLineIndentDeltaOption -> e
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption AlignmentOption -> f
    org.geometerplus.zlibrary.core.options.ZLIntegerOption LineSpacePercentOption -> g
    org.geometerplus.zlibrary.text.view.ZLTextStyle createDecoratedStyle(org.geometerplus.zlibrary.text.view.ZLTextStyle,org.geometerplus.zlibrary.text.view.ZLTextHyperlink) -> a
org.geometerplus.zlibrary.text.view.style.ZLTextPartialDecoratedStyle -> org.geometerplus.zlibrary.b.c.a.e:
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleDecoration myDecoration -> c
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3 -> d
    java.lang.String getFontFamilyInternal() -> o
    int getFontSizeInternal() -> p
    boolean isBoldInternal() -> r
    boolean isItalicInternal() -> q
    boolean isUnderlineInternal() -> s
    int getLeftIndent() -> f
    int getRightIndent() -> g
    int getFirstLineIndentDelta() -> h
    int getLineSpacePercent() -> i
    int getVerticalShiftInternal() -> t
    int getSpaceBefore() -> k
    int getSpaceAfter() -> l
    byte getAlignment() -> m
    boolean allowHyphenations() -> n
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3() -> u
org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection -> org.geometerplus.zlibrary.b.c.a.f:
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection ourInstance -> a
    org.geometerplus.zlibrary.text.view.style.ZLTextBaseStyle myBaseStyle -> b
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleDecoration[] myDecorationMap -> c
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection Instance() -> a
    org.geometerplus.zlibrary.text.view.style.ZLTextBaseStyle getBaseStyle() -> b
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleDecoration getDecoration(byte) -> a
    void access$0(org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection,org.geometerplus.zlibrary.text.view.style.ZLTextBaseStyle) -> a
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleDecoration[] access$1(org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection) -> a
org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection$TextStyleReader -> org.geometerplus.zlibrary.b.c.a.g:
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection myCollection -> a
    boolean dontCacheAttributeValues() -> a
    int intValue$64acd795(org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String) -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3 b3Value(org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String) -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.zlibrary.text.view.style.ZLTextStyleDecoration -> org.geometerplus.zlibrary.b.c.a.h:
    org.geometerplus.zlibrary.core.options.ZLStringOption FontFamilyOption -> h
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption FontSizeDeltaOption -> i
    org.geometerplus.zlibrary.core.options.ZLBoolean3Option BoldOption -> j
    org.geometerplus.zlibrary.core.options.ZLBoolean3Option ItalicOption -> k
    org.geometerplus.zlibrary.core.options.ZLBoolean3Option UnderlineOption -> l
    org.geometerplus.zlibrary.core.options.ZLIntegerOption VerticalShiftOption -> m
    org.geometerplus.zlibrary.core.options.ZLBoolean3Option AllowHyphenationsOption -> n
    java.lang.String myName -> a
    org.geometerplus.zlibrary.text.view.ZLTextStyle createDecoratedStyle(org.geometerplus.zlibrary.text.view.ZLTextStyle,org.geometerplus.zlibrary.text.view.ZLTextHyperlink) -> a
    java.lang.String getName() -> a
org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow -> org.geometerplus.zlibrary.ui.android.a.a:
    java.util.HashMap myMenuItemMap -> a
    android.view.MenuItem$OnMenuItemClickListener myMenuListener -> b
    int myBatteryLevel -> c
    void addMenuItem(android.view.Menu,java.lang.String,java.lang.Integer,java.lang.String) -> a
    void refreshMenu() -> b
    org.geometerplus.zlibrary.core.view.ZLViewWidget getViewWidget() -> c
    void rotate() -> d
    boolean canRotate() -> e
    void close() -> f
    int getBatteryLevel() -> g
    void setBatteryLevel(int) -> a
    java.util.HashMap access$0(org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow) -> a
org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow$1 -> org.geometerplus.zlibrary.ui.android.a.b:
    org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.geometerplus.zlibrary.ui.android.dialogs.ZLAndroidDialogManager -> org.geometerplus.zlibrary.ui.android.b.a:
    android.app.Activity myActivity -> b
    void setActivity(android.app.Activity) -> a
    void wait(java.lang.String,java.lang.Runnable) -> a
org.geometerplus.zlibrary.ui.android.image.InputStreamImageData -> org.geometerplus.zlibrary.ui.android.c.a:
    org.geometerplus.zlibrary.core.image.ZLSingleImage myImage -> a
    android.graphics.Bitmap decodeWithOptions(android.graphics.BitmapFactory$Options) -> a
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageData -> org.geometerplus.zlibrary.ui.android.c.b:
    android.graphics.Bitmap myBitmap -> a
    int myRealWidth -> b
    int myRealHeight -> c
    int myLastRequestedWidth -> d
    int myLastRequestedHeight -> e
    android.graphics.Bitmap decodeWithOptions(android.graphics.BitmapFactory$Options) -> a
    android.graphics.Bitmap getFullSizeBitmap() -> a
    android.graphics.Bitmap getBitmap(int,int) -> a
    android.graphics.Bitmap getBitmap(int,int,boolean) -> a
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader -> org.geometerplus.zlibrary.ui.android.c.c:
    java.util.concurrent.ExecutorService myPool -> a
    java.util.concurrent.ExecutorService mySinglePool -> b
    java.util.HashMap myOnImageSyncRunnables -> c
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader$ImageSynchronizedHandler myImageSynchronizedHandler -> d
    void startImageLoading(org.geometerplus.zlibrary.core.image.ZLLoadableImage,java.lang.Runnable) -> a
    java.util.HashMap access$0(org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader) -> a
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader$ImageSynchronizedHandler access$1(org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader) -> b
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader$1 -> org.geometerplus.zlibrary.ui.android.c.d:
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader this$0 -> a
    org.geometerplus.zlibrary.core.image.ZLLoadableImage val$image -> b
    void run() -> run
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader$ImageSynchronizedHandler -> org.geometerplus.zlibrary.ui.android.c.e:
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
    void fireMessage(java.lang.String) -> a
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader$MinPriorityThreadFactory -> org.geometerplus.zlibrary.ui.android.c.f:
    java.util.concurrent.ThreadFactory myDefaultThreadFactory -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageManager -> org.geometerplus.zlibrary.ui.android.c.g:
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader myLoader -> b
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageData getImageData(org.geometerplus.zlibrary.core.image.ZLImage) -> b
    void startImageLoading(org.geometerplus.zlibrary.core.image.ZLLoadableImage,java.lang.Runnable) -> a
    org.geometerplus.zlibrary.core.image.ZLImageData getImageData(org.geometerplus.zlibrary.core.image.ZLImage) -> a
org.geometerplus.zlibrary.ui.android.library.BugReportActivity -> org.geometerplus.zlibrary.ui.android.library.BugReportActivity:
    java.lang.String getVersionName() -> a
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.zlibrary.ui.android.library.BugReportActivity$1 -> org.geometerplus.zlibrary.ui.android.library.a:
    org.geometerplus.zlibrary.ui.android.library.BugReportActivity this$0 -> a
    java.lang.String val$stackTrace -> b
    java.lang.String val$versionName -> c
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.ui.android.library.BugReportActivity$2 -> org.geometerplus.zlibrary.ui.android.library.b:
    org.geometerplus.zlibrary.ui.android.library.BugReportActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.ui.android.library.UncaughtExceptionHandler -> org.geometerplus.zlibrary.ui.android.library.c:
    android.content.Context myContext -> a
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity -> org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity:
    android.os.PowerManager$WakeLock myWakeLock -> a
    boolean myWakeLockToCreate -> b
    boolean myStartTimer -> c
    int myChangeCounter -> d
    int myOrientation -> f
    android.content.BroadcastReceiver myBatteryInfoReceiver -> e
    org.geometerplus.zlibrary.core.application.ZLApplication createApplication(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void setScreenBrightness(int) -> a
    int getScreenBrightness() -> c
    org.geometerplus.zlibrary.core.filesystem.ZLFile fileFromIntent(android.content.Intent) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void createWakeLock() -> d
    void switchWakeLock(boolean) -> a
    void onResume() -> onResume
    void onPause() -> onPause
    void onLowMemory() -> onLowMemory
    void onNewIntent(android.content.Intent) -> onNewIntent
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void setAutoRotationMode() -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void rotate() -> e
    void access$0(org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity,boolean) -> a
org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity$1 -> org.geometerplus.zlibrary.ui.android.library.d:
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.geometerplus.zlibrary.ui.android.library.ZLAndroidApplication -> org.geometerplus.zlibrary.ui.android.library.ZLAndroidApplication:
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidApplication ourApplication -> i
    org.geometerplus.zlibrary.core.options.ZLBooleanOption AutoOrientationOption -> a
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ShowStatusBarOption -> b
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ShowStatusBarWhenMenuIsActiveOption -> c
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption BatteryLevelToTurnScreenOffOption -> d
    org.geometerplus.zlibrary.core.options.ZLBooleanOption DontTurnScreenOffDuringChargingOption -> e
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption ScreenBrightnessLevelOption -> f
    org.geometerplus.zlibrary.core.options.ZLBooleanOption DisableButtonLightsOption -> g
    org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow myMainWindow -> h
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidApplication Instance() -> a
    void onCreate() -> onCreate
org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary -> org.geometerplus.zlibrary.ui.android.library.e:
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity myActivity -> a
    android.app.Application myApplication -> b
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget myWidget -> c
    void setActivity(org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity) -> a
    void rotateScreen() -> f
    void finish() -> g
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget getWidget() -> h
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile createResourceFile(java.lang.String) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile createResourceFile(org.geometerplus.zlibrary.core.filesystem.ZLResourceFile,java.lang.String) -> a
    java.lang.String getVersionName() -> b
    void setScreenBrightness(int) -> a
    int getScreenBrightness() -> c
    int getDisplayDPI() -> d
    java.util.Collection defaultLanguageCodes() -> e
    android.app.Application access$0(org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary) -> a
org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary$AndroidAssetsFile -> org.geometerplus.zlibrary.ui.android.library.f:
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary$AndroidAssetsFile myParent -> b
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary this$0 -> a
    java.util.List directoryEntries() -> n
    boolean isDirectory() -> b
    boolean exists() -> a
    long size() -> h
    java.io.InputStream getInputStream() -> i
    org.geometerplus.zlibrary.core.filesystem.ZLFile getParent() -> e
org.geometerplus.zlibrary.ui.android.network.SQLiteCookieDatabase -> org.geometerplus.zlibrary.ui.android.d.a:
    android.database.sqlite.SQLiteDatabase myDatabase -> a
    android.database.sqlite.SQLiteStatement myInsertStatement -> b
    android.database.sqlite.SQLiteStatement myInsertPortsStatement -> c
    android.database.sqlite.SQLiteStatement myDeletePortsStatement -> d
    void init(android.content.Context) -> a
    void saveCookies(java.util.Collection) -> a
    java.util.Collection loadCookies() -> b
org.geometerplus.zlibrary.ui.android.util.ZLAndroidColorUtil -> org.geometerplus.zlibrary.ui.android.e.a:
    int rgb(org.geometerplus.zlibrary.core.util.ZLColor) -> a
    org.geometerplus.zlibrary.core.util.ZLColor getAverageColor(android.graphics.Bitmap) -> a
org.geometerplus.zlibrary.ui.android.util.ZLAndroidKeyUtil -> org.geometerplus.zlibrary.ui.android.e.b:
    java.lang.String getKeyNameByCode(int) -> a
org.geometerplus.zlibrary.ui.android.view.AndroidFontUtil -> org.geometerplus.zlibrary.ui.android.f.a:
    java.lang.reflect.Method ourFontCreationMethod -> a
    java.util.Map ourFontMap -> b
    java.io.File[] ourFileList -> c
    long myTimeStamp -> d
    boolean areExternalFontsSupported() -> a
    android.graphics.Typeface createFontFromFile(java.io.File) -> a
    java.util.Map getFontMap(boolean) -> a
    java.lang.String realFontFamilyName(java.lang.String) -> a
    void fillFamiliesList$97cb41f(java.util.ArrayList) -> a
org.geometerplus.zlibrary.ui.android.view.AndroidFontUtil$1 -> org.geometerplus.zlibrary.ui.android.f.b:
    boolean accept(java.io.File,java.lang.String) -> accept
org.geometerplus.zlibrary.ui.android.view.AnimationProvider -> org.geometerplus.zlibrary.ui.android.f.c:
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode myMode -> i
    org.geometerplus.zlibrary.ui.android.view.BitmapManager myBitmapManager -> j
    int myStartX -> a
    int myStartY -> b
    int myEndX -> c
    int myEndY -> d
    org.geometerplus.zlibrary.core.view.ZLView$Direction myDirection -> e
    float mySpeed -> f
    int myWidth -> g
    int myHeight -> h
    java.util.List myDrawInfos -> k
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> l
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode getMode() -> a
    void terminate() -> b
    void startManualScrolling(int,int) -> a
    void scrollTo(int,int) -> b
    void startAnimatedScrolling(int,int,int) -> a
    void startAnimatedScrolling(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,java.lang.Integer,java.lang.Integer,int) -> a
    void startAnimatedScrollingInternal(int) -> a
    void setupAnimatedScrollingStart(java.lang.Integer,java.lang.Integer) -> a
    boolean inProgress() -> c
    int getScrollingShift() -> d
    void setup(org.geometerplus.zlibrary.core.view.ZLView$Direction,int,int) -> a
    void doStep() -> e
    int getScrolledPercent() -> f
    void draw(android.graphics.Canvas) -> a
    void drawInternal(android.graphics.Canvas) -> b
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPageToScrollTo(int,int) -> c
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPageToScrollTo() -> g
    android.graphics.Bitmap getBitmapFrom() -> h
    android.graphics.Bitmap getBitmapTo() -> i
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> j
org.geometerplus.zlibrary.ui.android.view.AnimationProvider$DrawInfo -> org.geometerplus.zlibrary.ui.android.f.d:
    int X -> a
    int Y -> b
    long Start -> c
    int Duration -> d
org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode -> org.geometerplus.zlibrary.ui.android.f.e:
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode NoScrolling -> a
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode ManualScrolling -> b
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode AnimatedScrollingForward -> c
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode AnimatedScrollingBackward -> d
    boolean Auto -> e
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode[] ENUM$VALUES -> f
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode[] values() -> values
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode valueOf(java.lang.String) -> valueOf
org.geometerplus.zlibrary.ui.android.view.BitmapManager -> org.geometerplus.zlibrary.ui.android.f.f:
    android.graphics.Bitmap[] myBitmaps -> a
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex[] myIndexes -> b
    int myWidth -> c
    int myHeight -> d
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget myWidget -> e
    void setSize(int,int) -> a
    android.graphics.Bitmap getBitmap(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    void reset() -> a
    void shift(boolean) -> a
org.geometerplus.zlibrary.ui.android.view.CurlAnimationProvider -> org.geometerplus.zlibrary.ui.android.f.g:
    android.graphics.Paint myPaint -> l
    android.graphics.Paint myBackPaint -> m
    android.graphics.Paint myEdgePaint -> n
    android.graphics.Path myFgPath -> i
    android.graphics.Path myEdgePath -> j
    android.graphics.Path myQuadPath -> k
    float mySpeedFactor -> o
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> p
    void drawInternal(android.graphics.Canvas) -> b
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPageToScrollTo(int,int) -> c
    void startAnimatedScrollingInternal(int) -> a
    void setupAnimatedScrollingStart(java.lang.Integer,java.lang.Integer) -> a
    void doStep() -> e
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> j
org.geometerplus.zlibrary.ui.android.view.NoneAnimationProvider -> org.geometerplus.zlibrary.ui.android.f.h:
    android.graphics.Paint myPaint -> i
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> j
    void drawInternal(android.graphics.Canvas) -> b
    void doStep() -> e
    void setupAnimatedScrollingStart(java.lang.Integer,java.lang.Integer) -> a
    void startAnimatedScrollingInternal(int) -> a
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPageToScrollTo(int,int) -> c
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> j
org.geometerplus.zlibrary.ui.android.view.ShiftAnimationProvider -> org.geometerplus.zlibrary.ui.android.f.i:
    android.graphics.Paint myPaint -> i
    void drawInternal(android.graphics.Canvas) -> b
org.geometerplus.zlibrary.ui.android.view.SimpleAnimationProvider -> org.geometerplus.zlibrary.ui.android.f.j:
    float mySpeedFactor -> i
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> j
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPageToScrollTo(int,int) -> c
    void setupAnimatedScrollingStart(java.lang.Integer,java.lang.Integer) -> a
    void startAnimatedScrollingInternal(int) -> a
    void doStep() -> e
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> j
org.geometerplus.zlibrary.ui.android.view.SlideAnimationProvider -> org.geometerplus.zlibrary.ui.android.f.k:
    android.graphics.Paint myPaint -> i
    void drawInternal(android.graphics.Canvas) -> b
org.geometerplus.zlibrary.ui.android.view.ZLAndroidPaintContext -> org.geometerplus.zlibrary.ui.android.f.l:
    android.graphics.Canvas myCanvas -> a
    android.graphics.Paint myTextPaint -> b
    android.graphics.Paint myLinePaint -> c
    android.graphics.Paint myFillPaint -> d
    android.graphics.Paint myOutlinePaint -> e
    int myWidth -> f
    int myHeight -> g
    int myScrollbarWidth -> h
    org.geometerplus.zlibrary.core.util.ZLColor myBackgroundColor -> i
    java.util.HashMap myTypefaces -> j
    org.geometerplus.zlibrary.core.filesystem.ZLFile ourWallpaperFile -> k
    android.graphics.Bitmap ourWallpaper -> l
    void clear(org.geometerplus.zlibrary.core.filesystem.ZLFile,boolean) -> a
    void clear(org.geometerplus.zlibrary.core.util.ZLColor) -> a
    void fillPolygon(int[],int[]) -> a
    void drawPolygonalLine(int[],int[]) -> b
    void drawOutline(int[],int[]) -> c
    void setFontInternal(java.lang.String,int,boolean,boolean,boolean) -> a
    void setTextColor(org.geometerplus.zlibrary.core.util.ZLColor) -> b
    void setLineColor$818b5b1(org.geometerplus.zlibrary.core.util.ZLColor) -> c
    void setFillColor$5027294(org.geometerplus.zlibrary.core.util.ZLColor,int) -> a
    int getWidth() -> a
    int getHeight() -> b
    int getStringWidth(char[],int,int) -> a
    int getSpaceWidthInternal() -> c
    int getStringHeightInternal() -> d
    int getDescentInternal() -> e
    void drawString(int,int,char[],int,int) -> a
    int imageWidth(org.geometerplus.zlibrary.core.image.ZLImageData) -> a
    int imageHeight(org.geometerplus.zlibrary.core.image.ZLImageData) -> b
    void drawImage(int,int,org.geometerplus.zlibrary.core.image.ZLImageData) -> a
    void fillRectangle(int,int,int,int) -> a
org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget -> org.geometerplus.zlibrary.ui.android.f.m:
    android.graphics.Paint myPaint -> a
    org.geometerplus.zlibrary.ui.android.view.BitmapManager myBitmapManager -> b
    android.graphics.Paint mPaintPic -> c
    android.graphics.Paint mPaintText -> d
    android.graphics.Paint mPaintTextBg -> e
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider myAnimationProvider -> f
    org.geometerplus.zlibrary.core.view.ZLView$Animation myAnimationType -> g
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget$LongClickRunnable myPendingLongClickRunnable -> h
    boolean myLongClickPerformed -> i
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget$ShortClickRunnable myPendingShortClickRunnable -> j
    boolean myPendingPress -> k
    boolean myPendingDoubleTap -> l
    int myPressedX -> m
    int myPressedY -> n
    boolean myScreenIsTouched -> o
    boolean IsCheckPicNote -> p
    boolean IsCheckNote -> q
    java.lang.String myKeyUnderTracking -> r
    long myTrackingStartTime -> s
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Animation -> t
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$ui$android$view$AnimationProvider$Mode -> u
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void onDraw(android.graphics.Canvas) -> onDraw
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider getAnimationProvider() -> c
    void reset() -> a
    void repaint() -> b
    void startManualScrolling(int,int,org.geometerplus.zlibrary.core.view.ZLView$Direction) -> a
    void scrollManuallyTo(int,int) -> a
    void startAnimatedScrolling(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,int,int,org.geometerplus.zlibrary.core.view.ZLView$Direction,int) -> a
    void startAnimatedScrolling(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,org.geometerplus.zlibrary.core.view.ZLView$Direction,int) -> a
    void startAnimatedScrolling(int,int,int) -> a
    void drawOnBitmap(android.graphics.Bitmap,org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    void onDrawStatic(android.graphics.Canvas) -> a
    void drawAnnotatedText(android.graphics.Canvas,int,org.geometerplus.zlibrary.core.sqliteconfig.SQLiteDB) -> a
    void drawAnnoImage(android.graphics.Canvas,int,org.geometerplus.zlibrary.core.sqliteconfig.SQLiteDB) -> b
    void drawAnnotatedText(android.graphics.Canvas,int,org.geometerplus.zlibrary.core.sqliteconfig.SyncDB) -> a
    void drawAnnoImage(android.graphics.Canvas,int,org.geometerplus.zlibrary.core.sqliteconfig.SyncDB) -> b
    void contextDraw(android.graphics.Canvas,int,org.geometerplus.zlibrary.core.sqliteconfig.SQLiteDB) -> c
    void contextDraw(android.graphics.Canvas,int,org.geometerplus.zlibrary.core.sqliteconfig.SyncDB) -> c
    java.lang.String changeStr(java.lang.String,int) -> a
    boolean onTrackballEvent(android.view.MotionEvent) -> onTrackballEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onLongClick(android.view.View) -> onLongClick
    boolean checkPicNote(int,int) -> b
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    int computeVerticalScrollExtent() -> computeVerticalScrollExtent
    int computeVerticalScrollOffset() -> computeVerticalScrollOffset
    int computeVerticalScrollRange() -> computeVerticalScrollRange
    int getMainAreaHeight() -> d
    void access$0$2e272242(org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget) -> a
    int access$1(org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget) -> b
    int access$2(org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget) -> c
    void access$3$2e272242(org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget) -> d
    void access$4$50d38a72(org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget) -> e
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Animation() -> e
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$ui$android$view$AnimationProvider$Mode() -> f
org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget$LongClickRunnable -> org.geometerplus.zlibrary.ui.android.f.n:
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget this$0 -> a
    void run() -> run
org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget$ShortClickRunnable -> org.geometerplus.zlibrary.ui.android.f.o:
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget this$0 -> a
    void run() -> run
org.vimgadgets.linebreak.LineBreaker -> org.vimgadgets.linebreak.LineBreaker:
    java.lang.String myLanguage -> a
    void init() -> init
    void setLineBreaksForCharArray(char[],int,int,java.lang.String,byte[]) -> setLineBreaksForCharArray
    void setLineBreaks(char[],int,int,byte[]) -> a
pervasync.DataTypeMapping -> pervasync.a:
    boolean isBlob(java.lang.String,pervasync.object.SyncColumn) -> a
    boolean isClob(java.lang.String,pervasync.object.SyncColumn) -> b
pervasync.SyncException -> pervasync.b:
    pervasync.util.ListResourceBundle bs -> a
    int errorCode -> b
    int getErrorCode() -> a
    java.lang.String getErrorMessage() -> b
    java.lang.String a(int,java.lang.Object[],java.lang.Throwable) -> a
    java.lang.String getStackTraceInString() -> c
pervasync.SyncSummary -> pervasync.c:
    java.lang.String user -> a
    java.lang.String device -> b
    long sessionId -> c
    java.lang.String syncDirection -> d
    boolean hasDefChanges -> e
    java.lang.String defChanges -> f
    long syncBeginTime -> g
    long downloadBeginTime -> h
    long syncEndTime -> i
    pervasync.SyncException syncException -> j
    int errorCode -> k
    java.lang.String syncErrorMessages -> l
    java.lang.String syncErrorStacktraces -> m
    long sentBytes -> n
    long receivedBytes -> o
    java.lang.String[] syncSchemaNames -> p
    java.lang.String[] syncFolderNames -> q
    java.lang.String checkInStatus -> r
    java.lang.String[] checkInSchemaNames -> s
    java.lang.String[] checkInFolderNames -> t
    long[] checkInDIU_requested -> u
    long[] checkInDIU_done -> v
    java.lang.String refreshStatus -> w
    long serverSnapshotAge -> x
    java.lang.String[] refreshSchemaNames -> y
    java.lang.String[] refreshFolderNames -> z
    long[] refreshDIU_requested -> A
    long[] refreshDIU_done -> B
    java.lang.String toString() -> toString
    void addException(pervasync.SyncException) -> a
    void fromJson(java.lang.String) -> a
    java.lang.String toJson() -> a
pervasync.client.DmAgent -> pervasync.a.a:
    pervasync.client.SyncClientAdmin dx -> h
    pervasync.platform.DbConnection R -> i
    java.lang.String syncServerUrl -> a
    java.lang.String G -> j
    java.lang.String H -> k
    java.lang.String I -> l
    long syncClientId -> m
    long dA -> n
    long dB -> o
    pervasync.object.DmRequest fv -> p
    pervasync.object.DmResponse dmResponse -> b
    java.lang.String serverVersion -> q
    pervasync.config.Config u -> r
    pervasync.platform.Logger v -> s
    pervasync.transport.Transport ci -> c
    pervasync.object.Command dY -> d
    long syncBeginTime -> e
    long downloadBeginTime -> f
    long syncEndTime -> g
    long sessionId -> t
    pervasync.client.DmAgent getInstance(java.lang.String) -> a
    void sendSyncSummary(pervasync.SyncSummary) -> a
    java.lang.String getSyncUserName() -> a
    java.lang.String getSyncDeviceName() -> b
    long getSessionId() -> c
pervasync.client.JobScheduler -> pervasync.a.b:
    java.util.Timer bX -> a
    java.util.TimerTask bY -> b
    java.util.TimerTask bZ -> c
    java.util.TimerTask ca -> d
    boolean isJobSchedulerUp() -> a
    boolean startJobScheduler() -> b
    boolean stopJobScheduler() -> c
    boolean restartJobScheduler() -> d
    void updateAutoSyncJob(int,boolean,java.lang.String,java.util.Date,boolean,int,int,int) -> a
pervasync.client.ProgressCallback -> pervasync.a.c:
    void onStart() -> a
    void onProgress(java.lang.String) -> a
    void onComplete(boolean,java.lang.Object) -> a
pervasync.client.SyncAgent -> pervasync.a.d:
    boolean dv -> a
    boolean dw -> b
    pervasync.client.SyncProgressCallback syncProgressCallback -> c
    java.util.Vector syncHistory -> d
    pervasync.SyncSummary s_syncSummary -> e
    pervasync.platform.Platform Q -> k
    pervasync.client.SyncClientAdmin dx -> l
    pervasync.platform.DbConnection R -> m
    java.util.Hashtable dy -> n
    java.lang.String syncServerUrl -> f
    java.lang.String G -> o
    java.lang.String H -> p
    java.lang.String I -> q
    long syncClientId -> r
    java.lang.String dz -> s
    long dA -> t
    long dB -> u
    java.lang.String dC -> v
    long dD -> w
    long dE -> x
    pervasync.object.SyncRequest dF -> y
    pervasync.object.SyncResponse syncResponse -> g
    pervasync.SyncSummary dG -> z
    java.lang.String dH -> A
    java.lang.String dI -> B
    java.lang.String dJ -> C
    java.lang.String dK -> D
    java.lang.String dL -> E
    java.lang.String dM -> F
    java.lang.String dN -> G
    java.lang.String z -> H
    java.lang.String serverVersion -> I
    boolean dO -> J
    boolean dP -> K
    java.util.Vector dQ -> L
    java.util.Vector dR -> M
    java.util.Hashtable dS -> N
    java.lang.String dT -> O
    java.lang.String dU -> P
    java.lang.String dV -> Q
    java.lang.String dW -> R
    boolean dX -> S
    pervasync.config.Config u -> T
    pervasync.platform.Logger v -> U
    pervasync.transport.Transport ci -> h
    pervasync.object.Command dY -> i
    java.util.Vector dZ -> V
    java.util.Hashtable ea -> W
    java.util.Vector eb -> X
    java.util.Hashtable ec -> Y
    pervasync.object.SyncSchema[] ed -> Z
    boolean ee -> aa
    java.util.Vector ef -> ab
    java.util.Hashtable eg -> ac
    java.util.Vector eh -> ad
    java.util.Hashtable ei -> ae
    pervasync.object.SyncFolder[] ej -> af
    boolean ek -> ag
    boolean el -> ah
    pervasync.platform.File em -> ai
    pervasync.platform.File en -> aj
    long eo -> j
    void a(boolean) -> a
    pervasync.client.SyncAgent getInstance$187be234() -> a
    pervasync.SyncSummary sync(java.lang.String) -> a
    pervasync.SyncSummary a$3dbf98cf(java.lang.String) -> b
    void destroy() -> b
    void i() -> g
    void j() -> h
    void k() -> i
    void l() -> j
    void a(pervasync.object.SyncFolder,java.lang.String) -> a
    void m() -> k
    void n() -> l
    void o() -> m
    void p() -> n
    void q() -> o
    boolean a(pervasync.platform.DbConnection,pervasync.object.SyncSchema) -> a
    boolean a(pervasync.platform.DbConnection,java.lang.String,pervasync.object.SyncTable,pervasync.object.SyncSchema) -> a
    void r() -> p
    boolean a(pervasync.object.SyncFolder) -> a
    void a$3a4ce1ad(pervasync.object.SyncTable,pervasync.object.SyncSchema,boolean) -> a
    boolean isExportTxn() -> c
    boolean isImportTxn() -> d
    long getTransactionId() -> e
    pervasync.SyncSummary getSyncSummary() -> f
    void t() -> q
    void u() -> r
pervasync.client.SyncClient -> pervasync.a.e:
    java.lang.Class aK -> a
    boolean isJobSchedulerUp() -> a
    boolean startJobScheduler() -> b
    boolean stopJobScheduler() -> c
    boolean restartJobScheduler() -> d
    void updateAutoSyncJob(int,boolean,java.lang.String,java.util.Date,boolean,int,int,int) -> a
    pervasync.util.OrderedProperties getSyncConf() -> e
    boolean needSetup() -> f
    boolean needUpgrade() -> g
    java.lang.String getRepositoryVersion() -> r
    void setup(java.lang.String,java.lang.String,java.lang.String,java.lang.String,pervasync.client.ProgressCallback) -> a
    void reset(boolean,pervasync.client.ProgressCallback) -> a
    void upgrade(java.lang.String,java.lang.String,java.lang.String,java.lang.String,pervasync.client.ProgressCallback) -> b
    pervasync.SyncSummary synchronize(java.lang.String) -> a
    java.lang.String getSyncHistory() -> h
    void synchronize(java.lang.String,pervasync.client.SyncProgressCallback) -> a
    pervasync.SyncSummary getSyncSummary() -> i
    boolean isSynchronizing() -> j
    void cancelSync() -> k
    boolean isCanceled() -> l
    long sequenceCurrval(java.lang.String,java.lang.String) -> a
    void sequenceCurrval(java.lang.String,java.lang.String,pervasync.client.ProgressCallback) -> a
    long sequenceNextval(java.lang.String,java.lang.String) -> b
    void sequenceNextval(java.lang.String,java.lang.String,pervasync.client.ProgressCallback) -> b
    java.util.Vector getSyncFolders() -> m
    void getSyncFolders(pervasync.client.ProgressCallback) -> a
    java.util.Vector getSyncSchemas() -> n
    void getSyncSchemas(pervasync.client.ProgressCallback) -> b
    java.util.Vector getSyncSequences$2026b05d() -> o
    void getSyncSequences(java.lang.String,pervasync.client.ProgressCallback) -> a
    java.util.Vector getSyncTables$2026b05d() -> p
    void getSyncTables(java.lang.String,pervasync.client.ProgressCallback) -> b
    java.util.Vector getSyncTableColumns$7aed2327() -> q
    void getSyncTableColumns(java.lang.String,java.lang.String,pervasync.client.ProgressCallback) -> c
    java.util.Vector getSyncTableData$73a3abf2(java.lang.String,java.lang.String,int) -> a
    void getSyncTableData(java.lang.String,java.lang.String,java.lang.String,int,pervasync.client.ProgressCallback) -> a
    java.util.Vector getTableRowData$65e8f747(java.lang.String) -> b
    void getTableRowData(java.lang.String,java.lang.String,long,pervasync.client.ProgressCallback) -> a
    void setTableRowData$4c22b91(java.lang.String,java.util.Vector,java.lang.String) -> a
    void setTableRowData(java.lang.String,java.lang.String,long,java.util.Vector,java.lang.String,pervasync.client.ProgressCallback) -> a
    java.lang.Class class$(java.lang.String) -> c
pervasync.client.SyncClientAdmin -> pervasync.a.f:
    boolean P -> b
    pervasync.platform.Platform Q -> c
    pervasync.config.Config u -> d
    pervasync.platform.DbConnection R -> e
    pervasync.platform.Logger v -> a
    pervasync.client.SyncClientAdmin getInstance() -> a
    void setAutoCommit$1385ff() -> b
    void destroy() -> c
    pervasync.platform.DbConnection getClientAdminDbConnection() -> d
    void createSequence$379e7449() -> e
    boolean updateSequence$379e744d(java.lang.String,java.lang.String) -> a
    void dropSequence$16da05f7() -> f
    long sequenceCurrval(java.lang.String,java.lang.String) -> b
    long sequenceNextval(java.lang.String,java.lang.String) -> c
    java.lang.String[] getFullSequences$50ce1c4d(int) -> a
    java.util.Vector getSyncSequences$2026b05d() -> g
    java.util.Vector getSyncFolders() -> h
    java.util.Vector getSyncSchemas() -> i
    java.util.Vector getSyncTables$2026b05d() -> j
    java.util.Vector getSyncTableColumns$7aed2327() -> k
    java.util.Vector getSyncTableData$73a3abf2(java.lang.String,java.lang.String,int) -> a
    java.util.Vector getTableRowData$65e8f747(java.lang.String) -> a
    void setTableRowData$4c22b91(java.lang.String,java.util.Vector,java.lang.String) -> a
pervasync.client.SyncClientSetup -> pervasync.a.g:
    void setup$1f856163(java.lang.String,java.lang.String,java.lang.String) -> a
    void update$1f856163(java.lang.String,java.lang.String,java.lang.String) -> b
    void reset(boolean) -> a
    void upgrade$1f856163(java.lang.String,java.lang.String,java.lang.String) -> c
pervasync.client.SyncProgressCallback -> pervasync.a.h:
    void onSend(long) -> a
    void onReceive(long) -> b
pervasync.client.a -> pervasync.a.i:
    pervasync.client.ProgressCallback as -> a
    java.lang.String at -> b
    java.lang.String au -> c
    void run() -> run
pervasync.client.b -> pervasync.a.j:
    pervasync.client.ProgressCallback as -> a
    java.lang.String at -> b
    java.lang.String au -> c
    java.lang.String av -> d
    int aw -> e
    void run() -> run
pervasync.client.c -> pervasync.a.k:
    pervasync.client.ProgressCallback as -> a
    java.lang.String at -> b
    java.lang.String au -> c
    long aA -> d
    void run() -> run
pervasync.client.d -> pervasync.a.l:
    pervasync.client.ProgressCallback as -> a
    java.lang.String at -> b
    java.lang.String au -> c
    long aA -> d
    java.util.Vector aD -> e
    java.lang.String ak -> f
    void run() -> run
pervasync.client.e -> pervasync.a.m:
    pervasync.client.ProgressCallback as -> a
    void run() -> run
pervasync.client.f -> pervasync.a.n:
    pervasync.client.ProgressCallback as -> a
    java.lang.String at -> b
    void run() -> run
pervasync.client.g -> pervasync.a.o:
    pervasync.client.ProgressCallback as -> a
    java.lang.String at -> b
    void run() -> run
pervasync.client.h -> pervasync.a.p:
    java.lang.String cM -> a
    void run() -> run
pervasync.client.i -> pervasync.a.q:
    pervasync.client.ProgressCallback as -> a
    java.lang.String at -> b
    java.lang.String be -> c
    void run() -> run
pervasync.client.k -> pervasync.a.r:
    pervasync.client.ProgressCallback as -> a
    void run() -> run
pervasync.client.l -> pervasync.a.s:
    pervasync.client.ProgressCallback as -> a
    java.lang.String at -> b
    java.lang.String be -> c
    void run() -> run
pervasync.client.m -> pervasync.a.t:
    pervasync.client.ProgressCallback as -> a
    java.lang.String eR -> b
    java.lang.String eS -> c
    java.lang.String eT -> d
    java.lang.String eU -> e
    void run() -> run
pervasync.client.n -> pervasync.a.u:
    pervasync.client.ProgressCallback as -> a
    boolean eV -> b
    void run() -> run
pervasync.client.o -> pervasync.a.v:
    pervasync.client.ProgressCallback as -> a
    java.lang.String eR -> b
    java.lang.String eS -> c
    java.lang.String eT -> d
    java.lang.String eU -> e
    void run() -> run
pervasync.client.p -> pervasync.a.w:
    pervasync.client.SyncProgressCallback eW -> a
    java.lang.String cM -> b
    void run() -> run
pervasync.config.Config -> pervasync.b.a:
    java.lang.Object FILE_CHECK_IN_LOCK -> a
    pervasync.config.Config u -> E
    java.lang.String VARCHAR -> b
    java.lang.String NUMERIC -> c
    java.lang.String DATETIME -> d
    java.lang.String BLOB -> e
    java.lang.String CLOB -> f
    java.lang.String BIGINT_AUTO_INCREMENT -> g
    java.lang.String BIGINT -> h
    java.lang.String NOLOGGING -> i
    java.lang.String SYSDATE -> j
    java.lang.String DAY -> k
    java.lang.String EMPTY_BLOB -> l
    java.lang.String EMPTY_CLOB -> m
    java.lang.String DQ -> n
    java.lang.String DML_ROW_NOT_FOUND -> o
    java.lang.String NEW -> p
    java.lang.String OLD -> q
    java.lang.String TEMPORARY -> r
    int UNIQUE_CONSTRAINT_VIOLATION -> s
    int PARENT_KEY_NOT_FOUND -> t
    int TABLE_VIEW_NOT_EXIST -> u
    int TABLE_VIEW_NOT_EXIST_2 -> v
    int SEQUENCE_NOT_EXIST -> w
    int INDEX_NOT_EXIST -> x
    int OBJECT_NOT_EXIST -> y
    int TRIGGER_NOT_EXIST -> z
    int USER_NOT_EXIST -> A
    int USER_ALREADY_EXIST -> B
    int TABLE_VIEW_ALREADY_EXIST -> C
    int RESOURCE_BUSY -> D
    java.lang.String bC -> F
    pervasync.platform.Platform Q -> G
    java.lang.String bD -> H
    java.lang.String bE -> I
    pervasync.platform.Logger v -> J
    pervasync.util.OrderedProperties y -> K
    pervasync.platform.Encryptor bF -> L
    int bG -> M
    int bH -> N
    int bI -> O
    int bJ -> P
    boolean bK -> Q
    int compareVersion(java.lang.String,java.lang.String) -> a
    int getIntVersion(java.lang.String) -> a
    pervasync.config.Config getInstance() -> a
    void reset() -> b
    void d() -> m
    pervasync.util.OrderedProperties getSyncConf() -> c
    pervasync.util.OrderedProperties e() -> n
    void setSyncConf(pervasync.util.OrderedProperties) -> a
    java.lang.String getSyncHome() -> d
    pervasync.platform.Logger getLogger() -> e
    pervasync.platform.Encryptor getEncryptor() -> f
    java.lang.String getDbType() -> g
    int getBlobBufferSize() -> h
    int getClobBufferSize() -> i
    int getMaxMessageSize() -> j
    int getCreateTriggerSleepMs() -> k
    boolean isSeparateLobQuery() -> l
pervasync.object.Command -> pervasync.c.a:
    java.util.Hashtable valueClass -> a
    java.lang.String name -> b
    java.lang.Object value -> c
    int valueLength -> d
    java.lang.Class eu -> e
    java.lang.Class ev -> f
    java.lang.Class ew -> g
    java.lang.Class ex -> h
    java.lang.Class ey -> i
    java.lang.Class ez -> j
    java.lang.Class eA -> k
    java.lang.Class eB -> l
    java.lang.Class eC -> m
    java.lang.Class eD -> n
    void fromJson(java.lang.String) -> a
    java.lang.String toJson() -> a
    java.lang.Object jsonToPojo(java.lang.String,java.lang.Class) -> a
    java.lang.String pojoToJson(java.lang.Object,java.lang.Class) -> a
    java.lang.Class class$(java.lang.String) -> b
pervasync.object.DmRequest -> pervasync.c.b:
    java.lang.String clientVersion -> a
    java.lang.String user -> b
    java.lang.String password -> c
    java.lang.String device -> d
    long sessionId -> e
    long clientId -> f
    long serverId -> g
    void fromJson(java.lang.String) -> a
    java.lang.String toJson() -> a
pervasync.object.DmResponse -> pervasync.c.c:
    java.lang.String serverVersion -> a
    java.lang.String user -> b
    java.lang.String password -> c
    java.lang.String device -> d
    long sessionId -> e
    long clientId -> f
    long serverId -> g
    void fromJson(java.lang.String) -> a
    java.lang.String toJson() -> a
pervasync.object.Jsonable -> pervasync.c.d:
    java.lang.String toJson() -> a
    void fromJson(java.lang.String) -> a
pervasync.object.SyncColumn -> pervasync.c.e:
    java.lang.String columnName -> a
    int dataType -> b
    java.lang.String typeName -> c
    int columnSize -> d
    int decimalDigits -> e
    boolean nullable -> f
    int pkSeq -> g
    int ordinalPosition -> h
    java.lang.String defaultValue -> i
    java.lang.String deviceColDef -> j
    void fromJson(java.lang.String) -> a
    void fromJsonObject(org.json.JSONObject) -> a
    java.lang.String toJson() -> a
    org.json.JSONObject toJsonObject() -> b
pervasync.object.SyncFile -> pervasync.c.f:
    java.lang.String fileName -> a
    boolean isDirectory -> b
    long length -> c
    long lastModified -> d
    long fileCn -> e
    java.lang.String fileCt -> f
    long syncClientId -> g
    boolean exists -> h
    void fromJson(java.lang.String) -> a
    java.lang.String toJson() -> a
pervasync.object.SyncFolder -> pervasync.c.g:
    long id -> a
    java.lang.String name -> b
    java.lang.String serverFolderPath -> c
    java.lang.String clientFolderPath -> d
    long defCn -> e
    long subCn -> f
    java.lang.String defCt -> g
    boolean recursive -> h
    java.lang.String filePathStartsWith -> i
    java.lang.String fileNameEndsWith -> j
    boolean allowCheckIn -> k
    boolean allowRefresh -> l
    java.lang.String[] checkInSuperUsers -> m
    java.lang.String noInitSyncNetworks -> n
    java.lang.String noSyncNetworks -> o
    java.util.Vector fileList -> p
    java.util.Hashtable fileMap -> q
    void fromJson(java.lang.String) -> a
    java.lang.String toJson() -> a
    void fromJsonObject(org.json.JSONObject) -> a
    org.json.JSONObject toJsonObject() -> b
pervasync.object.SyncFolderSub -> pervasync.c.h:
    long syncClientId -> a
    long syncFolderId -> b
    long defCn -> c
    long subCn -> d
    long fileCn -> e
    java.util.Hashtable paramValMap -> f
    java.lang.String filePathStartsWith -> g
    java.lang.String fileNameEndsWith -> h
    java.lang.String clientFolderPath -> i
    void fromJson(java.lang.String) -> a
    java.lang.String toJson() -> a
    void fromJsonObject(org.json.JSONObject) -> a
    org.json.JSONObject toJsonObject() -> b
pervasync.object.SyncLob -> pervasync.c.i:
    boolean isBinary -> a
    boolean isNull -> b
    long totalLength -> c
    java.lang.String charset -> d
    java.lang.String txtPayload -> e
    byte[] binPayload -> f
    void fromJson(java.lang.String) -> a
    java.lang.String toJson() -> a
pervasync.object.SyncRequest -> pervasync.c.j:
    java.lang.String clientVersion -> a
    java.lang.String user -> b
    java.lang.String password -> c
    java.lang.String device -> d
    long sessionId -> e
    long clientId -> f
    long serverId -> g
    java.lang.String syncDirection -> h
    java.lang.String[] syncSchemaNames -> i
    java.lang.String[] syncFolderNames -> j
    java.lang.String checkInCommitMode -> k
    java.lang.String crInsertExisting -> l
    java.lang.String crUpdateChanged -> m
    java.lang.String crDeleteChanged -> n
    void fromJson(java.lang.String) -> a
    java.lang.String toJson() -> a
pervasync.object.SyncResponse -> pervasync.c.k:
    java.lang.String serverVersion -> a
    java.lang.String user -> b
    java.lang.String password -> c
    java.lang.String device -> d
    long sessionId -> e
    long clientId -> f
    long serverId -> g
    java.lang.String syncDirection -> h
    java.lang.String[] successSchemaNames -> i
    java.lang.String[] successFolderNames -> j
    void fromJson(java.lang.String) -> a
    java.lang.String toJson() -> a
pervasync.object.SyncSchema -> pervasync.c.l:
    long id -> a
    java.lang.String name -> b
    java.lang.String serverDbType -> c
    java.lang.String serverDbSchema -> d
    java.lang.String clientDbSchema -> e
    long defCn -> f
    java.lang.String defCt -> g
    long subCn -> h
    pervasync.object.SyncTable[] tableList -> i
    pervasync.object.SyncSequence[] sequenceList -> j
    pervasync.object.SyncSql[] sqlList -> k
    java.lang.String noInitSyncNetworks -> l
    java.lang.String noSyncNetworks -> m
    java.util.Hashtable tableMap -> n
    long serverDbId -> o
    pervasync.platform.DbConnection serverDbConn -> p
    void fromJson(java.lang.String) -> a
    void fromJsonObject(org.json.JSONObject) -> a
    java.lang.String toJson() -> a
    org.json.JSONObject toJsonObject() -> b
pervasync.object.SyncSchemaSub -> pervasync.c.m:
    long syncClientId -> a
    long syncSchemaId -> b
    long defCn -> c
    long subCn -> d
    long dataCn -> e
    long[] newTables -> f
    java.lang.String[] newSequences -> g
    long serverDbId -> h
    java.util.Hashtable paramValMap -> i
    pervasync.platform.DbConnection serverDbConn -> j
    java.util.Hashtable tableSubMap -> k
    java.util.Vector tableSubList -> l
    void fromJson(java.lang.String) -> a
    java.lang.String toJson() -> a
    void fromJsonObject(org.json.JSONObject) -> a
    org.json.JSONObject toJsonObject() -> b
pervasync.object.SyncSequence -> pervasync.c.n:
    java.lang.String name -> a
    long startValue -> b
    long currentValue -> c
    long windowSize -> d
    long defCn -> e
    java.lang.String defCt -> f
    boolean ignoreExecError -> g
    void fromJson(java.lang.String) -> a
    void fromJsonObject(org.json.JSONObject) -> a
    java.lang.String toJson() -> a
    org.json.JSONObject toJsonObject() -> b
pervasync.object.SyncSql -> pervasync.c.o:
    java.lang.String name -> a
    java.lang.String clientDbType -> b
    long rank -> c
    long defCn -> d
    java.lang.String defCt -> e
    java.lang.String sqlText -> f
    boolean ignoreExecError -> g
    void fromJson(java.lang.String) -> a
    void fromJsonObject(org.json.JSONObject) -> a
    java.lang.String toJson() -> a
    org.json.JSONObject toJsonObject() -> b
pervasync.object.SyncTable -> pervasync.c.p:
    long id -> a
    long syncSchemaId -> b
    java.lang.String name -> c
    long rank -> d
    long defCn -> e
    java.lang.String defCt -> f
    pervasync.object.SyncColumn[] columns -> g
    boolean allowCheckIn -> h
    boolean allowRefresh -> i
    boolean hasPk -> j
    java.lang.String[] checkInSuperUsers -> k
    java.lang.String subsettingMode -> l
    java.lang.String subsettingQuery -> m
    java.lang.String queryReferencedTables -> n
    pervasync.object.SyncColumn[] columnsPkRegLob -> o
    java.lang.String complexQueryQ -> p
    java.util.Vector pkList -> q
    java.util.Vector paramList -> r
    java.util.Vector parentList -> s
    java.lang.String schema -> t
    java.lang.String dqSchema -> u
    java.lang.String dqName -> v
    java.lang.String dqLogName -> w
    java.lang.String dqSubName -> x
    java.lang.String pks -> y
    java.lang.String lPks -> z
    java.lang.String sPks -> A
    java.lang.String pkJoinLS -> B
    java.lang.String pkJoinST -> C
    java.lang.String sqlQueryI -> D
    java.lang.String sqlQueryU -> E
    java.lang.String sqlQueryD -> F
    int lobColCount -> G
    java.lang.String sqlQueryLob -> H
    java.lang.String sqlUpdateLob -> I
    java.lang.String sqlInsert -> J
    java.lang.String sqlDelete -> K
    java.lang.String sqlUpdate -> L
    java.lang.String sqlUpdateLog -> M
    java.lang.String sqlQueryCd -> N
    java.lang.String sqlDeleteCd -> O
    java.lang.String sqlUpdateCd -> P
    java.lang.String sqlDeleteM -> Q
    java.lang.String sqlUpdateM -> R
    java.lang.String sqlInsertM -> S
    void fromJson(java.lang.String) -> a
    void fromJsonObject(org.json.JSONObject) -> a
    java.lang.String toJson() -> a
    org.json.JSONObject toJsonObject() -> b
pervasync.object.SyncTableSub -> pervasync.c.q:
    long tableId -> a
    long tableSubId -> b
    long dataCn -> c
    java.util.Vector paramValueList -> d
    java.util.Hashtable parentLogCnMap -> e
    void fromJson(java.lang.String) -> a
    java.lang.String toJson() -> a
pervasync.platform.BufferedReader -> pervasync.d.a:
    java.lang.String readLine() -> a
pervasync.platform.DbConnection -> pervasync.d.b:
    pervasync.platform.PreparedStatement prepareStatement$545ef1bc() -> a
    boolean isClosed() -> b
    java.lang.String getDbPath() -> c
pervasync.platform.Encryptor -> pervasync.d.c:
    java.lang.String createBase64Key() -> a
    java.lang.String encrypt$16915f7f() -> b
    java.lang.String decrypt$16915f7f() -> c
pervasync.platform.File -> pervasync.d.d:
    java.lang.String getPath() -> a
    java.lang.String getAbsolutePath() -> b
    java.lang.String getName() -> c
    boolean exists() -> d
    boolean isDirectory() -> e
    long length() -> f
    long lastModified() -> g
    boolean createNewFile() -> h
    boolean delete() -> i
    boolean renameTo$6347efa4() -> j
    boolean setLastModified$1349f3() -> k
    boolean mkdirs() -> l
    java.lang.String[] list() -> m
    java.io.OutputStream getOutputStream() -> n
    java.io.InputStream getInputStream() -> o
pervasync.platform.HttpConnection -> pervasync.d.e:
    java.io.OutputStream getOutputStream() -> a
    int getResponseCode() -> b
    java.lang.String getHeaderFieldKey$47921032() -> c
    java.lang.String getHeaderField$16915f7f() -> d
    java.io.InputStream getInputStream() -> e
pervasync.platform.Logger -> pervasync.d.f:
    java.lang.String[] LOG_LEVELS -> a
    void debug$552c4e01() -> a
    void info$552c4e01() -> b
    void warn$552c4e01() -> c
    void error$552c4e01() -> d
    void setLogLevel$13462e() -> e
    int getLogLevel() -> f
pervasync.platform.Platform -> pervasync.d.g:
    java.lang.String bT -> a
    pervasync.platform.Platform bU -> b
    java.lang.Object bV -> c
    java.lang.String bW -> d
    void setApplicationContext(java.lang.Object) -> a
    pervasync.platform.Platform getInstance() -> a
    pervasync.platform.Encryptor getEncryptor() -> b
    pervasync.platform.File openFile$47d2ece4() -> c
    pervasync.platform.File openFile(java.lang.String,java.lang.String) -> a
    pervasync.platform.File openFile(pervasync.platform.File,java.lang.String) -> a
    java.lang.String getFileSeparator() -> d
    java.lang.String getPervasyncInternalHome() -> e
    pervasync.platform.BufferedReader getBufferedReader$d29264() -> f
    java.io.OutputStream getBufferedOutputStream$50ec3bff() -> g
    java.io.InputStream getBufferedInputStream$49e5f5bf() -> h
    java.io.OutputStream getGzipOutputStream$50ec3bff() -> i
    java.io.InputStream getGzipInputStream$49e5f5bf() -> j
    pervasync.platform.HttpConnection getHttpConnection$4443bfda() -> k
    boolean matchNetworks(java.lang.String) -> a
    pervasync.platform.DbConnection getDbConnection$2ccd649c() -> l
    void dropDbSchema$552c4e01() -> m
    pervasync.platform.Logger getLogger() -> n
    java.lang.String getDefaultLocale() -> o
    java.lang.String messageFormat$376a700e() -> p
pervasync.platform.PreparedStatement -> pervasync.d.h:
    boolean execute() -> a
    pervasync.platform.ResultSet executeQuery() -> b
pervasync.platform.ResultSet -> pervasync.d.i:
    byte[] getBytes$255806f() -> a
    double getDouble$13461c() -> b
    int getInt$134621() -> c
    long getLong$134622() -> d
    java.lang.String getString$47921032() -> e
    boolean wasNull() -> f
    boolean next() -> g
pervasync.transport.ClientTransport -> pervasync.e.a:
    pervasync.config.Config u -> a
    pervasync.platform.Logger v -> b
    pervasync.client.SyncAgent w -> c
    pervasync.client.DmAgent x -> d
    java.lang.String syncServerUrl -> e
    pervasync.util.OrderedProperties y -> f
    java.lang.String z -> g
    java.lang.String A -> h
    java.lang.String B -> i
    pervasync.transport.adapter.Adapter C -> j
    pervasync.platform.HttpConnection D -> k
    java.io.InputStream E -> l
    java.io.OutputStream F -> m
    java.io.ByteArrayInputStream fQ -> n
    java.io.ByteArrayOutputStream fR -> o
    byte[] fS -> p
    byte[] fT -> q
    boolean fU -> r
    int fV -> s
    java.lang.String G -> t
    java.lang.String H -> u
    java.lang.String I -> v
    java.lang.String J -> w
    int messageId -> x
    long K -> y
    long L -> z
    long M -> A
    java.lang.String N -> B
    java.util.Hashtable O -> C
    pervasync.transport.adapter.Adapter b() -> g
    void openInputStream() -> a
    void openOutputStream() -> b
    void closeInputStream() -> c
    void closeOutputStream() -> d
    void C() -> h
    pervasync.object.Command readCommand() -> e
    void writeCommand(pervasync.object.Command) -> a
    int getMaxMessageSize() -> f
    long addToReadLength(int) -> a
    long addToWriteLength(int) -> b
pervasync.transport.Transport -> pervasync.e.b:
    void openInputStream() -> a
    void openOutputStream() -> b
    void closeInputStream() -> c
    void closeOutputStream() -> d
    pervasync.object.Command readCommand() -> e
    void writeCommand(pervasync.object.Command) -> a
    int getMaxMessageSize() -> f
    long addToReadLength(int) -> a
    long addToWriteLength(int) -> b
pervasync.transport.adapter.Adapter -> pervasync.e.a.a:
    void setInputStream(java.io.InputStream) -> a
    void setOutputStream(java.io.OutputStream) -> a
    void closeInputStream() -> a
    void closeOutputStream() -> b
    pervasync.object.Command readCommand() -> c
    boolean writeCommand(pervasync.object.Command) -> a
pervasync.transport.adapter.JsonAdapter -> pervasync.e.a.b:
    pervasync.config.Config u -> a
    java.io.InputStream E -> b
    java.io.OutputStream F -> c
    java.io.Reader ce -> d
    java.io.Writer cf -> e
    java.util.Vector cg -> f
    int ch -> g
    pervasync.transport.Transport ci -> h
    java.lang.Class cj -> i
    void setInputStream(java.io.InputStream) -> a
    void setOutputStream(java.io.OutputStream) -> a
    void closeInputStream() -> a
    void closeOutputStream() -> b
    pervasync.object.Command readCommand() -> c
    boolean writeCommand(pervasync.object.Command) -> a
    java.lang.Class class$(java.lang.String) -> a
pervasync.ui.android.AndroidUtil -> pervasync.ui.android.a:
    android.graphics.drawable.Drawable getDrawable(java.lang.String) -> a
    void alert(android.app.Activity,java.lang.CharSequence) -> a
pervasync.ui.android.AndroidUtil$1 -> pervasync.ui.android.b:
    android.app.Activity c -> a
    java.lang.CharSequence d -> b
    void run() -> run
pervasync.ui.android.AndroidUtil$1$1 -> pervasync.ui.android.c:
    pervasync.ui.android.AndroidUtil$1 aR -> a
    void onClick(android.content.DialogInterface,int) -> onClick
pervasync.ui.android.AutoSyncSchedulerActivity -> pervasync.ui.android.AutoSyncSchedulerActivity:
    java.lang.String[] cT -> a
    java.lang.String[] LOG_LEVELS -> b
    java.lang.String g -> c
    android.widget.ScrollView bi -> d
    android.widget.LinearLayout h -> e
    android.widget.TableLayout bt -> f
    android.widget.TableRow i -> g
    android.widget.TextView fx -> h
    android.widget.Button fy -> i
    android.widget.TextView cV -> j
    android.widget.TextView fz -> k
    android.widget.TextView fA -> l
    android.widget.TextView fB -> m
    android.widget.TextView fC -> n
    android.widget.TextView fD -> o
    android.widget.TextView fE -> p
    android.widget.Spinner[] fF -> q
    android.widget.CheckBox[] fG -> r
    android.widget.EditText[] fH -> s
    pervasync.ui.android.MyDateTimeView[] fI -> t
    android.widget.CheckBox[] fJ -> u
    android.widget.EditText[] fK -> v
    android.widget.EditText[] fL -> w
    android.widget.EditText[] fM -> x
    pervasync.ui.android.AutoSyncSchedulerActivity fN -> y
    android.view.View$OnClickListener bo -> z
    void onCreate(android.os.Bundle) -> onCreate
    void e(java.lang.String) -> a
    boolean B() -> a
    boolean a(pervasync.ui.android.AutoSyncSchedulerActivity) -> a
    pervasync.ui.android.AutoSyncSchedulerActivity b(pervasync.ui.android.AutoSyncSchedulerActivity) -> b
    android.widget.TextView c(pervasync.ui.android.AutoSyncSchedulerActivity) -> c
    android.widget.Button d(pervasync.ui.android.AutoSyncSchedulerActivity) -> d
pervasync.ui.android.BootUpReceiver -> pervasync.ui.android.BootUpReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
pervasync.ui.android.FolderFilesActivity -> pervasync.ui.android.FolderFilesActivity:
    java.util.Hashtable fc -> d
    java.lang.String fd -> e
    java.lang.String fe -> f
    java.lang.String ff -> g
    pervasync.platform.Platform Q -> h
    pervasync.platform.File fg -> i
    java.lang.String g -> j
    android.widget.LinearLayout h -> k
    android.widget.TableLayout bt -> l
    android.widget.TableRow i -> m
    android.widget.TextView j -> a
    android.widget.Button k -> b
    pervasync.ui.android.MyListView fh -> n
    java.util.Vector fi -> o
    pervasync.ui.android.FolderFilesActivity$a fj -> c
    pervasync.ui.android.FolderFilesActivity fk -> p
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void a() -> a
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void a(java.lang.String,pervasync.ui.android.FolderFilesActivity$a) -> a
    java.util.Vector a(pervasync.ui.android.FolderFilesActivity) -> a
    void a(pervasync.ui.android.FolderFilesActivity,java.lang.String,pervasync.ui.android.FolderFilesActivity$a) -> a
    java.lang.String b(pervasync.ui.android.FolderFilesActivity) -> b
    java.lang.String c(pervasync.ui.android.FolderFilesActivity) -> c
pervasync.ui.android.FolderFilesActivity$1 -> pervasync.ui.android.d:
    android.app.Activity c -> a
    pervasync.ui.android.FolderFilesActivity$a fr -> b
    pervasync.ui.android.FolderFilesActivity bh -> c
    void run() -> run
pervasync.ui.android.FolderFilesActivity$1$1 -> pervasync.ui.android.e:
    pervasync.ui.android.FolderFilesActivity$1 eP -> a
    void onClick(android.content.DialogInterface,int) -> onClick
pervasync.ui.android.FolderFilesActivity$1$2 -> pervasync.ui.android.f:
    pervasync.ui.android.FolderFilesActivity$1 eP -> a
    void onClick(android.content.DialogInterface,int) -> onClick
pervasync.ui.android.FolderFilesActivity$2 -> pervasync.ui.android.g:
    pervasync.ui.android.FolderFilesActivity bh -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
pervasync.ui.android.FolderFilesActivity$a -> pervasync.ui.android.h:
    java.lang.String name -> a
    boolean isDirectory -> b
    long bf -> c
    long length -> d
    java.util.Date bg -> e
    pervasync.ui.android.FolderFilesActivity bh -> f
pervasync.ui.android.ImageFileActivity -> pervasync.ui.android.ImageFileActivity:
    android.widget.ScrollView bi -> a
    android.widget.LinearLayout h -> b
    android.widget.TableLayout bt -> c
    android.widget.TableRow i -> d
    java.lang.String bu -> e
    java.io.File file -> f
    android.widget.TextView bv -> g
    android.widget.TextView bw -> h
    android.widget.TextView bx -> i
    android.widget.TextView by -> j
    pervasync.ui.android.ImageFileActivity bz -> k
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
pervasync.ui.android.MyDateTimeView -> pervasync.ui.android.i:
    android.content.Context an -> a
    java.util.Date bO -> b
    java.util.Calendar calendar -> c
    int year -> d
    int month -> e
    int bP -> f
    int hour -> g
    int minute -> h
    android.widget.LinearLayout bQ -> i
    android.widget.Button bR -> j
    android.widget.Button bS -> k
    java.util.Date getDateTime() -> a
    android.view.View getDisplay() -> b
    void f() -> c
    java.lang.String a(int) -> a
    int a(pervasync.ui.android.MyDateTimeView,int) -> a
    int b(pervasync.ui.android.MyDateTimeView,int) -> b
    int c(pervasync.ui.android.MyDateTimeView,int) -> c
    void a(pervasync.ui.android.MyDateTimeView) -> a
    int b(pervasync.ui.android.MyDateTimeView) -> b
    int c(pervasync.ui.android.MyDateTimeView) -> c
    int d(pervasync.ui.android.MyDateTimeView) -> d
    int d(pervasync.ui.android.MyDateTimeView,int) -> d
    int e(pervasync.ui.android.MyDateTimeView,int) -> e
    int e(pervasync.ui.android.MyDateTimeView) -> e
    int f(pervasync.ui.android.MyDateTimeView) -> f
pervasync.ui.android.MyDateTimeView$1 -> pervasync.ui.android.j:
    android.content.Context dt -> a
    pervasync.ui.android.MyDateTimeView du -> b
    void onClick(android.view.View) -> onClick
pervasync.ui.android.MyDateTimeView$1$1 -> pervasync.ui.android.k:
    pervasync.ui.android.MyDateTimeView$1 b -> a
    void onDateSet(android.widget.DatePicker,int,int,int) -> onDateSet
pervasync.ui.android.MyDateTimeView$2 -> pervasync.ui.android.l:
    android.content.Context dt -> a
    pervasync.ui.android.MyDateTimeView du -> b
    void onClick(android.view.View) -> onClick
pervasync.ui.android.MyDateTimeView$2$1 -> pervasync.ui.android.m:
    pervasync.ui.android.MyDateTimeView$2 p -> a
    void onTimeSet(android.widget.TimePicker,int,int) -> onTimeSet
pervasync.ui.android.MyListItem -> pervasync.ui.android.n:
    android.graphics.drawable.Drawable icon -> a
    java.lang.String[] lines -> b
pervasync.ui.android.MyListView -> pervasync.ui.android.o:
    android.database.DataSetObservable al -> a
    java.util.Vector am -> b
    android.content.Context an -> c
    boolean hasStableIds() -> hasStableIds
    void registerDataSetObserver(android.database.DataSetObserver) -> registerDataSetObserver
    void unregisterDataSetObserver(android.database.DataSetObserver) -> unregisterDataSetObserver
    boolean areAllItemsEnabled() -> areAllItemsEnabled
    boolean isEnabled(int) -> isEnabled
    int getItemViewType(int) -> getItemViewType
    int getViewTypeCount() -> getViewTypeCount
    int getCount() -> getCount
    boolean isEmpty() -> isEmpty
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
pervasync.ui.android.MyListView$a -> pervasync.ui.android.p:
    android.content.Context an -> a
    pervasync.ui.android.MyListItem dr -> b
    pervasync.ui.android.MyListView ds -> c
    void h() -> a
pervasync.ui.android.PervasyncBrowserActivity -> pervasync.ui.android.PervasyncBrowserActivity:
    java.lang.String g -> d
    android.widget.ScrollView bi -> e
    android.widget.LinearLayout h -> f
    android.widget.TextView j -> a
    android.widget.Button k -> b
    boolean fW -> g
    boolean af -> h
    pervasync.ui.android.MyListView bj -> i
    pervasync.ui.android.MyListView bk -> j
    java.util.Vector bl -> k
    java.util.Vector bm -> l
    pervasync.ui.android.MyListItem aG -> c
    pervasync.ui.android.PervasyncBrowserActivity bn -> m
    android.view.View$OnClickListener bo -> n
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void a() -> a
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void a(pervasync.ui.android.PervasyncBrowserActivity) -> a
    java.util.Vector a(pervasync.ui.android.PervasyncBrowserActivity,java.util.Vector) -> a
    java.util.Vector b(pervasync.ui.android.PervasyncBrowserActivity) -> b
    pervasync.ui.android.PervasyncBrowserActivity c(pervasync.ui.android.PervasyncBrowserActivity) -> c
    android.widget.LinearLayout d(pervasync.ui.android.PervasyncBrowserActivity) -> d
    pervasync.ui.android.MyListView a(pervasync.ui.android.PervasyncBrowserActivity,pervasync.ui.android.MyListView) -> a
    pervasync.ui.android.MyListView e(pervasync.ui.android.PervasyncBrowserActivity) -> e
    java.util.Vector f(pervasync.ui.android.PervasyncBrowserActivity) -> f
    pervasync.ui.android.MyListView b(pervasync.ui.android.PervasyncBrowserActivity,pervasync.ui.android.MyListView) -> b
    pervasync.ui.android.MyListView g(pervasync.ui.android.PervasyncBrowserActivity) -> g
    java.lang.String a(pervasync.ui.android.PervasyncBrowserActivity,java.lang.String) -> a
    java.lang.String h(pervasync.ui.android.PervasyncBrowserActivity) -> h
    java.util.Vector b(pervasync.ui.android.PervasyncBrowserActivity,java.util.Vector) -> b
pervasync.ui.android.PervasyncBrowserActivity$1 -> pervasync.ui.android.q:
    pervasync.ui.android.PervasyncBrowserActivity ft -> a
    void onStart() -> a
    void onProgress(java.lang.String) -> a
    void onComplete(boolean,java.lang.Object) -> a
pervasync.ui.android.PervasyncBrowserActivity$1$1 -> pervasync.ui.android.r:
    pervasync.ui.android.PervasyncBrowserActivity$1 r -> a
    void run() -> run
pervasync.ui.android.PervasyncBrowserActivity$1$1$1 -> pervasync.ui.android.s:
    pervasync.ui.android.PervasyncBrowserActivity$1$1 cx -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
pervasync.ui.android.PervasyncBrowserActivity$1$1$2 -> pervasync.ui.android.t:
    pervasync.ui.android.PervasyncBrowserActivity$1$1 cx -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
pervasync.ui.android.PervasyncBrowserActivity$2 -> pervasync.ui.android.u:
    pervasync.client.ProgressCallback fs -> a
    pervasync.ui.android.PervasyncBrowserActivity ft -> b
    void onStart() -> a
    void onProgress(java.lang.String) -> a
    void onComplete(boolean,java.lang.Object) -> a
pervasync.ui.android.PervasyncClientActivity -> pervasync.ui.android.PervasyncClientActivity:
    boolean enableSync -> a
    boolean enableHistory -> b
    boolean enableSetup -> c
    boolean enableScheduler -> d
    boolean enableBrowser -> e
    java.util.LinkedList ct -> f
    android.content.BroadcastReceiver cu -> g
    pervasync.ui.android.PervasyncClientActivity cv -> h
    void onCreate(android.os.Bundle) -> onCreate
    pervasync.ui.android.PervasyncClientActivity a(pervasync.ui.android.PervasyncClientActivity) -> a
pervasync.ui.android.PervasyncClientActivity$1 -> pervasync.ui.android.v:
    pervasync.ui.android.PervasyncClientActivity q -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
pervasync.ui.android.PervasyncHistoryActivity -> pervasync.ui.android.PervasyncHistoryActivity:
    android.widget.ScrollView bi -> b
    android.widget.LinearLayout h -> c
    android.widget.TextView j -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    android.widget.ScrollView a(pervasync.ui.android.PervasyncHistoryActivity) -> a
pervasync.ui.android.PervasyncHistoryActivity$1 -> pervasync.ui.android.w:
    pervasync.ui.android.PervasyncHistoryActivity t -> a
    void run() -> run
pervasync.ui.android.PervasyncService -> pervasync.ui.android.PervasyncService:
    boolean started -> a
    void setStarted(boolean) -> a
    boolean isStarted() -> a
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
pervasync.ui.android.PervasyncSetupActivity -> pervasync.ui.android.PervasyncSetupActivity:
    java.lang.String[] cT -> a
    java.lang.String[] LOG_LEVELS -> b
    java.lang.String g -> c
    android.widget.ScrollView bi -> d
    android.widget.LinearLayout h -> e
    android.widget.TableLayout bt -> f
    android.widget.TableRow i -> g
    android.widget.EditText eE -> h
    android.widget.EditText eF -> i
    android.widget.EditText eG -> j
    android.widget.TextView eH -> k
    android.widget.TextView eI -> l
    android.widget.TextView eJ -> m
    android.widget.EditText eK -> n
    android.widget.TextView eL -> o
    android.widget.Spinner eM -> p
    android.widget.Spinner cW -> q
    android.widget.TextView eN -> r
    android.widget.TextView cV -> s
    boolean ae -> t
    boolean af -> u
    pervasync.ui.android.PervasyncSetupActivity eO -> v
    void onCreate(android.os.Bundle) -> onCreate
    boolean x() -> a
    void a(pervasync.ui.android.PervasyncSetupActivity) -> a
    void b(pervasync.ui.android.PervasyncSetupActivity) -> b
    void c(pervasync.ui.android.PervasyncSetupActivity) -> c
    boolean d(pervasync.ui.android.PervasyncSetupActivity) -> d
    java.lang.String a(pervasync.ui.android.PervasyncSetupActivity,java.lang.String) -> a
    pervasync.ui.android.PervasyncSetupActivity e(pervasync.ui.android.PervasyncSetupActivity) -> e
    java.lang.String f(pervasync.ui.android.PervasyncSetupActivity) -> f
    void g(pervasync.ui.android.PervasyncSetupActivity) -> g
    void a(pervasync.ui.android.PervasyncSetupActivity,boolean) -> a
pervasync.ui.android.PervasyncSetupActivity$1 -> pervasync.ui.android.x:
    pervasync.ui.android.PervasyncSetupActivity Y -> a
    void onStart() -> a
    void onProgress(java.lang.String) -> a
    void onComplete(boolean,java.lang.Object) -> a
pervasync.ui.android.PervasyncSetupActivity$1$1 -> pervasync.ui.android.y:
    pervasync.ui.android.PervasyncSetupActivity$1 cc -> a
    void run() -> run
pervasync.ui.android.PervasyncSetupActivity$1$1$1 -> pervasync.ui.android.z:
    pervasync.ui.android.PervasyncSetupActivity$1$1 T -> a
    void onClick(android.content.DialogInterface,int) -> onClick
pervasync.ui.android.PervasyncSetupActivity$2 -> pervasync.ui.android.aa:
    pervasync.ui.android.PervasyncSetupActivity Y -> a
    void onClick(android.view.View) -> onClick
pervasync.ui.android.PervasyncSetupActivity$3 -> pervasync.ui.android.ab:
    pervasync.ui.android.PervasyncSetupActivity Y -> a
    void onStart() -> a
    void onProgress(java.lang.String) -> a
    void onComplete(boolean,java.lang.Object) -> a
pervasync.ui.android.PervasyncSetupActivity$3$1 -> pervasync.ui.android.ac:
    pervasync.ui.android.PervasyncSetupActivity$3 cw -> a
    void run() -> run
pervasync.ui.android.PervasyncSetupActivity$3$1$1 -> pervasync.ui.android.ad:
    pervasync.ui.android.PervasyncSetupActivity$3$1 dq -> a
    void onClick(android.content.DialogInterface,int) -> onClick
pervasync.ui.android.PervasyncSetupActivity$4 -> pervasync.ui.android.ae:
    pervasync.ui.android.PervasyncSetupActivity Y -> a
    void onStart() -> a
    void onProgress(java.lang.String) -> a
    void onComplete(boolean,java.lang.Object) -> a
pervasync.ui.android.PervasyncSetupActivity$4$1 -> pervasync.ui.android.af:
    pervasync.ui.android.PervasyncSetupActivity$4 fO -> a
    void run() -> run
pervasync.ui.android.PervasyncSetupActivity$4$1$1 -> pervasync.ui.android.ag:
    pervasync.ui.android.PervasyncSetupActivity$4$1 fP -> a
    void onClick(android.content.DialogInterface,int) -> onClick
pervasync.ui.android.PervasyncSetupActivity$5 -> pervasync.ui.android.ah:
    android.app.Activity c -> a
    pervasync.ui.android.PervasyncSetupActivity Y -> b
    void run() -> run
pervasync.ui.android.PervasyncSetupActivity$5$1 -> pervasync.ui.android.ai:
    pervasync.ui.android.PervasyncSetupActivity$5 cL -> a
    void onClick(android.content.DialogInterface,int) -> onClick
pervasync.ui.android.PervasyncSetupActivity$5$2 -> pervasync.ui.android.aj:
    pervasync.ui.android.PervasyncSetupActivity$5 cL -> a
    void onClick(android.content.DialogInterface,int) -> onClick
pervasync.ui.android.PervasyncSetupActivity$6 -> pervasync.ui.android.ak:
    android.app.Activity c -> a
    pervasync.ui.android.PervasyncSetupActivity Y -> b
    void run() -> run
pervasync.ui.android.PervasyncSetupActivity$6$1 -> pervasync.ui.android.al:
    pervasync.ui.android.PervasyncSetupActivity$6 cN -> a
    void onClick(android.content.DialogInterface,int) -> onClick
pervasync.ui.android.PervasyncSetupActivity$6$2 -> pervasync.ui.android.am:
    pervasync.ui.android.PervasyncSetupActivity$6 cN -> a
    void onClick(android.content.DialogInterface,int) -> onClick
pervasync.ui.android.PervasyncSyncActivity -> pervasync.ui.android.PervasyncSyncActivity:
    java.lang.String[] cT -> a
    int cU -> b
    android.widget.ScrollView bi -> c
    android.widget.LinearLayout h -> d
    android.widget.TableLayout bt -> e
    android.widget.TableRow i -> f
    boolean ae -> g
    boolean af -> h
    android.widget.TextView cV -> i
    android.widget.Spinner cW -> j
    android.widget.TextView cX -> k
    android.widget.TextView cY -> l
    android.widget.TextView cZ -> m
    android.widget.TextView da -> n
    android.widget.TextView db -> o
    android.widget.TextView dc -> p
    android.widget.TextView dd -> q
    android.widget.TextView de -> r
    android.widget.TextView df -> s
    android.widget.TextView dg -> t
    android.widget.LinearLayout dh -> u
    android.widget.Button di -> v
    android.widget.Button dj -> w
    android.widget.Button dk -> x
    pervasync.ui.android.PervasyncSyncActivity dl -> y
    android.view.View$OnClickListener bo -> z
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void a() -> a
    void g() -> b
    void cancelSync() -> c
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void a(pervasync.ui.android.PervasyncSyncActivity) -> a
    void b(pervasync.ui.android.PervasyncSyncActivity) -> b
    void c(pervasync.ui.android.PervasyncSyncActivity) -> c
    pervasync.ui.android.PervasyncSyncActivity d(pervasync.ui.android.PervasyncSyncActivity) -> d
    android.widget.TextView e(pervasync.ui.android.PervasyncSyncActivity) -> e
    android.widget.TextView f(pervasync.ui.android.PervasyncSyncActivity) -> f
    android.widget.TextView g(pervasync.ui.android.PervasyncSyncActivity) -> g
    android.widget.TextView h(pervasync.ui.android.PervasyncSyncActivity) -> h
    android.widget.TextView i(pervasync.ui.android.PervasyncSyncActivity) -> i
    android.widget.Button j(pervasync.ui.android.PervasyncSyncActivity) -> j
pervasync.ui.android.PervasyncSyncActivity$1 -> pervasync.ui.android.an:
    pervasync.ui.android.PervasyncSyncActivity bL -> a
    void onStart() -> a
    void onReceive(long) -> b
    void onSend(long) -> a
    void onProgress(java.lang.String) -> a
    void onComplete(boolean,java.lang.Object) -> a
pervasync.ui.android.PervasyncSyncActivity$1$1 -> pervasync.ui.android.ao:
    pervasync.ui.android.PervasyncSyncActivity$1 S -> a
    void run() -> run
pervasync.ui.android.PervasyncSyncActivity$1$2 -> pervasync.ui.android.ap:
    java.lang.String U -> a
    pervasync.ui.android.PervasyncSyncActivity$1 S -> b
    void run() -> run
pervasync.ui.android.PervasyncSyncActivity$1$3 -> pervasync.ui.android.aq:
    long V -> a
    pervasync.ui.android.PervasyncSyncActivity$1 S -> b
    void run() -> run
pervasync.ui.android.PervasyncSyncActivity$1$4 -> pervasync.ui.android.ar:
    long X -> a
    pervasync.ui.android.PervasyncSyncActivity$1 S -> b
    void run() -> run
pervasync.ui.android.PervasyncSyncActivity$1$5 -> pervasync.ui.android.as:
    pervasync.ui.android.PervasyncSyncActivity$1 S -> a
    void run() -> run
pervasync.ui.android.PervasyncSyncActivity$2 -> pervasync.ui.android.at:
    android.app.Activity c -> a
    pervasync.ui.android.PervasyncSyncActivity bL -> b
    void run() -> run
pervasync.ui.android.PervasyncSyncActivity$2$1 -> pervasync.ui.android.au:
    pervasync.ui.android.PervasyncSyncActivity$2 cC -> a
    void onClick(android.content.DialogInterface,int) -> onClick
pervasync.ui.android.PervasyncSyncActivity$2$2 -> pervasync.ui.android.av:
    pervasync.ui.android.PervasyncSyncActivity$2 cC -> a
    void onClick(android.content.DialogInterface,int) -> onClick
pervasync.ui.android.RowEditActivity -> pervasync.ui.android.RowEditActivity:
    java.lang.String e -> c
    java.lang.String f -> d
    java.lang.String cE -> e
    android.widget.TextView[] cF -> f
    android.widget.EditText[] cG -> g
    java.lang.String g -> h
    android.widget.ScrollView bi -> i
    android.widget.LinearLayout h -> j
    android.widget.TextView j -> a
    android.widget.Button k -> b
    pervasync.ui.android.RowEditActivity cH -> k
    void onCreate(android.os.Bundle) -> onCreate
    void c() -> a
    void d(java.lang.String) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    java.lang.String a(pervasync.ui.android.RowEditActivity) -> a
    java.lang.String b(pervasync.ui.android.RowEditActivity) -> b
    java.lang.String c(pervasync.ui.android.RowEditActivity) -> c
    pervasync.ui.android.RowEditActivity d(pervasync.ui.android.RowEditActivity) -> d
    android.widget.LinearLayout e(pervasync.ui.android.RowEditActivity) -> e
    android.widget.TextView[] a(pervasync.ui.android.RowEditActivity,android.widget.TextView[]) -> a
    android.widget.EditText[] a(pervasync.ui.android.RowEditActivity,android.widget.EditText[]) -> a
    android.widget.TextView[] f(pervasync.ui.android.RowEditActivity) -> f
    android.widget.EditText[] g(pervasync.ui.android.RowEditActivity) -> g
    void h(pervasync.ui.android.RowEditActivity) -> h
    void a(pervasync.ui.android.RowEditActivity,java.lang.String) -> a
    java.lang.String b(pervasync.ui.android.RowEditActivity,java.lang.String) -> b
    java.lang.String i(pervasync.ui.android.RowEditActivity) -> i
pervasync.ui.android.RowEditActivity$1 -> pervasync.ui.android.aw:
    pervasync.ui.android.RowEditActivity W -> a
    void onStart() -> a
    void onProgress(java.lang.String) -> a
    void onComplete(boolean,java.lang.Object) -> a
pervasync.ui.android.RowEditActivity$1$1 -> pervasync.ui.android.ax:
    java.util.Vector aD -> a
    pervasync.ui.android.RowEditActivity$1 ck -> b
    void run() -> run
pervasync.ui.android.RowEditActivity$1$1$1 -> pervasync.ui.android.ay:
    pervasync.ui.android.RowEditActivity$1$1 fo -> a
    void onClick(android.view.View) -> onClick
pervasync.ui.android.RowEditActivity$2 -> pervasync.ui.android.az:
    android.app.Activity c -> a
    pervasync.ui.android.RowEditActivity W -> b
    void run() -> run
pervasync.ui.android.RowEditActivity$2$1 -> pervasync.ui.android.ba:
    pervasync.ui.android.RowEditActivity$2 br -> a
    void onClick(android.content.DialogInterface,int) -> onClick
pervasync.ui.android.RowEditActivity$2$2 -> pervasync.ui.android.bb:
    pervasync.ui.android.RowEditActivity$2 br -> a
    void onClick(android.content.DialogInterface,int) -> onClick
pervasync.ui.android.RowEditActivity$3 -> pervasync.ui.android.bc:
    java.lang.String ak -> a
    pervasync.ui.android.RowEditActivity W -> b
    void onStart() -> a
    void onProgress(java.lang.String) -> a
    void onComplete(boolean,java.lang.Object) -> a
pervasync.ui.android.SchemaSequencesActivity -> pervasync.ui.android.SchemaSequencesActivity:
    java.lang.String e -> c
    java.lang.String g -> d
    android.widget.LinearLayout h -> e
    android.widget.TextView j -> a
    android.widget.Button k -> b
    pervasync.ui.android.MyListView cO -> f
    java.util.Vector cP -> g
    pervasync.ui.android.SchemaSequencesActivity cQ -> h
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void a() -> a
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void a(java.lang.String,java.lang.String) -> a
    java.util.Vector a(pervasync.ui.android.SchemaSequencesActivity,java.util.Vector) -> a
    java.util.Vector a(pervasync.ui.android.SchemaSequencesActivity) -> a
    java.lang.String b(pervasync.ui.android.SchemaSequencesActivity) -> b
    pervasync.ui.android.SchemaSequencesActivity c(pervasync.ui.android.SchemaSequencesActivity) -> c
    android.widget.LinearLayout d(pervasync.ui.android.SchemaSequencesActivity) -> d
    pervasync.ui.android.MyListView a(pervasync.ui.android.SchemaSequencesActivity,pervasync.ui.android.MyListView) -> a
    pervasync.ui.android.MyListView e(pervasync.ui.android.SchemaSequencesActivity) -> e
    java.lang.String a(pervasync.ui.android.SchemaSequencesActivity,java.lang.String) -> a
    java.lang.String f(pervasync.ui.android.SchemaSequencesActivity) -> f
    void a(pervasync.ui.android.SchemaSequencesActivity,java.lang.String,java.lang.String) -> a
    void g(pervasync.ui.android.SchemaSequencesActivity) -> g
pervasync.ui.android.SchemaSequencesActivity$1 -> pervasync.ui.android.bd:
    java.lang.String ak -> a
    pervasync.ui.android.SchemaSequencesActivity aL -> b
    void onStart() -> a
    void onProgress(java.lang.String) -> a
    void onComplete(boolean,java.lang.Object) -> a
pervasync.ui.android.SchemaSequencesActivity$1$1 -> pervasync.ui.android.be:
    java.lang.Object bM -> a
    pervasync.ui.android.SchemaSequencesActivity$1 bN -> b
    void run() -> run
pervasync.ui.android.SchemaSequencesActivity$2 -> pervasync.ui.android.bf:
    pervasync.ui.android.SchemaSequencesActivity aL -> a
    void onClick(android.content.DialogInterface,int) -> onClick
pervasync.ui.android.SchemaSequencesActivity$3 -> pervasync.ui.android.bg:
    pervasync.ui.android.SchemaSequencesActivity aL -> a
    void onStart() -> a
    void onProgress(java.lang.String) -> a
    void onComplete(boolean,java.lang.Object) -> a
pervasync.ui.android.SchemaSequencesActivity$3$1 -> pervasync.ui.android.bh:
    pervasync.ui.android.SchemaSequencesActivity$3 fu -> a
    void run() -> run
pervasync.ui.android.SchemaSequencesActivity$4 -> pervasync.ui.android.bi:
    java.lang.String be -> a
    java.lang.String ak -> b
    pervasync.ui.android.SchemaSequencesActivity aL -> c
    void onClick(android.content.DialogInterface,int) -> onClick
pervasync.ui.android.SchemaTablesActivity -> pervasync.ui.android.SchemaTablesActivity:
    java.lang.String e -> d
    java.lang.String g -> e
    android.widget.LinearLayout h -> f
    android.widget.TextView j -> a
    android.widget.Button k -> b
    boolean fW -> g
    boolean af -> h
    pervasync.ui.android.MyListView aE -> i
    java.util.Vector aF -> j
    pervasync.ui.android.MyListItem aG -> c
    pervasync.ui.android.SchemaTablesActivity aH -> k
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    java.util.Vector a(pervasync.ui.android.SchemaTablesActivity,java.util.Vector) -> a
    java.util.Vector a(pervasync.ui.android.SchemaTablesActivity) -> a
    java.lang.String b(pervasync.ui.android.SchemaTablesActivity) -> b
    pervasync.ui.android.SchemaTablesActivity c(pervasync.ui.android.SchemaTablesActivity) -> c
    android.widget.LinearLayout d(pervasync.ui.android.SchemaTablesActivity) -> d
    pervasync.ui.android.MyListView a(pervasync.ui.android.SchemaTablesActivity,pervasync.ui.android.MyListView) -> a
    pervasync.ui.android.MyListView e(pervasync.ui.android.SchemaTablesActivity) -> e
    java.lang.String a(pervasync.ui.android.SchemaTablesActivity,java.lang.String) -> a
    java.lang.String f(pervasync.ui.android.SchemaTablesActivity) -> f
pervasync.ui.android.SchemaTablesActivity$1 -> pervasync.ui.android.bj:
    pervasync.ui.android.SchemaTablesActivity cD -> a
    void onStart() -> a
    void onProgress(java.lang.String) -> a
    void onComplete(boolean,java.lang.Object) -> a
pervasync.ui.android.SchemaTablesActivity$1$1 -> pervasync.ui.android.bk:
    pervasync.ui.android.SchemaTablesActivity$1 dp -> a
    void run() -> run
pervasync.ui.android.SchemaTablesActivity$1$1$1 -> pervasync.ui.android.bl:
    pervasync.ui.android.SchemaTablesActivity$1$1 fn -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
pervasync.ui.android.TableColumnsActivity -> pervasync.ui.android.TableColumnsActivity:
    java.lang.String e -> d
    java.lang.String f -> e
    java.lang.String g -> f
    android.widget.LinearLayout h -> g
    android.widget.TableRow i -> a
    android.widget.TextView j -> b
    android.widget.Button k -> c
    pervasync.ui.android.MyListView l -> h
    java.util.Vector m -> i
    pervasync.ui.android.TableColumnsActivity n -> j
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    java.util.Vector a(pervasync.ui.android.TableColumnsActivity,java.util.Vector) -> a
    java.util.Vector a(pervasync.ui.android.TableColumnsActivity) -> a
    java.lang.String b(pervasync.ui.android.TableColumnsActivity) -> b
    java.lang.String c(pervasync.ui.android.TableColumnsActivity) -> c
    pervasync.ui.android.TableColumnsActivity d(pervasync.ui.android.TableColumnsActivity) -> d
    android.widget.LinearLayout e(pervasync.ui.android.TableColumnsActivity) -> e
    pervasync.ui.android.MyListView a(pervasync.ui.android.TableColumnsActivity,pervasync.ui.android.MyListView) -> a
    pervasync.ui.android.MyListView f(pervasync.ui.android.TableColumnsActivity) -> f
    java.lang.String a(pervasync.ui.android.TableColumnsActivity,java.lang.String) -> a
    java.lang.String g(pervasync.ui.android.TableColumnsActivity) -> g
pervasync.ui.android.TableColumnsActivity$1 -> pervasync.ui.android.bm:
    pervasync.ui.android.TableColumnsActivity aj -> a
    void onStart() -> a
    void onProgress(java.lang.String) -> a
    void onComplete(boolean,java.lang.Object) -> a
pervasync.ui.android.TableColumnsActivity$1$1 -> pervasync.ui.android.bn:
    pervasync.ui.android.TableColumnsActivity$1 eQ -> a
    void run() -> run
pervasync.ui.android.TableRowsActivity -> pervasync.ui.android.TableRowsActivity:
    java.lang.String e -> d
    java.lang.String f -> e
    java.lang.String Z -> f
    int aa -> g
    android.widget.EditText ab -> h
    android.widget.EditText ac -> i
    java.lang.String g -> j
    android.widget.LinearLayout h -> k
    android.widget.TableRow i -> a
    android.widget.TextView j -> b
    android.widget.Button k -> c
    boolean fW -> l
    boolean af -> m
    pervasync.ui.android.MyListView ag -> n
    java.util.Vector ah -> o
    pervasync.ui.android.TableRowsActivity ai -> p
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void a() -> a
    java.util.Vector a(pervasync.ui.android.TableRowsActivity,java.util.Vector) -> a
    java.util.Vector a(pervasync.ui.android.TableRowsActivity) -> a
    java.lang.String b(pervasync.ui.android.TableRowsActivity) -> b
    java.lang.String c(pervasync.ui.android.TableRowsActivity) -> c
    pervasync.ui.android.TableRowsActivity d(pervasync.ui.android.TableRowsActivity) -> d
    android.widget.LinearLayout e(pervasync.ui.android.TableRowsActivity) -> e
    android.widget.EditText a(pervasync.ui.android.TableRowsActivity,android.widget.EditText) -> a
    android.widget.EditText f(pervasync.ui.android.TableRowsActivity) -> f
    java.lang.String g(pervasync.ui.android.TableRowsActivity) -> g
    void h(pervasync.ui.android.TableRowsActivity) -> h
    android.widget.EditText b(pervasync.ui.android.TableRowsActivity,android.widget.EditText) -> b
    int i(pervasync.ui.android.TableRowsActivity) -> i
    android.widget.EditText j(pervasync.ui.android.TableRowsActivity) -> j
    pervasync.ui.android.MyListView a(pervasync.ui.android.TableRowsActivity,pervasync.ui.android.MyListView) -> a
    pervasync.ui.android.MyListView k(pervasync.ui.android.TableRowsActivity) -> k
    java.lang.String a(pervasync.ui.android.TableRowsActivity,java.lang.String) -> a
    java.lang.String l(pervasync.ui.android.TableRowsActivity) -> l
pervasync.ui.android.TableRowsActivity$1 -> pervasync.ui.android.bo:
    pervasync.ui.android.TableRowsActivity a -> a
    void onStart() -> a
    void onProgress(java.lang.String) -> a
    void onComplete(boolean,java.lang.Object) -> a
pervasync.ui.android.TableRowsActivity$1$1 -> pervasync.ui.android.bp:
    pervasync.ui.android.TableRowsActivity$1 fp -> a
    void run() -> run
pervasync.ui.android.TableRowsActivity$1$1$1 -> pervasync.ui.android.bq:
    pervasync.ui.android.TableRowsActivity$1$1 cn -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
pervasync.ui.android.TableRowsActivity$1$1$2 -> pervasync.ui.android.br:
    pervasync.ui.android.TableRowsActivity$1$1 cn -> a
    void onClick(android.view.View) -> onClick
pervasync.ui.android.TextFileActivity -> pervasync.ui.android.TextFileActivity:
    android.widget.ScrollView bi -> b
    android.widget.LinearLayout h -> c
    android.widget.TableLayout bt -> d
    android.widget.TableRow i -> e
    java.lang.String bu -> f
    java.io.File file -> g
    android.widget.TextView bv -> h
    android.widget.TextView bw -> i
    android.widget.TextView bx -> j
    android.widget.TextView by -> k
    android.widget.EditText bA -> l
    pervasync.ui.android.TextFileActivity bB -> m
    android.widget.Button k -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void a(pervasync.ui.android.TextFileActivity) -> a
    void a(pervasync.ui.android.TextFileActivity,java.lang.String) -> a
    java.lang.String b(pervasync.ui.android.TextFileActivity) -> b
pervasync.ui.android.TextFileActivity$1 -> pervasync.ui.android.bs:
    pervasync.ui.android.TextFileActivity s -> a
    void onClick(android.view.View) -> onClick
pervasync.ui.android.TextFileActivity$2 -> pervasync.ui.android.bt:
    android.app.Activity c -> a
    pervasync.ui.android.TextFileActivity s -> b
    void run() -> run
pervasync.ui.android.TextFileActivity$2$1 -> pervasync.ui.android.bu:
    pervasync.ui.android.TextFileActivity$2 ao -> a
    void onClick(android.content.DialogInterface,int) -> onClick
pervasync.ui.android.TextFileActivity$2$2 -> pervasync.ui.android.bv:
    pervasync.ui.android.TextFileActivity$2 ao -> a
    void onClick(android.content.DialogInterface,int) -> onClick
pervasync.ui.android.a -> pervasync.ui.android.bw:
    pervasync.ui.android.AutoSyncSchedulerActivity aM -> a
    void onClick(android.view.View) -> onClick
pervasync.ui.android.b -> pervasync.ui.android.bx:
    pervasync.ui.android.PervasyncSyncActivity bL -> a
    void onClick(android.view.View) -> onClick
pervasync.ui.android.c -> pervasync.ui.android.by:
    pervasync.ui.android.PervasyncBrowserActivity ft -> a
    void onClick(android.view.View) -> onClick
pervasync.util.HexEncoder -> pervasync.f.a:
    byte[] ENCODING_TABLE -> a
    byte[] DECODING_TABLE -> b
    int encode$7112a941(byte[],int,java.io.OutputStream) -> a
    boolean a(char) -> a
    int decode(java.lang.String,java.io.OutputStream) -> a
    java.lang.String encode(byte[]) -> a
    byte[] decode(java.lang.String) -> a
pervasync.util.ListResourceBundle -> pervasync.f.b:
    java.util.Hashtable aN -> a
    java.lang.String name -> b
    java.lang.String aO -> c
    pervasync.util.ListResourceBundle aP -> d
    java.util.Hashtable aQ -> e
    pervasync.util.ListResourceBundle getBundle(java.lang.String) -> a
    pervasync.util.ListResourceBundle getBundle(java.lang.String,java.lang.String) -> a
    java.lang.Object[][] getContents() -> a
    java.lang.String getString(java.lang.String) -> b
pervasync.util.OrderedProperties -> pervasync.f.c:
    java.util.Hashtable aB -> a
    java.util.Vector aC -> b
    java.lang.String getPropertyValue(java.lang.String) -> a
    pervasync.util.Property getProperty(java.lang.String) -> b
    void setPropertyValue(java.lang.String,java.lang.String) -> a
    void setProperty(pervasync.util.Property) -> a
    void putAll(pervasync.util.OrderedProperties) -> a
    void load(java.io.InputStream) -> a
    void store(java.io.OutputStream) -> a
    java.lang.Object clone() -> clone
pervasync.util.Property -> pervasync.f.d:
    java.lang.String name -> a
    java.lang.String value -> b
    java.lang.String description -> c
pervasync.util.Util -> pervasync.f.e:
    java.util.Hashtable cb -> a
    void closeConn$31c1f20() -> a
    void closeRs$2a65e1b1() -> b
    void closeStmt$6c821882() -> c
    java.lang.String arrayToCs(java.lang.Object[]) -> a
    java.lang.String[] stringArrayAppend(java.lang.String[],java.lang.String) -> a
    boolean stringArrayContains(java.lang.String[],java.lang.String) -> b
    java.lang.String[] csToArray(java.lang.String) -> a
    java.lang.String[] vectorToStringArray(java.util.Vector) -> a
    pervasync.object.SyncColumn[] vectorToSyncColumnArray(java.util.Vector) -> b
    pervasync.object.SyncTable[] vectorToSyncTableArray(java.util.Vector) -> c
    pervasync.object.SyncSchemaSub[] vectorToSyncSchemaSubArray(java.util.Vector) -> d
    pervasync.object.SyncFolderSub[] vectorToSyncFolderSubArray(java.util.Vector) -> e
    java.lang.String stackTraceToString(java.lang.Throwable) -> a
    java.lang.String getClob(pervasync.platform.DbConnection,java.lang.String,java.lang.String,java.lang.String) -> a
    void setClob$4cbe6f48(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void sendLob(boolean,boolean,long,java.lang.Object,pervasync.transport.Transport) -> a
    void readFully(java.io.Reader,char[]) -> a
    boolean receiveLob(boolean,boolean,java.lang.Object,pervasync.transport.Transport) -> a
    void executeSql$4ba88c2(java.lang.String,boolean,java.lang.String,java.lang.String) -> a
    void setSchemaProperty$42e9bbcc$31c1f20() -> d
    pervasync.object.SyncSchemaSub[] jsonArrayToSyncSchemaSubArray(org.json.JSONArray) -> a
    org.json.JSONArray syncSchemaSubArrayToJsonArray(pervasync.object.SyncSchemaSub[]) -> a
    pervasync.object.SyncFolderSub[] jsonArrayToSyncFolderSubArray(org.json.JSONArray) -> b
    org.json.JSONArray syncFolderSubArrayToJsonArray(pervasync.object.SyncFolderSub[]) -> a
    pervasync.object.SyncSchema[] jsonArrayToSyncSchemaArray(org.json.JSONArray) -> c
    org.json.JSONArray syncSchemaArrayToJsonArray(pervasync.object.SyncSchema[]) -> a
    pervasync.object.SyncFolder[] jsonArrayToSyncFolderArray(org.json.JSONArray) -> d
    org.json.JSONArray syncFolderArrayToJsonArray(pervasync.object.SyncFolder[]) -> a
    java.lang.String[] jsonArrayToStringArray(org.json.JSONArray) -> e
    org.json.JSONArray stringArrayToJsonArray(java.lang.String[]) -> a
    long[] jsonArrayToLongArray(org.json.JSONArray) -> f
    org.json.JSONArray longArrayToJsonArray(long[]) -> a
    void appendVector(java.util.Vector,java.util.Vector) -> a
    java.lang.String[] stringSplit(java.lang.String,java.lang.String,int) -> a
    java.lang.String[] stringSplit(java.lang.String,java.lang.String) -> a
    java.lang.String stringReplace(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String processServerSentPath(java.lang.String,boolean) -> a
    java.lang.String c(java.lang.String) -> c
    java.lang.String rsGetString$394ef616(pervasync.platform.ResultSet,java.lang.String) -> a
    void pstmtSetString$2331d0c1(java.lang.String,java.lang.String) -> b
    java.lang.String insertCommas(java.lang.String) -> b
